{ "name": "Oracle SQL",
  "scopeName": "source.sql",
  "fileTypes": [""],
  "patterns": [
    { "include": "#sql-code" }
  ],
  "repository": {
    "sql-code": {
      "patterns": [
        { "include": "#sql-query" }
      ]
    },
    "sql-comments": {
      "patterns": [
        { "include": "#sql-comment-block" },
        { "include": "#sql-coment-double-dash" }
      ]
    },
    "sql-hint-includes": {
      "patterns": [
        {
          "name": "keyword.other.hint.sql.oracle",
          "match": "\\b(?i)(?>all_rows|append(_values)?|cache|change_dupkey_error_index|cluster(ing)?|cursor_sharing_exact|driving_site|dynamic_sampling|fact|first_rows|full|gather_optimizer_statistics|hash|ignore_row_on_dupkey_index|index(_(?>asc|combine|desc|ffs|join|ss(_(?>asc|desc))?))?|inmemory(_pruning)?|leading|merge|model_min_analysis|monitor|native_full_outer_join|no_clustering|no_expand|no_fact|no_gather_optimizer_statistics|no_index|no_index_ffs|no_index_ss|no_inmemory|no_inmemory_pruning|no_merge|no_monitor|no_native_full_outer_join|no_parallel|no_parallel_index|no_pq_concurrent_union|no_pq_skew|no_push_pred|no_push_subq|no_px_join_filter|no_query_transformation|no_result_cache|no_rewrite|no_star_transformation|no_unnest|no_use_cube|no_use_hash|no_use_merge|no_use_nl|no_xml_query_rewrite|no_xmlindex_rewrite|no_zonemap|noappend|nocache|opt_param|ordered|parallel|parallel_index|pq_concurrent_union|pq_distribute|pq_filter|pq_skew|push_pred|push_subq|px_join_filter|qb_name|result_cache|retry_on_row_change|rewrite|star_transformation|unnest|use_concat|use_cube|use_hash|use_merge|use_nl(_with_index)?)\\b"
        },
        {  "name": "invalid.deprecated",
           "match": "\\b(?i)(?>noparallel(_index)?|norewrite)\\b"
        },
        {

          "begin": "(\\()",
          "captures": {
              "1": { "name": "meta.brace.round" }
          },
          "patterns": [
            {  "name": "variable.other",
               "match": "(@)\\w++",
               "captures": {
                   "1": { "name": "keyword.operator" }
               }
            },
            {  "name": "keyword.other.delimiter",
               "match": "\\.|,"
            },
            {  "name": "constant.numeric",
               "match": "\\b(\\d++)\\b"
            },
            {  "name": "constant.language",
               "match": "\\b(?i)(?>auto|broadcast|default|hash|join|manual|none|partition|random(_local)?|scan|serial|partition)\\b"
            },
            {  "name": "variable.other",
               "match": "."
            }
          ],
          "end": "(\\))"
        }
      ]
    },
    "sql-coment-double-dash": {
      "patterns": [
        {
          "name": "comment.line.double-dash",
          "begin": "(--\\+)",
          "beginCaptures": {
              "1": { "name": "keyword.operator" }
          },
          "patterns": [
            { "include": "#sql-hint-includes" }
          ],
          "end": "$"
        },
        {
          "name": "comment.line.double-dash",
          "match": "(--).*$",
          "captures": {
              "1": { "name": "keyword.other.delimiter.plsql.oracle" }
          }
        }
      ]
    },
    "sql-comment-block": {
      "patterns": [
        {
          "name": "meta.section.hint.sqlplus",
          "begin": "(/\\*\\+)(?=.*?\\*/)",
          "captures": {
              "1": { "name": "keyword.other.delimiter.oracle" }
          },
          "patterns": [
            { "include": "#sql-hint-includes" },
            {  "name": "comment.block",
               "match": "."
            }
          ],
          "end": "(\\*/)",
          "comment": "PL/SQL block hint"
        },
        {
          "name": "meta.section.comment.sqlplus",
          "begin": "(/\\*)",
          "captures": {
              "1": { "name": "keyword.other.delimiter.oracle" }
          },
          "patterns": [
            {  "name": "comment.block",
               "match": "."
            }
          ],
          "end": "(\\*/)",
          "comment": "PL/SQL block Comment"
        }
      ]
    },
    "sql-text-literals": {
      "patterns": [
        { "name": "constant.character",
          "begin": "(N|n)?(')",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "(\\2)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        { "name": "constant.character",
          "begin": "(N|n)?(Q|q)(')([^\\s\\[\\{<])",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "keyword.other.plsql.oracle" },
              "3": { "name": "punctuation.definition.string.begin" },
              "4": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "(\\4\\3)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        { "name": "constant.character",
          "begin": "(N|n)?(Q|q)(')([\\[\\{<])",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "keyword.other.plsql.oracle" },
              "3": { "name": "punctuation.definition.string.begin" },
              "4": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "([\\]\\}>]\\3)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        }
      ]
    },
    "sql-numeric-literals": {
      "patterns": [
        {  "name": "constant.numeric",
           "match": "((?<=\\+|-)|\\b)\\d+(d|D|e|E|f|F)?",
           "captures": {
               "2": { "name": "constant.character" }
           }
        },
        {  "name": "constant.numeric",
           "match": "\\b(?i:binary_(?>double|float)_(?>infinity|nan))\\b"
        }
      ]
    },
    "sql-interval-literals": {
      "patterns": [
        {  "name": "constant.language",
           "match": "(?<='|\\))\\s*+(?i:day|hour|minute|month|year)|(?i)(\\bto (date|hour|minute|month|second))\\b"
        }
      ]
    },
    "sql-language-literals": {
      "patterns": [
        {
         "name": "constant.language",
          "match": "\\b(?i)(?>dbtimezone|empty|error|false|null|sessiontimezone|timezone_(abbr|hour|minute|region)|true)\\b"
        }
      ]
    },
    "sql-pseudocolumns": {
      "patterns": [
        {
          "name": "support.other.pseudocolumn",
          "match": "\\b(?i)(?>column_value|connect_by_(iscycle|isleaf)|currval|level|nextval|object_(id|value)|ora_rowscn|row(id|num)|versions_(?>end(scn|time)|operation|start(scn|time)|xid)|xmldata)\\b"
        }
      ]
    },
    "sql-literals": {
      "patterns": [
        { "include": "#sql-text-literals" },
        { "include": "#sql-numeric-literals" },
        { "include": "#sql-interval-literals" },
        { "include": "#sql-language-literals" },
        { "include": "#sql-pseudocolumns" },
        {
          "name": "invalid.deprecated",
          "match": "\\b(?i)(?>sys_nc_(oid|rowinfo)\\$)"
        }
      ]
    },
    "sql-operators": {
      "patterns": [
        {
          "name": "keyword.operator.arithmetic",
          "match": "\\+|\\-|\\*|/"
        },
        {  "name": "keyword.operator.concatenation",
           "match": "\\|\\|"
        },
        {  "name": "keyword.operator.comparison.floating-point",
           "match": "\\b(?i:is( not)? (infinite|nan))\\b"
        },
        {  "name": "keyword.operator.comparison.multiset",
           "match": "\\b(?i:is( not)? (a set|empty)|(not )?(member|submultiset)( of)?)\\b"
        },
        {  "name": "keyword.operator.comparison.pattern",
           "match": "\\b(?i:(not )?like(2|4|c)?|excape|regexp_like)\\b"
        },
        {  "name": "keyword.operator.comparison.json",
           "match": "\\b(?i:is( not)? json( (lax|strict))?( with(out)?)?( unique keys)?|json_(exists|textcontains)|on error)\\b"
        },
        {  "name": "keyword.operator.comparison",
           "match": "=|!=|^=|<>|<|>|<=|>=|\\b(?i:all|any|exists|is( not)? of( type)?|is( not)? (null|present)|(not)? (between|in)|only|some)\\b"
        },
        {  "name": "keyword.operator.comparison.negation",
           "match": "\\b(?i:not)\\b"
        },
        {  "name": "keyword.operator.comparison.conjuction",
           "match": "\\b(?i:and)\\b"
        },
        {  "name": "keyword.operator.comparison.disjunction",
           "match": "\\b(?i:or)\\b"
        },
        {  "name": "keyword.operator.assignment",
           "match": "=>"
        },
        {  "name": "keyword.operator.hierarchical",
           "match": "\\b(?i)(?>connect by root|prior)\\b"
        },
        {  "name": "keyword.operator.set",
           "match": "\\b(?i)(?>intersect|minus|union( all))\\b"
        },
        {  "name": "keyword.operator.multiset",
           "match": "\\b(?i)(?>multiset (?:except|intersect|union)( (all|distinct))?)\\b",
           "captures": {
               "2": { "name": "constant.language" }
           }
        },
        {  "name": "keyword.other.delimiter",
           "match": ",|\\.|@"
        },
        {  "name": "keyword.operator.comparison.xml",
           "match": "\\b(?i:equals_path|under_path)\\b"
        }
      ]
    },
    "sql-keywords": {
      "patterns": [
        {  "name": "keyword.other.sqlplus.oracle",
           "match": "\\b(?i)(?>at|cursor|for|local|partition|subpartition|time zone)\\b"
        }
      ]
    },
    "sql-function-text-literals-include": {
      "patterns": [
        { "include": "#sqlplus-variable-substitution" },
        {  "name": "keyword.other.function.options",
           "match": "(?<=')(?i)(?>(a|b|c|e|h|m|p|y)(d|s)t|bcoefficient|gmt|nst)(?=')\\b"
        },
        {  "name": "constant.language",
           "match": "(?<=')(?i)(?>action|audited_cursorid|authenticated_identity|authentication_(?>data|method)|bg_job_id|cdb_name|chisq_(?>df|obs|sig)|client_(?>identifier|info|program|name)|coefficient|cohens_k|cont_coefficient|con_(?>id_name)|cramers_v|current_(?>bind|edition_(?>id|name)|schema(id)?|sql(_lenght)?|user(id)?)|database_role|day|db(?>domain|name|supplemental_log_level|unique_name)|dblink_info|df_(?>between|den|num|within)?|entryid|enterprise_identity|exact_prob|f_ratio|fg_job_id|global_(?>context_memory|uid)|host|hour|identification_type|instance(_name)?|ip_address|is(?>_(?>apply_server|dg_rolling_upgrade)|dba)|lang(uage)?|mean_squares_(?>between|within)|md5|minute|module|month|network_protocol|nls(?>calendar|currency|date_(format|language)|sort|territory)|one_sided_(?>prob_or_(?>less|more)|oracle_home|os_user|phi_coefficient|platform_slash|policy_invoker|proxy_(?>nterprise_identity|user(id)?|)|rn|sig(_(pos|neg))?)|second|scheduler_job|server_host|service_name|session(?>id|_(?>edition_(?>id|name)|user(id)?))|sha(1|256|384|512)|sid|sig|statementid|statistic|sum_squares_(?>between|within)|sys_session_roles|terminal|two_sided_(?>prob|sig)|tm(9|e)|unified_audit_sessionid|userenv|year|(0|FM)?X++|(FM)?([09\\$UBCLS])([9,\\.0DGPRNrnV])++(EEEE|MI|PR|S)?)(?=')\\b"
        },
        {  "name": "constant.language",
           "match": "(?i)(?>day|dd((sp|th){1,2})?|f(m|x)|hh(12|24)?|mm|mon(th)?|(rr){1,2}|(s)?yyyy|(?<=:)alnum|alpha)"
        },
        {  "name": "keyword.other.function.options",
           "match": "(?i)(?>hierarchy|hrr|nls_sort\\s*+=\\s*+)\\b"
        },
        {  "name": "keyword.other",
           "match": "[\\[\\]\\{\\}:;/\\\\\\(\\)\\.\\-\\,\\^\\$\\+\\?%<>]"
        },
        { "name": "string.quoted.double.untitled",
          "begin": "(\")(?=[^\"']*+\\1)",
          "captures": {
              "1": { "name": "punctuation.definition.string.begin" }
          },
          "end": "(\\1)"
        }
      ]
    },
    "sql-function-text-literals": {
      "patterns": [
        { "name": "constant.character",
          "begin": "(N|n)?(')",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sql-function-text-literals-include" }
          ],
          "end": "(\\2)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        { "name": "constant.character",
          "begin": "(N|n)?(Q|q)(')([^\\s\\[\\{<])",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "keyword.other.plsql.oracle" },
              "3": { "name": "punctuation.definition.string.begin" },
              "4": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sql-function-text-literals-include" }
          ],
          "end": "(\\4\\3)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        { "name": "constant.character",
          "begin": "(N|n)?(Q|q)(')([\\[\\{<])",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "keyword.other.plsql.oracle" },
              "3": { "name": "punctuation.definition.string.begin" },
              "4": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sql-function-text-literals-include" }
          ],
          "end": "([\\]\\}>]\\3)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        }
      ]
    },
    "sql-function-arguments": {
      "patterns": [
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "meta.brace.round" }
          },
          "patterns": [
            { "include": "#sql-query" },
            { "include": "#sql-functions" },
            { "include": "#sql-function-arguments" },
            { "include": "#sql-case" },
            { "include": "#sql-function-text-literals" },
            {  "name": "keyword.other.function.clauses",
               "match": "\\b(?i:all|anomaly|array|as(cii)?|auto|binary(_(?>double|float))?|byte|by|char|columns|conditional|cost|date|default|dense_rank|distinct|exists|for(mat)?|from|interval|into|json|model|multiset|nchar(_cs)?|nested|nvarchar2|number|of|order|ordinality|path|pretty|raw|respect|returning|rowid|timestamp|unconditional|urowid|using|varchar2|without|with( local)? time zone|wrapper)\\b"
            },
            { "include": "#sql-operators" },
            { "include": "#sql-numeric-literals" },
            { "include": "#sql-interval-literals" },
            { "include": "#sql-identifier" },
            { "include": "#sql-language-literals" }
          ],
          "end": "(\\))"
        }
      ]
    },
    "sql-functions": {
      "patterns": [
        {
          "name": "meta.section.function.function.single_row.conversion",
          "begin": "\\b(?i)((?>asciistr|bin_to_num|cast|chartorowid|compose|convert|decompose|hextoraw|numto(?>ds|ym)interval|rawto(?>(n)?hex|idto(n)?char)|rowidto(n)?char|scn_to_timestamp|timestamp_to_scn|to_(?>binary_(?>double|float)|blob|char|clob|date|dsinterval|lob|multibyte|nchar|nclob|number|single_byte|timestamp(_tz)?|yminterval)|treat|unistr))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))",
          "comment": "Data conversion"
        },
        {  "name": "variable.other.field.function",
           "match": "(?<=\\.)(?i:lower|upper)\\b"
        },
        {  "name": "support.function",
           "match": "\\b(?i:systimestamp|urifactory)\\b",
          "comment": "Oracle provided"
        },
        {
          "name": "meta.section.function.single_row.numeric",
          "begin": "\\b(?i)((?>abs|acos|asin|atan(2)?|bitand|ceil|cos(h)?|exp|floor|ln|log|mod|nanvl|power|remainder|round|sign|sin|sinh|sqrt|tan|tanh|trunc|width_bucket))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.character",
          "begin": "\\b(?i)((?>ascii|chr|concat|instr(b|d|2|4)?|initcap|length(b|d|2|4)?|lower|lpad|ltrim|nchr|nls_initcap|nls_(lower|charset_(decl_len|id|name))|nls_upper|nlssort|regexp_(?>count|instr|replace|substr)|replace|rpad|rtrim|soundex|substr(b|d|2|4)?|translate|trim|upper))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "support.function.single_row.datetime",
          "match": "\\b(?i:sys(date|timestamp))\\b"
        },
        {
          "name": "meta.section.function.single_row.datetime",
          "begin": "\\b(?i)((?>add_months|current_date|current_timestamp|dbtimezone|extract|from_tz|last_day|localtimestamp|months_between|new_time|next_day|numtodsinterval|numtoyminterval|ora_dst_affected|ora_dst_convert|ora_dst_error|round|sessiontimezone|sys_extract_utc|to_char|to_dsinterval|to_timestamp|to_timestamp_tz|to_yminterval|trunc|tz_offset))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.codec",
          "begin": "\\b(?i)((?>decode|dump|ora_hash|standard_hash|vsize))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.null_related",
          "begin": "\\b(?i)((?>coalesce|lnnvl|nanvl|nullif|nvl(2)?))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.environment",
          "begin": "\\b(?i)((?>con_(?>dbid|guid|name|uid)_to_id|ora_invoking_user(id)?|sys_(?>context|guid|sys)|uid|user(env)?))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.comparison",
          "begin": "\\b(?i)((?>greatest|least))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.large_object",
          "begin": "\\b(?i)((?>bfilename|empty_(b|c)lob))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" },
              "2": { "name": "meta.round.brace" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.collection",
          "begin": "\\b(?i)((?>cardinality|collect|powermultiset(_by_cardinality)?|set))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "support.function.single_row.hierarchical",
          "match": "\\b(?i)(?>sys_connect_by_path)\\b"
        },
        {
          "name": "meta.section.function.single_row.data_mining",
          "begin": "\\b(?i)((?>cluster_(?>details|distance|id|probability|set)|feature_(?>details|id|set|value)|prediction(_(?>bounds|cost|details|probability|set))?))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "meta.section.function.single_row.xml",
          "begin": "\\b(?i)((?>appendchildxml|deletexml|depth|existsnode|extract(value)?|insertchildxml(?>after|before)?|insertxml(?>after|before)|path|sys_(?>dburigen|xml(?>agg|gen))|updatexml|xmlagg|xmlcast|xmlcdata|xmlcolattval|xmlcomment|xmlconcat|xmldiff|xmlelement|xmlexists|xmlforest|xmlisvalid|xmlparse|xmlpatch|xmlpi|xmlquery|xmlroot|xmlsequence|xmlserialize|xmltable|xmltransform))\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" },
              "2": { "name": "meta.round.brace" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "support.function.single_row.json",
          "match": "\\b(?i)(?>json_(?>query|table|value))\\b(?=\\s*+\\()"
        },
        {
          "name": "meta.section.function.aggregate",
          "begin": "\\b(?i)((?>approx_count_distinct|avg|collect|corr(_(?>s|k))?|count|covar_(?>pop|samp)|cume_dist|dense_rank|first|group_id|grouping(_id)?|last|listagg|max|median|min|percent_rank|percentile_(cont|disc)|rank|regr_(?>slope|intercept|count|r2|avg(?>x|y)|sx(x|y)|syy)|stats_binomial_test|stats_crosstab|stats_f_test|stats_ks_test|stats_mode|stats_mw_test|stats_one_way_anova|stats_t_test_(?>one|paired|indep(u)?)|stats_wsr_test|stddev(_(?>pop|samp))?|sum|sys_op_zone_id|sys_xmlagg|var_(?>pop|samp)|variance|xmlagg))(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "support.function" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?<=\\))"
        },
        {
          "name": "support.function.analytic",
          "match": "\\b(?i)(?>first_value|lag|last_value|lead|nth_value|ntile|ratio_to_report|row_number)\\b"
        },
        { "name": "meta.section.parameters.analytic.function",
          "begin": "(?<=\\))\\s*+((?i:over|within group))|\\b((?i:over|within group))\\s*+(?=\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" },
              "2": { "name": "keyword.other" }
          },
          "patterns": [
            { "name": "meta.section.parameters.analytic.function",
              "begin": "(\\()",
              "patterns": [
                { "include": "#sql-expression" },
                {
                  "name": "keyword.other.function.analytic.clauses",
                  "match": "\\b(?i)(?>and|between|by|current|following|nulls|order|over|partition|preceding|range|row(s)?|unbounded)\\b"
                }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))",
          "endCaptures": {
              "1": { "name": "meta.brace.round" }
          }
        },
        {
          "name": "constant.language",
          "match": "\\b(?i)(?>abs|asc|desc|first|last)\\b"
        },
        {
          "name": "support.function.object_reference",
          "match": "\\b(?i)(?>deref|make_ref|ref(tohex)?|value)(?=\\s*+\\()"
        },
        {
          "name": "support.function.model",
          "match": "\\b(?i)(?>cv|iteration_number|present(?>nnv|v)|previous)\\b"
        },
        {
          "name": "meta.section.function.olap",
          "begin": "\\b(?i)((?>cube_table))\\s*+(\\()",
          "beginCaptures": {
              "1": { "name": "support.function" },
              "2": { "name": "meta.round.brace" }
          },
          "patterns": [
            { "include": "#sql-function-arguments" }
          ],
          "end": "(\\))"
        },
        {
          "name": "support.function.data_cartridge",
          "match": "\\b(?i)(?>dataobj_to_partition)\\b"
        },
        {  "name": "invalid.deprecated",
           "match": "\\b(?i)(?>sys_xml(?>agg|gen))\\b",
          "comment": "Deprecated"
        }
      ]
    },
    "sql-parenthesis": {
      "patterns": [
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "meta.brace.round" }
          },
          "patterns": [
            { "include": "#sql-query" },
            { "include": "#sql-expression" }
          ],
          "end": "(\\))"
        }
      ]
    },
    "sql-identifier": {
      "patterns": [
        {
          "name": "variable.other",
          "begin": "(\")",
          "captures": {
              "1": { "name": "punctuation.definition.string.end" }
          },
          "end": "(\")"
        },
        {
          "name": "variable.other",
          "match": "\\b([[:alpha:]]([[:alnum:]\\$#_]){,29})(?=\\.)"
        },
        {
          "name": "variable.other",
          "match": "(?<=@)\\w++"
        },
        {  "name": "variable.other",
           "match": "(:)\\w+",
           "captures": {
               "1": { "name": "keyword.other.delimiter" }
           }
        },
        {  "name": "keyword.other",
           "match": "\\b(?i:indicator)\\b"
        },
        {  "name": "variable.other",
           "match": "\\b(?<=(a|A)(S|s))\\s*+(?!(?i:timestamp|varchar2))\\w++"
        },
        {  "name": "variable.other",
           "match": "\\w++(?=\\[)"
        }
      ]
    },
    "sql-case": {
      "name": "meta.section.block.conditional.plsql.oracle",
      "begin": "\\s*+((?i:case))\\b",
      "beginCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" }
      },
      "patterns": [
        {  "name": "keyword.control.plsql.oracle",
           "match": "\\b(?i:when)\\b"
        },
        {
          "name": "meta.section.block.branch.conditional.plsql.oracle",
          "begin": "\\b((?i:else|then))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            { "include": "#sql-expression" }
          ],
          "end": "(?=\\s*+(?i:when|else|end( case)?)\\b)"
        },
        { "include": "#sql-expression" }
      ],
      "end": "\\b((?i:end( case)?))",
      "endCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" },
          "2": { "name": "keyword.other.delimiter.plsql.oracle" }
      }
    },
    "sql-expression": {
      "patterns": [
        { "include": "#sql-comments" },
        { "include": "#sql-function-arguments" },
        { "include": "#sql-functions" },
        { "include": "#sql-literals" },
        { "include": "#sql-operators" },
        { "include": "#sql-keywords" },
        { "include": "#sqlplus-variable-substitution" },
        { "include": "#sql-case" },
        { "include": "#sql-identifier" }
      ]
    },
    "sql-from-keywords": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "\\b(?i:as)\\b"
        }
      ]
    },
    "sql-from-include": {
      "patterns": [
        { "include": "#sql-comments" },
        { "include": "#sql-model" },
        { "include": "#sql-parenthesis" },
        { "include": "#sql-json-table" },
        { "include": "#sql-identifier" },
        { "include": "#sql-from-keywords" }
      ]
    },
    "sql-model": {
      "patterns": [
        {
          "name": "meta.section.model.from.query",
          "begin": "\\b((?i:model))",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "\\b(?i)(?>dimension by|ignore nav|in|iterate|keep nav|main|measures|on|order|partition by|reference|return (all|updated) rows|rules( (update|upsert( all)?))?( (automatic|sequential) order)?|single|unique (dimension|single reference)|until)\\b"
            },
            { "include": "#sql-function-arguments" }
          ],
          "end": "(?=\\s*+(?i:connect|group|order|start|where)\\b)|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
        }
      ]
    },
    "sql-json-table": {
      "patterns": [
        {
          "name": "support.function.single_row.json",
          "match": "\\b(?i:json_table)\\b"
        }
      ]
    },
    "sql-query": {
      "patterns": [
        {
          "name": "meta.section.query.sql.oracle",
          "begin": "(?=\\s*+((?i:select))\\b)",
          "patterns": [
            { "begin": "\\s*+((?i:select))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=\\s*+(?i:from)\\b)"
            },
            { "begin": "\\s*+((?i:from))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-from-include" }
              ],
              "end": "(?=\\s*+(?i:connect|group|order|start|where)\\b)|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            },
            { "begin": "\\s*+((?i:where))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=\\s*+(?i:group|order|start)\\b)|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            },
            { "begin": "\\s*+((?i:order))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            },
            { "begin": "\\s*+((?i:start))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=\\s*+(?i:connect)\\b)|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            },
            { "begin": "\\s*+((?i:connect))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=\\s*+(?i:order)\\b)|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            },
            { "begin": "\\s*+((?i:group))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=\\s*+(?i:having|order)\\b)|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            },
            { "begin": "\\s*+((?i:having))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other.sql.oracle" }
              },
              "patterns": [
                { "include": "#sql-expression" }
              ],
              "end": "(?=\\s*+(?i:order))|(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
            }
          ],
          "end": "(?=;|\\))|^(?=\\s*+/\\s*+$)|^(?=\\.\\s*+$)"
        }
      ]
    }
  },
  "uuid": "a4ca2c84-f85d-4eed-a920-649b44cbdced"
}
