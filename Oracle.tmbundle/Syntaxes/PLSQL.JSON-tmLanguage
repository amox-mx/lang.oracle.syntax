{ "name": "Oracle PL/SQL",
  "scopeName": "source.plsql",
  "fileTypes": [""],
  "patterns": [
    { "include": "#plsql-code" }
  ],
  "repository": {
    "sqlplus-variable-substitution": {
      "name": "variable.other.substitution.sqlplus.oracle",
      "match": "(&{1,2})\\s*+\\w++(\\.?)",
      "captures": {
          "1": { "name": "punctuation.definition.variable" },
          "2": { "name": "punctuation.definition.variable" }
      }
    },
    "plsql-code": {
      "patterns": [
        { "include": "#plsql-anonymous-block" },
        { "include": "#plsql-named-block-package" },
        { "include": "#plsql-named-block-procedure" },
        { "include": "#plsql-named-block-function" },
        { "include": "#plsql-named-block-trigger" }
      ]
    },
    "plsql-code-declaration": {
      "patterns": [
        { "include": "#plsql-storage" },
        { "include": "#plsql-pragma" },
        { "include": "#plsql-expression" },
        { "include": "#plsql-named-block-procedure" },
        { "include": "#plsql-named-block-function" }
      ]
    },
    "plsql-pragma": {
      "patterns": [
        {  "name": "keyword.control.sqlplus.oracle",
           "match": "\\b(?i:pragma)\\b"
        },
        {  "name": "constant.language",
           "match": "\\b(?i:autonomous_transaction|exception_init|inline|rnds|rnps|serially_reusable|trust|udf|wnds|wnps)\\b"
        },
        {  "name": "invalid.deprecated",
           "match": "\\b(?i:restrict_references)\\b"
        }
      ]
    },
    "plsql-precompile": {
      "patterns": [
        {  "name": "keyword.other.sqlplus.oracle",
           "match": "(?<=\\s)(\\$){1,2}"
        },
        {  "name": "keyword.control.plsql.oracle",
           "match": "(?<=\\$)(?i:end|else|elsif|error|if|then)"
        }
      ]
    },
    "plsql-storage": {
      "patterns": [
        { "include": "#plsql-storage-composite" },
        { "include": "#plsql-storage-basic" }
      ]
    },
    "plsql-storage-basic": {
      "patterns": [
        {  "name": "storage.type.sql",
           "match": "\\b(?i)(?>blob|char(acter)?|clob|date|integer|nchar|nclob|nvarchar2|number|raw|real|varchar(2)?)\\b"
        },
        {  "name": "storage.type.plsql",
           "match": "\\b(?i)(?>binary_(?>double|integer)|boolean|exception|natural(n)?|pls_integer|positive(n)?ref_cursor|rowid|simple_(?>double|integer|float)|singtype|string|sys_refcursor|urowid|varray)\\b"
        },
        {  "name": "invalid.deprecated",
           "match": "\\b(?i:long( raw)?)\\b"
        },
        {  "name": "storage.modifier",
           "match": "\\b(?i:character set|constant|default|index by|is|not null|of|range|subtype|table of|type|ref cursor|return)\\b"
        },
        {  "name": "storage.modifier",
           "match": "(?<=%)(?i:rowtype|type)"
        }
      ]
    },
    "plsql-storage-composite": {
      "patterns": [
        { "name": "meta.section.type",
          "begin": "^\\s*+\\b((?i:type))\\s*+(\\w++)",
          "beginCaptures": {
              "1": { "name": "storage.type" },
              "2": { "name": "variable.other" }
          },
          "patterns": [
            { "name": "meta.section.type.record.plsql.oracle",
              "begin": "\\b((?i:record))\\b",
              "beginCaptures": {
                  "1": { "name": "storage.type.plsql.oracle" }
              },
              "patterns": [
                { "include": "#plsql-code-declaration" }
              ],
              "end": "(?=;)"
            },
            { "include": "#plsql-storage-basic" }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.section.cursor.plsql.oracle",
          "begin": "\\b(?=(?i:cursor)\\b)",
          "patterns": [
            { "include": "#sql-select" },
            {  "name": "storage.type.plsql",
               "match": "\\b(?i:cursor)\\s++(\\w++)",
               "captures": {
                   "1": { "name": "variable.other" }
               }
            },
            {  "name": "keyword.other.plsql",
               "match": "\\b(?i)(?>is|return)\\b"
            },
            {  "name": "meta.section.return.clause",
               "match": "(\\w++)((%)(\\w++))?",
               "captures": {
                   "1": { "name": "variable.other" },
                   "2": { "name": "keyword.operator.delimiter" },
                   "2": { "name": "storage.modifier" }
               }
            },
            { "include": "#plsql-parameter-definition" }
          ],
          "end": "(?=;)"
        }
      ]
    },
    "plsql-keyword": {
      "patterns": [
        {  "name": "keyword.control.plsql.oracle",
           "match": "\\b(?i)(?>continue|exit|goto|return)\\b"
        }
      ]
    },
    "plsql-expression": {
      "patterns": [
        { "include": "#plsql-comments" },
        { "include": "#plsql-strings" },
        { "include": "#plsql-delimiters" },
        { "include": "#plsql-precompile" },
        { "include": "#plsql-support-functions" },
        { "include": "#sqlplus-variable-substitution" },
        { "include": "#plsql-operator" },
        { "include": "#plsql-keyword" },
        { "include": "#plsql-literal" },
        { "include": "#plsql-identifier" }
      ]
    },
    "plsql-statements": {
      "patterns": [
        { "name": "meta.section.open.statement.plsql.oracle",
          "begin": "\\b(?=(?i:open))\\b",
          "patterns": [
            {  "name": "keyword.other",
               "match": "\\b(?i:open)\\s++(:)?(\\w++)",
               "captures": {
                   "1": { "name": "keyword.other.delimiter" },
                   "2": { "name": "variable.other" }
               }
            },
            { "include": "#plsql-parameter-call" },
            {  "name": "keyword.other.plsql.oracle",
               "match": "\\b(?i:for)\\b"
            },
            { "name": "meta.section.query",
              "begin": "(?=\\b(?i:select))",
              "patterns": [
                { "include": "source.sql" }
              ],
              "end": "(?=;)"
            }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.section.open.statement.plsql.oracle",
          "begin": "\\b(?=(?i:close))\\b",
          "patterns": [
            {  "name": "keyword.other",
               "match": "\\b(?i:close)\\s++(:)?(\\w++)",
               "captures": {
                   "1": { "name": "keyword.other.delimiter" },
                   "2": { "name": "variable.other" }
               }
            },
            {  "name": "keyword.operator",
               "match": ":"
            }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.section.open.statement.plsql.oracle",
          "begin": "\\b(?=(?i:fetch))\\b",
          "patterns": [
            {  "name": "keyword.other",
               "match": "\\b(?i:fetch)\\s++(\\w++)",
               "captures": {
                   "1": { "name": "variable.other" }
               }
            },
            {  "name": "keyword.other",
               "match": "\\b(?i:bulk collect|into|limit)\\b"
            },
            {  "name": "constant.numeric",
               "match": "\\b\\d++\\b"
            },
            {  "name": "variable.other",
               "match": "\\w++"
            },
            {  "name": "keyword.operator.delimiter",
               "match": ",|:|\\(|\\)|\\."
            }
          ],
          "end": "(?=;)"
        }
      ]
    },
    "plsql-code-executable": {
      "patterns": [
        { "include": "#plsql-block" },
        { "include": "#sql-static" },
        { "include": "#plsql-expression" },
        { "include": "#plsql-block-conditional" },
        { "include": "#plsql-block-loop" },
        { "include": "#plsql-statements" }
      ]
    },
    "plsql-comments": {
      "patterns": [
        { "include": "#plsql-comment-block" },
        { "include": "#plsql-coment-double-dash" }
      ]
    },
    "plsql-coment-double-dash": {
      "name": "comment.line.double-dash",
      "match": "(--).*$",
      "captures": {
          "1": { "name": "keyword.other.delimiter.plsql.oracle" }
      }
    },
    "plsql-comment-block": {
      "name": "meta.section.comment.sqlplus",
      "begin": "(/\\*)",
      "captures": {
          "1": { "name": "keyword.other.delimiter.oracle" }
      },
      "patterns": [
        {  "name": "comment.block",
           "match": "."
        }
      ],
      "end": "(\\*/)",
      "comment": "PL/SQL block Comment"
    },
    "plsql-stringsx": {
      "patterns": [
        { "include": "#plsql-string-single-quoted" }
      ]
    },
    "plsql-string-single-quoted": {
      "name": "string.quoted.single",
      "begin": "(')",
      "captures": {
          "1": { "name": "punctuation.definition.string.begin" }
      },
      "patterns": [
        { "include": "#sqlplus-variable-substitution" }
      ],
      "end": "(\\1)",
      "comment": "Multi-line, proper continuation"
    },
    "plsql-operator": {
      "patterns": [
        {  "name": "keyword.operator.plsql.oracle",
           "match": "\\+|:=|=>|\\|\\||/|\\*\\*|\\*|\\.\\.|=|<>|!=|~=|\\^=|<|>|<=|>=|-"
        },
        {  "name": "keyword.operator.boolean",
           "match": "\\b(?i:and|not|or)\\b"
        },
        {  "name": "keyword.operator.comparison",
           "match": "\\b(?i:between|in|is (not )?null|like|escape)\\b"
        },
        {  "name": "keyword.operator.plsql.oracle",
           "match": "\\b(?i)(?>is empty|is (not )?a set|member of|multiset (?>except|intersect|union)( distinct)?|submultiset of)\\b"
        }
      ]
    },
    "plsql-delimiters": {
      "patterns": [
        {  "name": "keyword.other.indicator.plsql.oracle",
           "match": "%|\\.|:|@"
        },
        {  "name": "keyword.other.delimiter.plsql.oracle",
           "match": ",|<<|>>|;"
        }
      ]
    },
    "plsql-identifier": {
      "patterns": [
        {
          "name": "variable.other",
          "match": "\\b([[:alpha:]]([[:alnum:]\\$#_]){,29})(?=\\.)"
        },
        {
          "name": "variable.other",
          "match": "\\b([[:alpha:]]([[:alnum:]\\$#_]){,29})(?i)(?=%(?>bulk_(?>exceptions|rowcount)|found|isopen|notfound|rowcount))"
        },
        {
          "name": "variable.other",
          "begin": "(\")(?=([^\"]){,30}\")",
          "captures": {
              "1": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "(\\1)",
          "comment": "Multi-line, proper continuation"
        }
      ]
    },
    "plsql-literal": {
      "patterns": [
        { "name": "constant.character",
          "begin": "(N|n)?(')",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "(\\2)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        { "name": "constant.character",
          "begin": "(N|n)?(Q|q)(')([^\\s\\[\\{<])",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "keyword.other.plsql.oracle" },
              "3": { "name": "punctuation.definition.string.begin" },
              "4": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "(\\4\\3)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        { "name": "constant.character",
          "begin": "(N|n)?(Q|q)(')([\\[\\{<])",
          "beginCaptures": {
              "1": { "name": "keyword.other.plsql.oracle" },
              "2": { "name": "keyword.other.plsql.oracle" },
              "3": { "name": "punctuation.definition.string.begin" },
              "4": { "name": "punctuation.definition.string.begin" }
          },
          "patterns": [
            { "include": "#sqlplus-variable-substitution" }
          ],
          "end": "([\\]\\}>]\\3)",
          "endCaptures": {
              "1": { "name": "punctuation.definition.string.end" }
          }
        },
        {  "name": "constant.numeric",
           "match": "((?<=\\+|-)|\\b)\\d+(d|D|e|E|f|F)?",
           "captures": {
               "2": { "name": "constant.character" }
           }
        },
        {  "name": "constant.language",
           "match": "\\b(?i:access_into_null|binary_double_(?>infinity|max_normal|max_subnormal|min_normal|min_subnormal|nan)|binary_float_(?>infinity|max_normal|max_subnormal|min_normal|min_subnormal|nan)|case_not_found|currval|cursor_already_open|day|dup_val_on_index|extend|false|found|hour|interval|invalid_(?>cursor|number)|level|limit|login_denied|minute|next(val)?|no_data_(?>found|needed)|notfound|not_logged_on|null|object_value|others|program_error|rowcount|rownum|rowtype_mismatch|second|self_is_null|storage_error|subscript_beyond_count|subscript_outside_limit|sys_invalid_rowid|sysdate|systimestamp|timeout_on_resource|too_many_rows|to|true|value_error|zero_divide|(?<=\\.)(?>count|delete|exists|first|last|prior|trim)|(?<=%)(?>bulk_(?>exceptions|rowcount)|found|isopen|notfound|rowcount))\\b"
        }
      ]
    },
    "plsql-parameter-definition": {
      "patterns": [
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "meta.brace.round" }
          },
          "patterns": [
            { "include": "#plsql-comments" },
            { "include": "#plsql-literal" },
            { "include": "#plsql-storage-basic" },
            {  "name": "keyword.other",
               "match": "\\b(?i)(?>in|nocopy|out)\\b"
            },
            {  "name": "variable.other",
               "match": "\\w++(?=\\.)"
            },
            {  "name": "keyword.operator.assignment",
               "match": ":=|,"
            }
          ],
          "end": "(\\))"
        }
      ]
    },
    "plsql-parameter-call": {
      "patterns": [
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "meta.brace.round" }
          },
          "patterns": [
            { "include": "#plsql-comments" },
            { "include": "#plsql-literal" },
            {  "name": "keyword.operator.delimiter",
               "match": "=>|,"
            }
          ],
          "end": "(\\))"
        }
      ]
    },
    "plsql-support-functions": {
      "patterns": [
        { "include": "#plsql-support-functions-oracle" }
      ]
    },
    "plsql-support-functions-oracle": {
      "name": "support.function.plsql.oracle",
      "match": "\\b(?i:(?>cardinality|dbms_([[:alpha:]]([[:alnum:]\\$#_]){,24})|ht(f|p)|raise_application_error|utl_(?>file|http|smtp)|sql(?>code|errm)))\\b"
    },
    "plsql-block": {
      "name": "meta.section.block.plsql.oracle",
      "begin": "(?=\\s*+(?i:declare|begin))\\b",
      "patterns": [
        { "include": "#plsql-anonymous-block" }
      ],
      "end": "(?<=;)"
    },
    "plsql-anonymous-block": {
      "patterns": [
        { "include": "#plsql-block-declaration" },
        { "include": "#plsql-block-body" }
      ]
    },
    "plsql-block-declaration": {
      "name": "meta.section.block.declaration.plsql.oracle",
      "begin": "\\s*+\\b((?i:declare|is|as))\\b",
      "beginCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" }
      },
      "patterns": [
        { "include": "#plsql-code-declaration" }
      ],
      "end": "(?=\\s*+(?i:begin)\\b)"
    },
    "plsql-block-body": {
      "name": "meta.section.block.body.plsql.oracle",
      "begin": "\\s*+((?i:begin))\\b",
      "beginCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" }
      },
      "patterns": [
        { "include": "#plsql-block-exception" },
        { "include": "#plsql-code-executable" }
      ],
      "end": "\\b((?i:end))\\b\\s*+(?!(?i:if|loop)\\b)(\\w++)?\\s*+(;)",
      "endCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" },
          "2": { "name": "entity.name.function.plsql.oracle" },
          "3": { "name": "keyword.other.delimiter.plsql.oracle" }
      }
    },
    "plsql-block-exception": {
      "name": "meta.section.block.exception.plsql.oracle",
      "begin": "\\s*+((?i:exception))\\b",
      "beginCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" }
      },
      "patterns": [
        {
          "name": "meta.section.block.branch.exception.plsql.oracle",
          "begin": "\\b((?i:then))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            { "include": "#plsql-code-executable" }
          ],
          "end": "(?=\\s*+\\b(?i:end|when)\\b)"
        },
        {  "name": "keyword.control.plsql.oracle",
           "match": "\\b(?i:when)\\b"
        },
        { "include": "#plsql-expression" }
      ],
      "end": "(?=\\s*+\\b(?i:end)\\b)"
    },
    "plsql-block-conditional": {
      "patterns": [
        {
          "name": "meta.section.block.conditional.plsql.oracle",
          "begin": "\\s*+((?i:if))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            {
              "name": "meta.section.block.branch.conditional.plsql.oracle",
              "begin": "\\b((?i:else|then))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.control.plsql.oracle" }
              },
              "patterns": [
                { "include": "#plsql-code-executable" }
              ],
              "end": "(?=\\s*+(?i:elsif|else|end if)\\b)"
            },
            {  "name": "keyword.control.plsql.oracle",
               "match": "\\b(?i:elsif)\\b"
            },
            { "include": "#plsql-expression" }
          ],
          "end": "\\b((?i:end\\s++if))\\s*+(;)",
          "endCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" },
              "2": { "name": "keyword.other.delimiter.plsql.oracle" }
          }
        },
        {
          "name": "meta.section.block.conditional.plsql.oracle",
          "begin": "\\s*+((?i:case))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            {  "name": "keyword.control.plsql.oracle",
               "match": "\\b(?i:when)\\b"
            },
            {
              "name": "meta.section.block.branch.conditional.plsql.oracle",
              "begin": "\\b((?i:else|then))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.control.plsql.oracle" }
              },
              "patterns": [
                { "include": "#plsql-code-executable" }
              ],
              "end": "(?=\\s*+(?i:when|else|end( case)?)\\b)"
            },
            { "include": "#plsql-expression" }
          ],
          "end": "\\b((?i:end( case)?))",
          "endCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" },
              "2": { "name": "keyword.other.delimiter.plsql.oracle" }
          }
        }
      ]
    },
    "plsql-block-loop": {
      "patterns": [
        {
          "name": "meta.section.block.loop.plsql.oracle",
          "begin": "\\s*+((?i:for|while))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            {  "name": "keyword.control.plsql.oracle",
               "match": "\\b(?i:reverse)\\b"
            },
            {  "name": "variable.other",
               "match": "(?<=(f|F)(o|O)(r|R))\\s++\\w++"
            },
            {
              "name": "meta.section.block.loop.plsql.oracle",
              "begin": "\\s*+((?i:loop))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.control.plsql.oracle" }
              },
              "patterns": [
                {  "name": "keyword.control.plsql.oracle",
                   "match": "\\b(?i:continue( [[:alpha:]](?:[[:alnum:]\\$#_]){,29})? when|exit( [[:alpha:]](?:[[:alnum:]\\$#_]){,29})?\\s++when)\\b",
                   "captures": {
                       "1": { "name": "variable.other" },
                       "2": { "name": "variable.other" }
                   }
                },
                { "include": "#plsql-code-executable" }
              ],
              "end": "(?=(?i:end loop))"
            },
            { "name": "meta.section.select.query",
              "begin": "(?=\\b(?i:select)\\b)",
              "patterns": [
                { "include": "source.sql" }
              ],
              "end": "(?=\\s*+\\))"
            },
            { "include": "#plsql-expression" }
          ],
          "end": "\\b((?i:end\\s++loop))\\s*+([[:alpha:]](?:[[:alnum:]\\$#_]){,29})?(;)",
          "endCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" },
              "2": { "name": "variable.other" },
              "3": { "name": "keyword.other.delimiter.plsql.oracle" }
          }
        },
        {
          "name": "meta.section.block.loop.plsql.oracle",
          "begin": "\\s*+((?i:loop))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            {  "name": "keyword.control.plsql.oracle",
               "match": "\\b(?i:continue( [[:alpha:]](?:[[:alnum:]\\$#_]){,29})? when|exit( [[:alpha:]](?:[[:alnum:]\\$#_]){,29})?\\s++when)\\b",
               "captures": {
                   "1": { "name": "variable.other" },
                   "2": { "name": "variable.other" }
               }
            },
            { "include": "#plsql-code-executable" }
          ],
          "end": "\\b((?i:end\\s++loop))\\s*+([[:alpha:]](?:[[:alnum:]\\$#_]){,29})?(;)",
          "endCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" },
              "2": { "name": "variable.other" },
              "3": { "name": "keyword.other.delimiter.plsql.oracle" }
          }
        }
      ]
    },
    "plsql-named-block": {
      "patterns": [
        { "include": "#plsql-block-declaration" },
        { "include": "#plsql-block-body" }
      ]
    },
    "plsql-named-block-procedure": {
      "name": "meta.section.block.procedure.plsql.oracle",
      "begin": "(?=\\s*+\\b(?i:procedure))",
      "patterns": [
        { "include": "#plsql-parameter-definition" },
        { "include": "#plsql-named-block" }
      ],
      "end": "(?<=;)"
    },
    "plsql-named-block-function": {
      "name": "meta.section.block.function.plsql.oracle",
      "begin": "(?=\\s*+(?i:function))",
      "patterns": [
        { "include": "#plsql-parameter-definition" },
        { "include": "#plsql-named-block" }
      ],
      "end": "(?<=;)"
    },
    "plsql-named-block-package": {
      "name": "meta.section.block.package.plsql.oracle",
      "begin": "(?=\\s*+(?i:package))",
      "patterns": [
        {
          "name": "meta.section.block.declaration.plsql.oracle",
          "begin": "\\s*+((?i:is|as))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.plsql.oracle" }
          },
          "patterns": [
            { "include": "#plsql-code-declaration" }
          ],
          "end": "(?=\\s*+\\b(?i:begin|end)\\b.*?;)"
        }
      ],
      "end": "\\b((?i:end))\\b\\s*+(?!(?i:if|loop)\\b)(\\w++)?\\s*+(;)",
      "endCaptures": {
          "1": { "name": "keyword.control.plsql.oracle" },
          "2": { "name": "entity.name.function.plsql.oracle" },
          "3": { "name": "keyword.other.delimiter.plsql.oracle" }
      }
    },
    "plsql-named-block-trigger": {
      "name": "meta.section.block.function.plsql.oracle",
      "begin": "(?=\\s*+(?i:trigger))",
      "patterns": [
        { "include": "#plsql-named-block" }
      ],
      "end": "(?<=;)"
    },
    "sql-static": {
      "patterns": [
        { "include": "#plsql-with" },
        { "include": "#sql-select" },
        { "include": "#sql-dml" },
        { "include": "#sql-transaction" }
      ]
    },
    "sql-transaction": {
      "patterns": [
        {
          "begin": "(?=\\b(?i:commit|lock table|rollback|savepoint|set transaction)\\b)",
          "patterns": [
            { "include": "source.sql" }
          ],
          "end": "(?=/|;)"
        }
      ]
    },
    "plsql-with": {
      "patterns": [
        {
          "name": "meta.section.block.with.plsql.oracle",
          "begin": "\\s*+((?i:with))\\b",
          "beginCaptures": {
            "1": { "name": "keyword.other.query.sql.oracle" }
          },
          "patterns": [
            { "include": "#plsql-named-block-function" },
            { "include": "source.sql" },
            {  "name": "variable.other",
               "match": "\\b\\w++\\s++(?=(a|A)(s|S))"
            },
            {  "name": "keyword.other.sql.oracle",
               "match": "\\b(?i)(?>as|by|cycle|default|first|nulls|search|set|to)\\b"
            },
            {  "name": "constant.language",
               "match": "\\b(?i)(?>asc|breadth|depth|desc|first|last)\\b"
            },
            {  "name": "variable.other.alias",
               "match": "(?<=(b|B)(y|Y))\\s++\\w++"
            },
            {  "name": "variable.other.alias",
               "match": "(?<=(s|S)(e|E)(t|T))\\s++\\w++"
            },
            {  "name": "variable.other.alias",
               "match": "(?<=\\s(c|C)(y|Y)(c|C)(l|L)(e|E))\\s++\\w++"
            },
            { "include": "#plsql-literal" }
          ],
          "end": "(?=;)"
        }
      ]
    },
    "plsql-expression-enclosed": {
      "patterns": [
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "meta.brace.round" }
          },
          "patterns": [
            { "include": "#sql-select" },
            { "include": "#plsql-expression-enclosed" },
            { "include": "#plsql-expression" }
          ],
          "end": "(\\))"
        }
      ]
    },
    "sql-select": {
      "patterns": [
        {
          "name": "meta.section.block.query.sql.oracle",
          "begin": "(?=\\s*+\\b(?i:select)\\b)",
          "patterns": [
            { "include": "source.sql" }
          ],
          "end": "(?=;|\\))"
        }
      ]
    },
    "sql-dml": {
      "patterns": [
        {
          "name": "meta.section.block.query.sql.oracle",
          "begin": "^(?=\\s*+\\b(?i)(?>delete|insert|update)\\b)",
          "patterns": [
            { "include": "source.sql" }
          ],
          "end": "(?=;|\\))"
        }
      ]
    },
    "sql-select-include": {
      "patterns": [
        { "include": "#plsql-comments" },
        { "include": "#plsql-strings" },
        { "include": "#plsql-delimiters" },
        { "include": "#plsql-expression-enclosed" },
        { "include": "#plsql-support-functions" },
        { "include": "#sqlplus-variable-substitution" },
        { "include": "#plsql-operator" },
        {  "name": "keyword.other.query.sql.oracle",
           "match": "\\b(?i)(?>all|any|apply|as( of)?|automatic|between|block|by|check option|classifier|connect( by)?|constraint|containers|cross|cube|cycle|decrement|default|define|dimension( by)?|distinct|exclude|fetch|final|first( by)?|for|from|full|grouping sets|group( by)?|having|ignore|include|increment|inner|intersect|into|in|iterate|join|keep|last|lateral|left|like|locked|main|match_number|match recognize|maxvalue|measures|minvalue|minus|model|natural|nav|next|no(?>cycle|wait)|nulls|offset|of|only|on(e)?|order( by)?|outer|partition( by)?|pattern|percent|period|permute|per match|pivot|prev|prior|read only|reference|return|right|rollup|row(s)?|rules|running|sample|seed|scn|search|select|set|sequential|siblings|single( reference)?|skip|start( with)?|subset|table|ties|timestamp|union( all)?|to|unique|unpivot|until|update(d)?|upsert|using|versions|where|wait|with|xml)\\b"
        },
        {  "name": "constant.language",
           "match": "\\b(?i)(?>asc|breadth|desc|depth|first|last)\\b"
        },
        { "include": "#plsql-literal" },
        { "include": "#plsql-identifier" }
      ]
    }
  },
  "uuid": "93beb44a-597f-471d-b323-8d8a34ec2a3e"
}
