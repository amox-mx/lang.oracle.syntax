// [PackageDev] target_format: plist, ext: tmLanguage
{ "name": "Oracle SQL",
  "scopeName": "source.oracle.sql",
  "fileTypes": [""],
  "hidden": true,
  "patterns": [
    { "include": "#statement" }
  ],
  "repository": {
    "statement": {
      "patterns": [
        {
          "name": "meta.statement.oracle.sql",
          "begin": "(?=(?i)^\\s*(\\(|a(dminister|nalyze|lter|ssociate|udit)|c(all|omm(ent|it)|reate)|d(elete|isassociate|rop)|explain|flashback|grant|insert|lock|merge|noaudit|purge|r(e(name|voke)|ollback)|s(avepoint|e(t|lect))|truncate|update)\\b)",
          "patterns": [
            { "include": "#statement-ddl" },
            { "include": "#statement-dml-select" },
            { "include": "#statement-dml" },
            { "include": "#statement-control-transaction" },
            { "include": "#statement-control-session" },
            { "include": "#statement-control-system" },
            { "include": "#statement-embedded" },
            { "include": "#statement-key-mgmt" }
          ],
          "end": "((?=(;|\\]\\]>))|((?=^\\s*+/$))|(?=^(\\.)?\\s*+$))"
        },
        {
          "name": "meta.statement.oracle.sql",
          "begin": "(?=(?i)\\s*(select)\\b)",
          "patterns": [
            { "include": "#statement-dml-select" }
          ],
          "end": "(?=(\\]\\]>|;|\\)))"
        },
        {
          "begin": "(?=(?i)^\\s*(with)\\b)",
          "patterns": [
            { "include": "#statement-dml-select" }
          ],
          "end": "(?=(?i)^\\s*(select)\\b)"
        }
      ]
    },
    "storage": {
      "patterns": [
        {  "name": "storage.type.characer",
           "match": "(?i)\\b(byte|char|n(char|varchar2)|varchar2)\\b"
        },
        {  "name": "storage.type.number",
           "match": "(?i)\\b(binary_(double|float)|float|number)\\b"
        },
        {  "name": "invalid.deprecated",
           "match": "(?i)\\b(long(\\s++raw)|raw)\\b"
        },
        {  "name": "storage.type.datetime",
           "match": "(?i)\\b(date|interval\\s++(day|year)|t(o(\\s++(month|second))|imestamp)|with(\\s++local)?\\s++time\\s++zone)\\b"
        },
        {  "name": "storage.type.large-object",
           "match": "(?i)\\b(b(file|lob)|clob|nclob)\\b"
        },
        {  "name": "storage.type.rowid",
           "match": "(?i)\\b(rowid|urowid)\\b"
        },
        {  "name": "storage.type.ansi",
           "match": "(?i)\\b(char((\\s++varying)?|acter(\\s++varying)?)|d(ouble(\\s++precision)?|ec(imal)?)|int(eger)?|n(ational|char(\\s++varying)?|umeric)|real|smaillint|varchar)\\b"
        },
        {  "name": "storage.type.oracle-provided",
           "match": "(?i)\\b(ord(audio|d(icom|oc)|image|video)|s(do_(geo(metry|raster)|topo_geometry)|i_(averagecolor|color(histogram)?|featurelist|positionalcolor|stillimage|texture)|ys\\.(any(data(set)?|type|)))|uritype|xmltype)\\b"
        },
        {  "name": "storage.modifier",
           "match": "(?i)\\b(constant|default|i(n(dex\\s++by)?|s(?=\\s++table))|no(copy|t\\s++null)|o(ut|f)|r(ange|ef)|subtype)\\b"
        }
      ]
    },
    "variable-other-bind-oracle-sqlplus": {
      "name": "variable.other.bind.oracle.sqlplus",
      "match": "(:)([[:alnum:]_])([[:alnum:]_])*+",
      "captures": {
          "1": { "name": "keyword.operator.oracle.sqlplus" }
      }
    },    
    "substitution-variable": {
      "patterns": [
        {  "name": "variable.other",
           "match": "((&){1,2})(\\s*+)(\\w++)",
           "captures": {
               "1": { "name": "keyword.other" }
           }
        }
      ]
    },
    "literal": {
      "patterns": [
        {  "name": "constant.character",
           "begin": "(n|N)?'",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "('')+"
            },
            { "include": "#substitution-variable" }
           ],
           "end": "'(?!')",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'(\\[)",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#substitution-variable" }
           ],
           "end": "(])'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'({)",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#substitution-variable" }
           ],
           "end": "(})'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'(<)",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#substitution-variable" }
           ],
           "end": "(>)'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'(\\()",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#substitution-variable" }
           ],
           "end": "(\\))'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character.oracle.sql",
           "begin": "(n|N)?(q|Q)'([^\\s\\[|{|<|\\(])",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#substitution-variable" }
           ],
           "end": "(\\3)'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.numeric",
           "match": "\\b(\\+|-)?\\d++((\\.)\\d++|\\d++((\\.)\\d++)?)?((e|E)?(\\+|-)?(\\d++)?)?(f|F|d|D)?\\b",
           "captures": {
               "1": { "name": "keyword.delimiter" },
               "3": { "name": "keyword.delimiter" },
               "5": { "name": "keyword.delimiter" },
               "7": { "name": "constant.character" },
               "8": { "name": "keyword.delimiter" },
               "10": { "name": "constant.character" }
           }
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(date(?=\\s++\\())\\b",
           "comment": "date"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b((at\\s++time\\s++zone|date)(?=\\s++\\())\\b",
           "comment": "timestamp"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(day|hour|interval|m(inute|onth)|second|to|year((?=\\s*+\\()|(?=\\s++to)))\\b",
           "comment": "interval"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(binary_((float|double)_(m(in_(subnormal|normal)|ax_(subnormal|normal))|infinity|nan))|false|null|true)\\b"
        }
      ]
    },
    "string": {
      "name": "string.quoted.double",
      "begin": "(\")",
      "captures": {
          "1": { "name": "keyword.other.delimiter" }
      },
      "end": "(\")"
    },
    "identifier": {
      "patterns": [
        {
          "begin": "(\")(?=([^\"]){0,30}\")",
          "captures": {
              "1": { "name": "keyword.other.delimiter" }
          },
          "patterns": [
            { "include": "#variable-other-substitution-oracle-sqlplus" },
            { "include": "#variable-other-bind-oracle-sqlplus" },
            {  "name": "variable.other",
               "match": "."
            }
          ],
          "end": "(\")"
        }
      ]
    },    
    "identifier-xxx": {
      "patterns": [
        {
          "begin": "(\")(?=([^\"]){0,30}\")",
          "captures": {
              "1": { "name": "keyword.other.delimiter" }
          },
          "patterns": [
            { "include": "#variable-other-substitution-oracle-sqlplus" },
            {  "name": "variable.other",
               "match": "."
            }
          ],
          "end": "(\")"
        },
        { "name": "invalid.illegal",
          "begin": "(\")(?=([^\"]){31,}\")",
          "end": "(\")"
        },
        {  "name": "variable.language",
           "match": "(?i)(?<!\\$)(\\$\\$)([[:alpha:]])(([\\w$#]){0,29})(?!([\\w$#]))",
           "captures": {
               "1": { "name": "keyword.other.delimiter" }
           }
        },
        {  "name": "variable.other",
           "match": "(?i)\\b([[:alpha:]])(([\\w$#]){0,29})(?!([\\w$#]))"
        },
        {  "name": "invalid.illegal",
           "match": "(?i)\\b([[:alpha:]])(([\\w$#]){30,})"
        }
      ]
    },
    "operator": {
      "patterns": [
        {  "name": "keyword.operator.arithmetic",
           "match": "\\+|-|\\*|/"
        },
        {  "name": "keyword.operator.concatenation",
           "match": "\\|\\|"
        },
        {  "name": "keyword.operator",
           "match": "(=>|(?<!\\.)(\\.)(?!\\.))"
        },
        {  "name": "keyword.other.separator",
           "match": "(,)"
        },
        {  "name": "keyword.other.indicator",
           "match": "(@)"
        },
        { "include": "#substitution-variable" }
      ]
    },
    "operator-conditional": {
      "patterns": [
        {  "name": "keyword.operator.conditional",
           "match": "(=|!=|<>|\\^=|<(=)?|>(=)?)"
        },
        {  "name": "keyword.operator",
           "match": "(?i)\\b(a(ll|n(d|y))|between|e(quals_path|scape|xists)|i(n(finite)?|s)|like(c|2|4)?|n(an|ot)|o(f|n((\\s++error)?|ly)|r)|regexp_like|some|type|under_path)\\b"
        },
        {  "name": "keyword.operator.query.hierarchical",
           "match": "(?i)\\b(c(onnect(\\s++by|_by_root)|ycle)|nocycle|prior|start\\s++with)\\b"
        },
        {  "name": "keyword.operator.multiset",
           "match": "(?i)\\b(a\\s++set|empty|member(\\s++of)?|submultiset)\\b"
        },
        {  "name": "keyword.operator.json",
           "match": "(?i)\\b(format|keys|lax|json(_(exists|textcontains))?|strict|unique|with(out)?)\\b"
        },
        {  "name": "keyword.operator.text",
           "match": "(?i)\\b(score|contains|catsearch|matches)\\b"
        }
      ]
    },
    "comment": {
      "patterns": [
        { "name": "comment.line.double-dash",
          "begin": "(?<!-)(--)",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "end": "$"
        },
        { "name": "comment.block",
          "begin": "(/\\*)(?!\\+)",
          "patterns": [
            { "name": "invalid.illegal",
              "begin": "(/\\*)",
              "end": "(\\*/)"
            },
            {  "name": "invalid.illegal",
               "match": "&"
            }
          ],
          "end": "(\\*/)",
          "captures": {
              "1": { "name": "keyword.other" }
          }
        }
      ]
    },
    "hint-include": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(a(ll_rows|ppend(_values)?)|first_rows|c(ache|hange_dupkey_error_index|luster(ing)?|ursor_sharing_exact)|d(isable_parallel_dml|riving_site|ynamic_sampling)|enable_parallel_dml|f(act|ull)|gather_optimizer_statistics|hash|i(gnore_row_on_dupkey_index|n(dex(_(asc|combine|desc|ffs|join|ss(_(asc|desc))?))?|memory(_pruning)?))|leading|m(erge|o(del_min_analysis|nitor))|n(ative_full_outer_join|o(append|cache|_(clustering|expand|fact|gather_optimizer_statistics|in(dex(_(ffs|ss))?|memory(_pruning)?)|m(erge|onitor)|native_full_outer_join|p(arallel(_index)?|q_(concurrent_union|skew)|ush_(pred|subq)|x_join_filter)|query_transformation|re(sult_cache|write)|sta(r_transformation|tement_queuing)|u(nnest|se_(cube|hash|merge|nl))|xml(index_rewrite|_query_rewrite)|zonemap)))|o(pt_param|rdered)|p(arallel(_index)?|q_(concurrent_union|distribute|filter|skew)|ush_(pred|subq)|x_join_filter)|qb_name|re(sult_cache|try_on_row_change|write)|sta(r_transformation|tement_queuing)|u(nnest|se_(c(oncat|ube)|hash|merge|nl(_with_index)?)))\\b"
        },
         {
           "begin": "\\(",
           "captures": {
                "0": { "name": "keyword.other.delimiter" }
            },
            "patterns": [
              {  "name": "keyword.control",
                 "match": "(?i)\\b(auto|broadcast|default|hash|join|manual|none|partition|random(_local)?|s(can|erial))\\b"
              },
              { "include": "#expression" }
            ],
           "end": "\\)"
         },
         { "include": "#expression" }
      ]
    },
    "hint": {
      "patterns": [
        {  "name": "comment.line.double-dash",
           "begin": "(?<!-)(--\\+)(.*)$",
           "captures": {
               "1": { "name": "keyword.other" }
           },
           "patterns": [
             { "name": "invalid.illegal",
               "begin": "(/\\*)",
               "end": "(\\*/)"
             },
             { "include": "#hint-include" }
           ],
           "end": "$"
        },
        { "name": "comment.block",
          "begin": "(/\\*\\+)",
          "patterns": [
            { "name": "invalid.illegal",
              "begin": "(/\\*)",
              "end": "(\\*/)"
            },
            { "include": "#hint-include" }
          ],
          "end": "(\\*/)",
          "captures": {
              "1": { "name": "keyword.other" }
          }
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#comment" },
        {
          "begin": "\\(",
            "patterns": [
              { "include": "#statement-dml-select" },
              { "include": "#subquery-restriction-clause" },
              { "include": "#expression" }
            ],
          "end": "\\)",
          "captures": {
              "0": { "name": "keyword.other.delimiter" }
          }
        },
        { "name": "meta.block.case",
          "begin": "(?i)\\b(case)\\b",
          "captures": {
              "1": { "name": "keyword.control" }
          },
          "patterns": [
            {  "name": "keyword.control",
               "match": "(?i)\\b(else|then|when)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?i)\\b(end)\\b"
        },
        {  "name": "keyword.other.cursor",
           "match": "(?i)\\b(cursor)\\b"
        },
        {  "name": "keyword.other.indicator",
           "match": "(?i)\\b(indicator)\\b"
        },
        { "include": "#literal" },
        { "include": "#variable-other-bind-oracle-sqlplus" },
        { "include": "#operator" },
        { "include": "#operator-conditional" },
        {  "name": "support.variable",
           "match": "(?i)\\b(c(o(lumn_value|nnect_by_(is(cycle|leaf)|root))|urrval)|level|nextval|o(bject_(id|value)|ra_rowscn)|row(id|num)|versions_((end|start)(scn|time)|operation|xid))\\b",
           "comment": "Pseudocolumns"
        },
        {  "name": "keyword.other.datetime",
           "match": "(?i)\\b(at\\s++(local|time\\s++zone(\\s++(dbtimezone|sessiontimezone))?))\\b"
        },
        {  "name": "keyword.other.interval",
           "match": "(?i)\\b((day|year)(?=(\\s*+\\(|\\s++to))|to\\s++(month|second))\\b"
        },
        { "include": "#identifier" }
      ]
    },
    "condition": {
      "patterns": [
        { "include": "#expression" }
      ]
    },
    "variable-other-substitution-oracle-sqlplus": {
      "name": "variable.other.substitution.oracle.sqlplus",
      "match": "(?<!&)(&{1,2})\\s*+(?:[[:alnum:]_])++(\\.)?",
      "captures": {
          "1": { "name": "keyword.operator.oracle.sqlplus" },
          "2": { "name": "keyword.operator.oracle.sqlplus" }
      }
    },
    "string-quoted-oracle-sql": {
      "patterns": [
        { "name": "string.quoted.double.oracle.sql",
          "begin": "(\")",
          "patterns": [
            { "include": "#variable-other-substitution-oracle-sqlplus" }
          ],
          "end": "(\")",
          "captures": {
              "1": { "name": "keyword.other.oracle.sql" }
          }
        }
      ]
    },
    "block-oracle-plsql": {
      "begin": "(?=(?i)\\b(function|package|procedure|trigger|type)(\\s|$))",
      "patterns": [
        { "include": "source.oracle.plsql" }
      ],
      "end": "((?=^(\\s*+/\\s*+|\\.)$))"
    },
    "expression-oracle-sql": {
      "patterns": [
        { "name": "keyword.operator.other.oracle.sql",
          "begin": "\\(",
          "patterns": [
              { "include": "#statement-dml-select" },
              { "include": "#string-quoted-oracle-sql" },
              {  "name": "markup.changed",
                 "match": "."
              }
            ],
          "end": "\\)"
        }
      ]
    },
    "common-clause": {
      "patterns": [
        { "include": "#literal" },
        { "include": "#identifier" },
        { "include": "#operator" }
      ]
    },
    "allocate-extent-clause": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(allocate)\\b"
        },
        {
          "begin": "(?i)\\b(extent)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "\\(",
                "patterns": [
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(datafile|instance|size)\\b"
                  },
                  { "include": "#size-clause" },
                  { "include": "#literal" }
                ],
              "end": "\\)",
              "captures": {
                  "0": { "name": "keyword.other.delimiter" }
              }
            }
          ],
          "end": "(?<=\\))"
        }
      ]
    },
    "database-file-clauses": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(a(s|utoextend)|backup|create|d(atafile(s)?|rop)|end|f(ile|or)|including|keep|m(axsize|ove)|ne(w|xt)|o(ff(line)?|n(line)?)|re(name|size|use)|t(empfile|o)|unlimited)\\b"
        },
        { "include": "#size-clause" }
      ]
    },
    "deallocate-unused-clause": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(deallocate|keep|unused)\\b"
        },
        { "include": "#size-clause" }
      ]
    },
    "file-specification-clause": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(blocksize|reuse|size|unlimited)\\b"
        },
        { "include": "#size-clause" },
        { "include": "#autoextend-clause" }
      ]
    },
    "logging-clause": {
      "name": "keyword.other",
      "match": "(?i)\\b(filesystem_like_logging|logging|nologging)\\b"
    },
    "parallel-clause": {
      "name": "keyword.other",
      "match": "(?i)\\b(parallel|noparallel)\\b"
    },
    "physical-attributes-clause": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(initrans|pct(free|used))\\b"
        },
        { "include": "#storage-clause" }
      ]
    },
    "size-clause": {
      "match": "(?i)\\b(\\d++)\\s*+(E|G|K|M|P|T)\\b",
      "captures": {
        "1": { "name": "constant.numeric" },
        "2": { "name": "keyword.other" }
      }
    },
    "storage-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(storage)\\b",
           "comment": "storage-clause"
        }
      ]
    },
    "storage-clause-parens": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(buffer_pool|default|encrypt|f(lash_cache|reelist(s)?)|keep|groups|initial|m(axextents|inextents)|n(ext|one|ull)|optimal|pctincrease|recycle|unlimited)\\b",
           "comment": "storage-clause-parens"
        },
        { "include": "#size-clause" },
        { "include": "#maxsize-clause" }
      ]
    },
    "supplemental-id-key-clause": {
      "patterns": [
        {
          "begin": "(?i)\\b(data)\\b(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "\\(",
                "patterns": [
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(all|foreign|key|primary|unique)\\b"
                  }
                ],
              "end": "\\)",
              "captures": {
                  "0": { "name": "keyword.other.delimiter" }
              }
            }
          ],
          "end": "(?<=\\))"
        }
      ]
    },
    "supplemental-db-logging-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(add|columns|d(ata(?=\\s++(?!\\())|rop)|for|log|procedural|replication|supplemental)\\b"
        },
        { "include": "#supplemental-id-key-clause" }
      ]
    },
    "statement-include": {
      "patterns": [
        { "include": "#string-quoted-oracle-sql" },
        { "include": "#variable-other-substitution-oracle-sqlplus" },
        { "include": "#variable-other-bind-oracle-sqlplus" },            
        { "include": "#expression-oracle-sql" }
      ]
    },
    "index-org-table-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(compress|including|mapping|no(compress|mapping)|overflow|pctthreshold|table)\\b"
        }
      ]
    },
    "substitutable-column-clause": {
       "name": "keyword.other",
       "match": "(?i)\\b(a(ll|t)|element|is|levels|not|of|substitutable|type)\\b"
    },
    "LOB-storage-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(as|basicfile|lob|s(ecurefile|tore))\\b"
        }
      ]
    },
    "table-compression": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(archive|co(lumn|mpress)|for|l(evel|ocking)|no(compress)|query|row|store)\\b",
           "comment": "table_compression"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(advanced|basic|high|low)\\b",
           "comment": "table_compression"
        },
        { "include": "#inmemory-clause" },
        { "include": "#storage-clause" },
        { "include": "#size-clause" }
      ]
    },
    "inmemory-memcompress": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(capacity|dml|for|memcompress|no|query)\\b",
           "comment": "inmemory_memcompress"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(low|high)\\b",
           "comment": "inmemory_memcompress"
        }
      ]
    },
    "inmemory-parameters": {
      "patterns": [
        { "include": "#inmemory-memcompress" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(priority)\\b",
           "comment": "inmemory_priority"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(critital|high|low|medium|none)\\b",
           "comment": "inmemory_priority"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(auto|by|distribute|partition|r(ange|owid)|subpartition)\\b",
           "comment": "inmemory_distribute"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(all|duplicate|no)\\b",
           "comment": "inmemory_duplicate"
        }
      ]
    },
    "immemory-alter-table-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(inmemory|no)\\b",
           "comment": "immemory_alter_table_clause"
        },
        { "include": "#inmemory-parameters" }
      ]
    },
    "ilm-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(add|d(elete(_all)?|isable(_all)?)|enable(_all)?|ilm|policy)\\b",
           "comment": "ilm-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(a(ccess|fter)|creation|day(s)?|group|mo(dification|nth(s)?)|no|of|row|segment|row|year(s)?)\\b",
           "comment": "ilm-policy-clause"
        },
        { "include": "#table-compression" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(only|read|t(ier|o))\\b",
           "comment": "tiering-clause"
        }
      ]
    },
    "supplemental-log-grp-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(always|group)\\b",
           "comment": "supplemental-log-grp-clause"
        }
      ]
    },
    "supplemental-id-key-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(columns)\\b",
           "comment": "supplemental_id_key_clause"
        }
      ]
    },
    "supplemental-table-logging": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(add|drop|group|log|supplemental)\\b",
           "comment": "supplemental-table-logging"
        },
        { "include": "#supplemental-log-grp-clause" },
        { "include": "#supplemental-id-key-clause" }
      ]
    },
    "LOB-retention-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(retention|min)\\b",
           "comment": "LOB-retention-clause"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(auto|max|none)\\b",
           "comment": "LOB-retention-clause"
        }
      ]
    },
    "LOB-deduplicate-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(deduplicate|keep_deduplicates)\\b",
           "comment": "LOB-deduplicate-clause"
        }
      ]
    },
    "LOB-compression-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(compress|nocompress)\\b",
           "comment": "LOB-compression-clause"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(high|low|medium)\\b",
           "comment": "LOB-compression-clause"
        }
      ]
    },
    "encryption-spec": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(by|identified|no|using|salt)\\b",
           "comment": "encryption-spec"
        }
      ]
    },
    "LOB-parameters": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(c(ache|hunk)|d(ecrypt|isable)|en(able|crypt)|freepools|in|nocache|pctversion|r(eads|ow)|storage)\\b",
           "comment": "LOB-parameters"
        },
        { "include": "#LOB-retention-clause" },
        { "include": "#LOB-deduplicate-clause" },
        { "include": "#LOB-compression-clause" },
        { "include": "#encryption-spec" },
        { "include": "#logging-clause" }
      ]
    },
    "LOB-storage-parameters": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(tablespace)\\b",
           "comment": "LOB-storage-parameters"
        },
        { "include": "#storage-clause" },
        { "include": "#LOB-parameters" }
      ]
    },
    "varray-col-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(varray)\\b",
           "comment": "varray-col-properties"
        },
        { "include": "#substitutable-column-clause" },
        {  "name": "keyword.control.untitled",
           "match": "(?i)\\b(as|basicfile|lob|s(ecurefile|torage))\\b",
           "comment": "varray-storage-clause"
        },
        { "include": "#LOB-storage-parameters" }
      ]
    },
    "LOB-partitioning-storage": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(as|basicfile|lob|s(ecurefile|tore))\\b",
           "comment": "LOB-partitioning-storage"
        }
      ]
    },
    "LOB-partition-storage": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(partition|subpartition)\\b",
           "comment": "LOB-partition-storage"
        },
        { "include": "#LOB-partitioning-storage" },
        { "include": "#varray-col-properties" },
        { "include": "#LOB-storage-clause" }
      ]
    },
    "substitutable-column-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(all|at|element|levels||is|not|of|substitutable|type)\\b",
           "comment": "substitutable-column-clause"
        }
      ]
    },
    "object-type-col-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(column)\\b",
           "comment": "object-type-col-properties"
        },
        { "include": "#substitutable-column-clause" }
      ]
    },
    "nested-table-col-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(as|column_value|locator|nested|return|store|table|value)\\b",
           "comment": "nested-table-col-properties"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(global|local)\\b",
           "comment": "nested-table-col-properties"
        },
        { "include": "#substitutable-column-clause" }
      ]
    },
    "references-clause": {
      "name": "keyword.other",
      "match": "(?i)\\b(cascade|delete|null|on|references|set)\\b"
    },
    "segment-attributes-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(tablespace)\\b",
           "comment": "segment-attributes-clause"
        },
        { "include": "#physical-attribute-clause" },
        { "include": "#logging-clause" }
      ]
    },
    "index-partitioning-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(less|partition|values)\\b",
           "comment": "using-index-clause"
        },
        { "include": "#segment-attributes-clause" }
      ]
    },
    "prefix-compression": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(compress|nocompress)\\b",
           "comment": "prefix-compression"
        }
      ]
    },
    "index-compression": {
      "patterns": [
        { "include": "#prefix-compression" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(advanced|compress|low|nocompress)\\b",
           "comment": "advanced-index-compression"
        }
      ]
    },
    "inmemory-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(inmemory|no)\\b",
           "comment": "inmemory-clause"
        }
      ]
    },
    "partitioning-storage-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(as|basicfile|lob|overflow|s(ecurefile|tore)|tablespace|varray)\\b",
           "comment": "partitioning-storage-clause"
        },
        { "include": "#table-compression" },
        { "include": "#index-compression" },
        { "include": "#inmemory-clause" },
        { "include": "#LOB-partitioning-storage" }
      ]
    },
    "indexing-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(indexing|o(ff|n))\\b",
           "comment": "indexing-clause"
        }
      ]
    },
    "individual-hash-partitions": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(partition)\\b",
           "comment": "individual-hash-partitions"
        },
        { "include": "#indexing-clause" },
        { "include": "#partitioning-storage-clause" }
      ]
    },
    "hash-partitions-by-quantity": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(in|overflow|partitions|store)\\b",
           "comment": "hash-partitions-by-quantity"
        },
        { "include": "#table-compression" },
        { "include": "#index-compression" }
      ]
    },
    "on-range-partitioned-table": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(partition|u(nu)sable)\\b",
           "comment": "using-index-clause"
        },
        { "include": "#segment-attributes-clause" },
        { "include": "#index-compression" }
      ]
    },
    "on-list-partitioned-table-parens": {
      "patterns": [
        { "include": "#on-range-partitioned-table" }
      ]
    },
    "on-hash-partitioned-table-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(partition|tablespace|u(nu)sable)\\b",
           "comment": "on-hash-partitioned-table-parens"
        }
      ]
    },
    "on-hash-partitioned-table": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(store)\\b",
           "comment": "on-hash-partitioned-table"
        }
      ]
    },
    "index-subpartition-clause": {
      "patterns": [
        { "include": "#on-comp-partitioned-table" }
      ]
    },
    "index-subpartition-clause-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(subpartition|tablespace|u(nu)sable)\\b",
           "comment": "index-subpartition-clause-parens"
        },
        { "include": "#index-compression" }
      ]
    },
    "on-comp-partitioned-table-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(partition|u(nu)sable)\\b",
           "comment": "on-hash-partitioned-table-parens"
        },
        { "include": "#index-compression" },
        { "include": "#segment-attributes-clause" },
        { "include": "#index-subpartition-clause" }
      ]
    },
    "on-comp-partitioned-table": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(store)\\b",
           "comment": "on-comp-partitioned-table"
        }
      ]
    },
    "domain-index-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(parameters)\\b",
           "comment": "domain-index-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(local)\\b",
           "comment": "local-domain-index-clause"
        },
        { "include": "#parallel-clause" }
      ]
    },
    "XMLIndex-clause-parens-local": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(partition)\\b",
           "comment": "XMLIndex-clause"
        },
        { "include": "#XMLIndex_parameters-clause" }
      ]
    },
    "XMLIndex-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(X(db|mlindex))\\b",
           "comment": "XMLIndex-clause"
        },
        { "include": "#XMLIndex_parameters-clause" }
      ]
    },
    "index-attributes": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(default|invisible|nosort|online|reverse|sort|tablespace)\\b",
           "comment": "index-attributes"
        },
        { "include": "#physical-attributes-clause" },
        { "include": "#logging-clause" },
        { "include": "#index-compression" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(full|indexing|partial)\\b",
           "comment": "partial-index-clause"
        },
        { "include": "#parallel-clause" }
      ]
    },
    "index-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(i(ndextype|s))\\b",
           "comment": "index-properties"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(by|global|hash|partition|range)\\b",
           "comment": "global-partitioned-index"
        },
        { "include": "#hash-partitions-by-quantity" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(local)\\b",
           "comment": "local-partitioned-index"
        },
        { "include": "#on-hash-partitioned-table" },
        { "include": "#on-comp-partitioned-table" },
        { "include": "#index-attributes" },
        { "include": "#domain-index-clause" },
        { "include": "#XMLIndex-clause" }
      ]
    },
    "using-index-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(index|using)\\b",
           "comment": "using-index-clause"
        },
        { "include": "#index-properties" },
        { "include": "#hash-partitions-by-quantity" },
        { "include": "#index-attributes" }
      ]
    },
    "exceptions-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(exceptions|into)\\b",
           "comment": "exceptions-clause"
        }
      ]
    },
    "constraint-state": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(d(eferr(able|ed)|isable)|enable|i(mmediate|nitially)|no(rely|t|validate)|rely|validate)\\b",
           "comment": "constraint-state"
        },
        { "include": "#using-index-clause" },
        { "include": "#exceptions-clause" }
      ]
    },
    "inline-constraint": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(constraint|key|n(ot|ull)|primary|unique)\\b",
           "comment": "inline-constraint"
        },
        { "include": "#references-clause" },
        { "include": "#constraint-state" }

      ]
    },
    "inline-ref-constraint": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(constraint|is|rowid|scope|with)\\b",
           "comment": "inline-ref-constraint"
        },
        { "include": "#references-clause" },
        { "include": "#constraint-state" }
      ]
    },
    "out-of-line-constraint": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(constraint|foreign|primary)\\b",
           "comment": "out-of-line-constraint"
        },
        { "include": "#references-clause" },
        { "include": "#constraint-state" }
      ]
    },
    "out-of-line-ref-constraint": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(constraint|foreign|is|rowid|scope|with)\\b",
           "comment": "out-of-line-ref-constraint"
        },
        { "include": "#references-clause" },
        { "include": "#constraint-state" }
      ]
    },
    "object-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(default)\\b",
           "comment": "object-properties"
        },
        { "include": "#inline-constraint" },
        { "include": "#inline-ref-constraint" },
        { "include": "#out-of-line-constraint" },
        { "include": "#out-of-line-ref-constraint" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(log|supplemental)\\b",
           "comment": "supplemental-logging-props"
        },
        { "include": "#supplemental-log-grp-clause" },
        { "include": "#supplemental-id-key-clause" }
      ]
    },
    "deferred-segment-creation": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(creation|segment)\\b",
           "comment": "deferred-segment-creation"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(deferred|immediate)\\b",
           "comment": "deferred-segment-creation"
        }
      ]
    },
    "inmemory-column-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(inmemory|no)\\b",
           "comment": "inmemory-column-clause"
        },
        { "include": "#inmemory-memcompress" }
      ]
    },
    "inmemory-table-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(inmemory|no)\\b",
           "comment": "inmemory-table-clause"
        },
        { "include": "#inmemory-parameters" },
        { "include": "#inmemory-column-clause" }
      ]
    },
    "index-org-table-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(pctthreshold)\\b",
           "comment": "index-org-table-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(mapping|nomapping|table)\\b",
           "comment": "mapping-table-clauses"
        },
        { "include": "#prefix-compression" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(including|overflow)\\b",
           "comment": "index-org-overflow-clause"
        },
        { "include": "#segment-attributes-clause" }
      ]
    },
    "external-data-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(access|d(efault|irectory)|parameters|using|clob)\\b",
           "comment": "external-data-properties"
        }
      ]
    },
    "external-table-clause-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(type)\\b",
           "comment": "external-table-clause-parens"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(oracle_(datapump|loader))\\b",
           "comment": "access-driver-type"
        },
        { "include": "#external-data-properties" }
      ]
    },
    "physical-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(cluster|external|heap|index|organization)\\b",
           "comment": "object-properties"
        },
        { "include": "#deferred-segment-creation" },
        { "include": "#segment-attributes-clause" },
        { "include": "#table-compression" },
        { "include": "#inmemory-table-clause" },
        { "include": "#ilm-clause" },
        { "include": "#index-org-table-clause" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(limit|reject|unlimited)\\b",
           "comment": "external-table-clause"
        }
      ]
    },
    "XMLType-storage-parens": {
      "patterns": [
        { "include": "#LOB-parameters" }
      ]
    },
    "XMLType-column-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(column|xmltype)\\b",
           "comment": "XMLType-column-properties"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(as|b(asicfile|inary)|clob|object|relational|s(ecurefile|tore)|xml)\\b",
           "comment": "XMLType-storage"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(a(ll(ow)?|nyschema|s)|disallow|element|lobs|store|tables|varrays|xmlschema)\\b",
           "comment": "XMLType-spec"
        }

      ]
    },
    "column-properties": {
      "patterns": [
        { "include": "#object-type-col-properties" },
        { "include": "#nested-table-col-properties" },
        { "include": "#varray-col-properties" },
        { "include": "#LOB-storage-clause" },
        { "include": "#XMLType-column-properties" }
      ]
    },
    "upgrade-table-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(data|including|not|upgrade)\\b",
           "comment": "upgrade-table-clause"
        },
        { "include": "#column-properties" }
      ]
    },
    "add-overflow-clause-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(PARTITION)\\b",
           "comment": "add-overflow-clause-parens"
        },
        { "include": "#segment-attributes-clause" }
      ]
    },
    "shrink-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(c(ascade|ompact)|s(pace|rhink))\\b",
           "comment": "shrink-clause"
        }
      ]
    },
    "alter-overflow-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(overflow)\\b",
           "comment": "alter-overflow-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(add|overflow)\\b",
           "comment": "add-overflow-clause"
        },
        { "include": "#segment-attributes-clause" },
        { "include": "#allocate-extent-clause" },
        { "include": "#shrink-clause" },
        { "include": "#deallocate-unused-clause" }
      ]
    },
    "alter-mapping-table-clauses": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(mapping|table)\\b",
           "comment": "alter-table-properties"
        },
        { "include": "#allocate-extent-clause" },
        { "include": "#deallocate-unused-clause" }
      ]
    },
    "alter-XMLSchema-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(a(llow|nyschema)|disallow|noschema)\\b",
           "comment": "alter-XMLSchema-clause"
        }
      ]
    },
    "alter-table-properties": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(columns)\\b",
           "comment": "alter-table-properties"
        },
        { "include": "#physical-attributes-clause" },
        { "include": "#logging-clause" },
        { "include": "#table-compression" },
        { "include": "#immemory-alter-table-clause" },
        { "include": "#ilm-clause" },
        { "include": "#supplemental-table-logging" },
        { "include": "#allocate-extent-clause" },
        { "include": "#deallocate-unused-clause" },
        { "include": "#upgrade-table-clause" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(minimize|nominimize|records_per_block)\\b",
           "comment": "records-per-block-cause"
        },
        { "include": "#parallel-clause" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(disable|enable|movement|row)\\b",
           "comment": "row-movement-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(archive|flashback|no)\\b",
           "comment": "flashback-archive-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(coalesce)\\b",
           "comment": "alter-iot-clauses"
        },
        { "include": "#index-org-table-clause" },
        { "include": "#alter-overflow-clause" },
        { "include": "#alter-mapping-table-clauses" },
        { "include": "#alter-XMLSchema-clause" },
        { "include": "#shrink-clause" },
        { "include": "#encryption-spec" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(clustering)\\b",
           "comment": "attribute-clustering-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(join|on)\\b",
           "comment": "clustering-join"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(by|interleaved|linear|order)\\b",
           "comment": "cluster-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(data|load|movement|no|on|yes)\\b",
           "comment": "clustering-when"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(materialized|with(out)?|zonemap)\\b",
           "comment": "zonemap-clause"
        }
      ]
    },
    "identity-clause-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(by|c(ache|ycle)|increment|limit|m(axvalue|invalue)|no(c(ache|ycle)|m(axvalue|invalue)|order)|order|start|value|with)\\b",
           "comment": "identity-options"
        }
      ]
    },
    "identity-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(a(lways|s)|by|default|generated|identity|null|on)\\b",
           "comment": "identity-clause"
        }
      ]
    },
    "evaluation-edition-flag": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(current|e(dition|valuate)|null|using)\\b",
           "comment": "evaluation-edition-flag"
        }
      ]
    },
    "unusable-editions-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(before|current|edition|null|unusable|with)\\b",
           "comment": "unusable-editions-clause"
        }
      ]
    },
    "add-column-clause-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(default|encrypt|invisible|null|on|sort|visible)\\b",
           "comment": "column-definition"
        },
        { "include": "#storage" },
        { "include": "#identity-clause" },
        { "include": "#encryption-spec" },
        { "include": "#inline-constraint" },
        { "include": "#inline-ref-constraint" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(always|generated|invisible|vi(rtual|sible))\\b",
           "comment": "virtual-column-definition"
        },
        { "include": "#evaluation-edition-flag" },
        { "include": "#unusable-editions-clause" },
        { "include": "#expression" }
      ]
    },
    "add-column-clause": {
      "patterns": [
        { "include": "#column-properties" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(add|partition)\\b",
           "comment": "out-of-line-part-storage"
        },
        { "include": "#nested-table-col-properties" },
        { "include": "#LOB-storage-clause" },
        { "include": "#varray-col-properties" }
      ]
    },
    "evaluation-edition-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(current|e(dition|valuate)|null|using)\\b",
           "comment": "evaluation-edition-clause"
        }
      ]
    },
    "modify-column-clauses-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(d(e(crypt|fault)|rop)|encrypt|identity|null|on)\\b",
           "comment": "modify-col-properties"
        },
        { "include": "#storage" },
        { "include": "#identity-clause" },
        { "include": "#encryption-spec" },
        { "include": "#inline-constraint" },
        { "include": "#LOB-storage-clause" },
        { "include": "#alter-XMLSchema-clause" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(always|generated|virtual)\\b",
           "comment": "modify-virtcol-properties"
        },
        { "include": "#evaluation-edition-clause" },
        { "include": "#unusable-editions-clause" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(invisible|visible)\\b",
           "comment": "modify-col-visibility"
        }
      ]
    },
    "modify-column-clauses": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(modify)\\b",
           "comment": "modify-column-clauses"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(a(ll|t)|column|force|levels|not|substitutable)\\b",
           "comment": "modify-col-substitutable"
        }
      ]
    },
    "period-clause-parens": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(for|period)\\b",
           "comment": "period-clause-parens"
        }
      ]
    },
    "drop-column-clause": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(c(ascade|heckpoint|o(lumn|n(straints|tinue)))|drop|invalidate|online|unused|set|unused)\\b",
           "comment": "drop-column-clause"
        }
      ]
    },
    "modify-LOB-parameters": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(freepools|pctversion|rebuild)\\b",
           "comment": "modify-LOB-parameters"
        },
        { "include": "#storage-clause" },
        { "include": "#LOB-retention-clause" },
        { "include": "#LOB-deduplicate-clause" },
        { "include": "#LOB-compression-clause" },
        { "include": "#encryption-spec" },
        { "include": "#logging-clause" },
        { "include": "#allocate-extent-clause" },
        { "include": "#shrink-clause" },
        { "include": "#deallocate-unused-clause" }
      ]
    },
    "column-clauses": {
      "patterns": [
        { "include": "#add-column-clause" },
        { "include": "#modify-column-clauses" },
        { "include": "#drop-column-clause" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(column|rename|to)\\b",
           "comment": "rename-column-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(as|locator|modify|nested|table|return|value)\\b",
           "comment": "modify-collection-retrieval"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(modify)\\b",
           "comment": "modify-lob-storage-clause"
        },
        {  "name": "keyword.control",
           "match": "(?i)\\b(modify|varrays)\\b",
           "comment": "alter-varray-col-properties"
        }
      ]
    },
    "constraint-clauses": {
      "patterns": [
        {  "name": "keyword.control",
           "match": "(?i)\\b(add|c(ascade|onstraint)|key|modify|primary|rename|to|unique)\\b",
           "comment": "constraint-clauses"
        },
        { "include": "#out-of-line-constraint" },
        { "include": "#out-of-line-ref-constraint" },
        { "include": "#constraint-state" },
        {  "name": "keyword.control",
           "match": "(?i)\\b(c(ascade|onstraint)|drop|index|ke(ep|y)|online|primary|unique)\\b",
           "comment": "drop-constraint-clause"
        }
      ]
    },
    "split-nested-table-part-into": {
      "begin": "(?i)\\b(into)(?=(\\s|\\n)*+\\()",
      "beginCaptures": {
          "1": { "name": "keyword.other" }
      },
      "patterns": [
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "keyword.other.delimiter" }
          },
          "patterns": [
            {
              "name": "keyword.other",
              "match": "(?i)\\b(partition)\\b"
            },
            { "include": "#segment-attributes-clause" },
            { "include": "#split-nested-table-part" },
            { "include": "#split-nested-table-part-into" },
            { "include": "#common-clause" }
          ],
          "end": "(\\))"
        }
      ],
      "end": "(?<=\\))"
    },
    "split-nested-table-part": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(nested|table)\\b"
        }
      ]
    },
    "partition-extended-name": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(for|partition)\\b",
           "comment": "partition-extended-name"
        }
      ]
    },
    "range-values-clause-parens": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(maxvalue)\\b",
           "comment": "range-values-clause-parens"
        }
      ]
    },
    "range-values-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(less|than|values)\\b",
           "comment": "range-values-clause"
        }
      ]
    },
    "range-subpartition-desc": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(subpartition)\\b",
           "comment": "range-subpartition-desc"
        },
        { "include": "#range-values-clause" },
        { "include": "#indexing-clause" },
        { "include": "#partitioning-storage-clause" }
      ]
    },
    "list-values-clause-parens": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(default)\\b",
           "comment": "list-values-clause"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(null)\\b",
           "comment": "list-values-clause"
        }
      ]
    },
    "list-values-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(values)\\b",
           "comment": "list-values-clause"
        }
      ]
    },
    "list-subpartition-desc": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(subpartition)\\b",
           "comment": "range-subpartition-desc"
        },
        { "include": "#list-values-clause" },
        { "include": "#indexing-clause" },
        { "include": "#partitioning-storage-clause" }
      ]
    },
    "set-subpartition-template-parens": {
      "patterns": [
        { "include": "#range-subpartition-desc" },
        { "include": "#list-subpartition-desc" },
        { "include": "#individual-hash-subparts" }
      ]
    },
    "partition-attributes": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(lob|overflow|varray)\\b",
           "comment": "partition-attributes"
        },
        { "include": "#physical-attributes-clause" },
        { "include": "#logging-clause" },
        { "include": "#allocate-extent-clause" },
        { "include": "#deallocate-unused-clause" },
        { "include": "#shrink-clause" },
        { "include": "#table-compression" },
        { "include": "#inmemory-clause" }
      ]
    },
    "table-partition-description": {
      "patterns": [
        { "include": "#deferred-segment-creation" },
        { "include": "#indexing-clause" },
        { "include": "#segment-attributes-clause" },
        { "include": "#table-compression" },
        { "include": "#prefix-compression" },
        { "include": "#inmemory-clause" },
        { "include": "#LOB-storage-clause" },
        { "include": "#varray-col-properties" },
        { "include": "#nested-table-col-properties" }
      ]
    },
    "partition-spec": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(overflow|partition)\\b",
           "comment": "partition-spec"
        },
        { "include": "#table-partition-description" }
      ]
    },
    "update-all-indexes-clause-parens": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(par(ameters|tition)|u(nusable|sable))\\b",
           "comment": "index-partition-description"
        },
        { "include": "#segment-attributes-clause" },
        { "include": "#index-compression" },
        { "include": "#index-subpartition-clause" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(subpartition|tablespace)\\b",
           "comment": "updae-index-subpartition"
        }
      ]
    },
    "dependent-tables-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(dependent|tables)\\b",
           "comment": "dependent-tables-clause"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(update|indexes)\\b",
           "comment": "update-all-indexes-clause"
        }
      ]
    },
    "update-index-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(global|in(dexes|validate)|update)\\b",
           "comment": "update-global-index-clause"
        }
      ]
    },
    "add-range-subpartition": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(add)\\b",
           "comment": "add-range-subpartition"
        },
        { "include": "#range-subpartition-desc" },
        { "include": "#dependent-tables-clause" },
        { "include": "#update-index-clauses" }
      ]
    },
    "add-hash-subpartition": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(add)\\b",
           "comment": "add-hash-subpartition"
        },
        { "include": "#individual-hash-subparts" },
        { "include": "#dependent-tables-clause" },
        { "include": "#update-index-clauses" },
        { "include": "#parallel-clauses" }
      ]
    },
    "add-list-subpartition": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(add)\\b",
           "comment": "add-list-subpartition"
        },
        { "include": "#list-subpartition-desc" },
        { "include": "#dependent-tables-clause" },
        { "include": "#update-index-clauses" }
      ]
    },
    "allow-disallow-clustering": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(allow|clustering|disallow)\\b",
           "comment": "allow-disallow-clustering"
        }
      ]
    },
    "coalesce-table-subpartition": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(coalesce|subpartition)\\b",
           "comment": "coalesce-table-subpartition"
        },
        { "include": "#update-indexes-clause" },
        { "include": "#parallel-clause" },
        { "include": "#allow-disallow-clustering" }
      ]
    },
    "subpartition-extended-name": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(subpartition)\\b",
           "comment": "modify-table-default-attrs"
        }
      ]
    },
    "split-nested-table-part-parens": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(partition)\\b",
           "comment": "nested-table-partition-spec"
        },
        { "include": "#segment-attributes-clause" },
        { "include": "#split-nested-table-part" }
      ]
    },
    "split-nested-table-part": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(into|nested|table)\\b",
           "comment": "split-nested-table-part"
        }
      ]
    },
    "hash-subparts-by-quantity": {
      "patterns": [
        {  "name": "keyword.other",
             "match": "(?i)\\b(in|s(tore|ubpartitions))\\b",
             "comment": "hash-subparts-by-quantity"
        }
      ]
    },
    "split-table-partition-into-parens": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(partition|subpartition)\\b",
           "comment": "split-table-partition-into-parens"
        },
        { "include": "#range-values-clause" },
        { "include": "#table-partition-description" },
        { "include": "#hash-subparts-by-quantity" },
        { "include": "#partition-spec" },
        { "include": "#range-subpartition-desc" },
        { "include": "#list-subpartition-desc" }
      ]
    },
    "split-table-partition-parens": {
      "patterns": [
        { "include": "#range-subpartition-desc" },
        { "include": "#list-subpartition-desc" },
        { "include": "#individual-hash-subparts" }
      ]
    },
    "alter-table-partitioning": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(attributed|default|for|lob|modify|pctthreshold|varray)\\b",
           "comment": "modify-table-default-attrs"
        },
        { "include": "#partition-extended-name" },
        { "include": "#deferred-segment-creation" },
        { "include": "#indexing-clause" },
        { "include": "#segment-attributes-clause" },
        { "include": "#table-compression" },
        { "include": "#inmemory-clause" },
        { "include": "#prefix-compression" },
        { "include": "#alter-overflow-clause" },
        { "include": "#LOB-parameters" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(in(terval)?|s(et|tore))\\b",
           "comment": "alter-interval-partitioning"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(s(et|ubpartition)|template)\\b",
           "comment": "set-subpartition-template"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(indexes|local|modify|rebuild|unusable)\\b",
           "comment": "modify-range-partition"
        },
        { "include": "#partition-extended-name" },
        { "include": "#partition-attributes" },
        { "include": "#add-range-subpartition" },
        { "include": "#add-hash-subpartition" },
        { "include": "#add-list-subpartition" },
        { "include": "#coalesce-table-subpartition" },
        { "include": "#alter-mapping-table-clauses" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(indexes|local|modify|rebuild|unusable)\\b",
           "comment": "modify-hash-partition"
        },
        { "include": "#partition-attributes" },
        { "include": "#coalesce-table-subpartition" },
        { "include": "#alter-mapping-table-clause" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(add|drop|indexes|local|modify|rebuild|unusable)\\b",
           "comment": "modify-list-partition"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(add|build|drop|indexes|lo(b|cal)|modify|unusable|varray)\\b",
           "comment": "modify-table-subpartition"
        },
        { "include": "#allocate-extent-clause" },
        { "include": "#deallocate-unused-clause" },
        { "include": "#shrink-clause" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(m(apping|ove)|online|table)\\b",
           "comment": "move-table-partition"
        },
        { "include": "#table-partition-description" },
        { "include": "#update-index-clauses" },
        { "include": "#parallel-clause" },
        { "include": "#allow-disallow-clustering" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(move|online)\\b",
           "comment": "move-table-subpartition"
        },
        { "include": "#subpartition-extended-name" },
        { "include": "#partitioning-storage-clause" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(add|before|partition)\\b",
           "comment": "add-table-partition"
        },
        { "include": "#dependent-tables-clause" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(coalesce|partition)\\b",
           "comment": "coalesce-table-partition"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(drop)\\b",
           "comment": "drop-table-(sub)partition"
        },
          { "name": "keyword.other",
            "match": "(?i)\\b(partitions)\\b",
            "comment": "partition-Extended-names"
          },
          { "name": "keyword.other",
            "match": "(?i)\\b(subpartitions)\\b",
            "comment": "subpartition-Extended-names"
          },
        {  "name": "keyword.other",
           "match": "(?i)\\b(rename|to)\\b",
           "comment": "rename-partition-subpart"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(all|cascade|drop|reuse|storage|truncate)\\b",
           "comment": "truncate-partition-subpart"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(at|into|split|values)\\b",
           "comment": "split-table-(sub)partition"
        },
        { "include": "#split-nested-table-part" },

        {  "name": "keyword.other",
           "match": "(?i)\\b(into|merge|partitions|to)\\b",
           "comment": "merge-table-partitions"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(into|merge|subpartitions|to)\\b",
           "comment": "merge-table-subpartitions"
        },
        { "include": "#range-subpartition-desc" },
        { "include": "#list-subpartition-desc" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(cascade|exc(hange|luding)|in(cluding|dexes)|table|validation|with(out))\\b",
           "comment": "exchange-partition-subpart"
        }
      ]
    },
    "alter-external-table": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(all|column|limit|project|re(ferenced|ject)|unlimited)\\b"
        },
        { "include": "#add-column-clause" },
        { "include": "#modify-column-clause" },
        { "include": "#drop-column-clause" },
        { "include": "#parallel-clause" },
        { "include": "#external-data-properties" }
      ]
    },
    "move-table-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(move|online)\\b"
        },
        { "include": "#segment-attributes-clause" },
        { "include": "#table-compression" },
        { "include": "#index-org-table-clause" },
        { "include": "#LOB-storage-clause" },
        { "include": "#varray-col-properties" },
        { "include": "#parallel-clause" },
        { "include": "#allow-disallow-clustering" }
      ]
    },
    "modify-opaque-type": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(modify|opaque|store|type|unpacked)\\b"
        }
      ]
    },
    "enable-disable-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(c(ascade|onstraint)|d(isable|rop)|enable|index|ke(ep|y)|novalidate|primary|validate)\\b"
        },
        { "include": "#using-index-clause" },
        { "include": "#exceptions-clause" }
      ]
    },
    "alter-table-parens-as": {
      "patterns": [
       { "include": "#LOB-storage-parameters" },
       { "include": "#alter-table-parens" }
      ]
    },
    "alter-table-parens-basicfile": {
      "patterns": [
        {
           "match": "(?i)\\b(tablespace)\\b",
           "name": "keyword.other",
           "comment": "supplemental-id-key-clause"

        }
      ]
    },
    "alter-table-parens-data": {
      "patterns": [
        {
           "match": "(?i)\\b(all|foreign|key|primary|unique)\\b",
           "name": "keyword.other",
           "comment": "supplemental-id-key-clause"

        }
      ]
    },
    "alter-table-parens-into": {
      "patterns": [
        { "include": "#alter-table-parens" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(partition)\\b",
           "comment": "partition_spec"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(subpartition)\\b",
           "comment": "subpartition-spec"
        },
        { "include": "#range-subpartition-desc" },
        { "include": "#list-subpartition-desc" },
        { "include": "#partitioning-storage-clause" },
        { "include": "#split-nested-table-part-parens" },
        { "include": "#split-table-partition-into-parens" }
      ]
    },
    "alter-table-parens-type": {
      "patterns": [
        {
           "match": "(?i)\\b(only)\\b",
           "name": "keyword.other",
           "comment": "substitutable-column-clause"

        }
      ]
    },
    "alter-table-parens": {
      "patterns": [
        {
          "begin": "(?i)\\b(add)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#add-column-clause-parens" },
                { "include": "#period-clause-parens" },
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(as)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens-as" },
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))",
          "comment": "split_table_(sub)partition"
        },
        {
          "begin": "(?i)\\b(at)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))",
          "comment": "split_table_(sub)partition"
        },
        {
          "begin": "(?i)\\b(basicfile|securefile)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens-basicfile" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))",
          "comment": "merge_table_subpartitions"
        },
        {
          "begin": "(?i)\\b(check)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))",
          "comment": "split_table_(sub)partition"
        },
        {
          "begin": "(?i)\\b(clob)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#XMLType-storage-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(data)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens-data" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(drop)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#period-clause-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(for)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(hash|range)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(identity)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#identity-clause-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(in(terval)?)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(indexes)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(into)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens-into" },
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))",
          "comment": "split_table_(sub)partition"
        },
        {
          "begin": "(?i)\\b(key)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(lob)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(local)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#XMLIndex-clause-parens-local" },
                { "include": "#on-range-partitioned-table" },
                { "include": "#on-list-partitioned-table" },
                { "include": "#on-hash-partitioned-table-parens" },
                { "include": "#on-comp-partitioned-table-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(location)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(modify)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#modify-column-clauses-parens" },
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(on)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(parameters)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(ref)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(store)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(storage)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#storage-clause-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(tables)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(template)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#set-subpartition-template-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(than)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#range-values-clause-parens" },
                { "include": "#expression" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(type)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#alter-table-parens-type" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(unique)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(unused)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(values)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#list-values-clause-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(?i)\\b(xml)(?=\\s*+\\()",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {
              "begin": "(\\()",
              "captures": {
                  "1": { "name": "keyword.other.delimiter" }
              },
              "patterns": [
                { "include": "#XMLType-storage-parens" },
                { "include": "#common-clause" }
              ],
              "end": "(\\))"
            }
          ],
          "end": "(?<=\\))"
        },
        {
          "begin": "(\\()",
          "captures": {
              "1": { "name": "keyword.other.delimiter" }
          },
          "patterns": [
            { "include": "#alter-table-parens" },
            { "include": "#alter-table-parens-as" },
            { "include": "#alter-table-parens-basicfile" },
            { "include": "#alter-table-parens-data" },
            { "include": "#alter-table-parens-into" },
            { "include": "#alter-table-parens-type" },
            { "include": "#LOB-partition-storage" },
            { "include": "#object-properties" },
            { "include": "#physical-properties" },
            { "include": "#column-properties" },
            { "include": "#index-partitioning-clause" },
            { "include": "#individual-hash-partitions" },
            { "include": "#on-range-partitioned-table" },
            { "include": "#on-list-partitioned-table" },
            { "include": "#on-hash-partitioned-table-parens" },
            { "include": "#on-comp-partitioned-table-parens" },
            { "include": "#index-subpartition-clause-parens" },
            { "include": "#external-table-clause-parens" },
            { "include": "#XMLType-storage-parens" },
            { "include": "#add-overflow-clause-parens" },
            { "include": "#modify-LOB-parameters" },
            { "include": "#LOB-parameters" },
            { "include": "#partition-spec" },
            { "include": "#update-all-indexes-clause-parens" },
            { "include": "#split-table-partition-parens" },
            { "include": "#storage-clause-parens" },
            { "include": "#identity-clause-parens" },
            { "include": "#identity-clause" },
            { "include": "#storage" },
            { "include": "#expression" }
          ],
          "end": "(\\))"
        }
      ]
    },
    "alter-table": {
      "patterns": [
        {
          "begin": "(?i)^\\s*+(alter\\s++table)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(all|disable|enable|lock|t(able|riggers))\\b"
            },
            { "include": "#alter-table-parens" },
            { "include": "#alter-table-properties" },
            { "include": "#column-clauses" },
            { "include": "#constraint-clauses" },
            { "include": "#alter-table-partitioning" },
            { "include": "#alter-external-table" },
            { "include": "#move_table_clause" },
            { "include": "#modify-opaque-type" },
            { "include": "#enable-disable-clause" },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$))|(?=^(\\.)?\\s*+$))"
        }
      ]
    },
    "parameter-definition": {
      "patterns": [
          { "name": "meta.block.parameters.define",
            "begin": "(\\()",
            "captures": {
                "0": { "name": "keyword.other.delimiter" }
            },
            "patterns": [
              {  "name": "storage.type",
                 "match": "(?i)\\b(int|long|string|ocidate)\\b"
              },
              {  "name": "storage.modifier",
                 "match": "(?i)\\b(by|charset(form|id)|duration|indicator|length|maxlen|re(ference|turn)|struct|tdo)\\b"
              },
              {  "name": "support.variable",
                 "match": "(?i)\\b(context|self)\\b"
              },
              { "include": "#keyword-delimiter" },
              { "include": "#storage" },
              { "include": "#common-clause" }
            ],
            "end": "(\\))"
          }
        ]
    },
    "system-privileges": {
      "patterns": [
        {  "name": "constant.language",
           "match": "(?i)\\b(a(ccess|d(minister|visor)|lter|n(alize|y)|rchive|udit)|b(ackup|ecome|uid)|c(hange|l(ass|uster)|o(mm(ent|it)|n(nect|t(ainer|ext(?!\\s++namespace)))|st)|reate|ube)|d(at(abase|e)|e(bug|lete)|i(ctionary|mension|rectory)|rop)|e(dition|x(e(cute|mpt)|ternal))|f(lashback|o(lder|rce))|g(lobal|rant)|in(dex(type)?|herit|sert)|job|ke(ep|y)|l(i(brary|nk)|o(ck|gmining))|m(a(nage(ment)?|terialized)|e(asure|rge)|ining|odel)|notification|o(bject|n(?=\\s++commit)|perator|utline)|p(lugabble|olicy|r(ivilege|o(ce(dure|ss)|file|gram))|u(blic|rge_dba_recyclebin))|query|r(e(ad|daction|fresh|s(ource|tricted|umable)|write)|ol(lback|e))|s(cheduler|e(gment|lect|quence|ssion|t)|ql|y(nonym|s(backup|d(ba|g)|guid|km|oper|tem)))|t(able(space)?|ime|uning|r(ans(action|lat(e|ion))|igger)|ype)|u(n(der|limited)|pdate|ser)|view)\\b",
           "comment": "system-privileges"
        }
      ]
    },
    "object-privileges": {
      "patterns": [
        {  "name": "constant.language",
           "match": "(?i)\\b(a(lter|rchive)|commit|de(bug|lete)|execute|flashback|in(dex|herit|sert)|keep|merge|on(?=\\s++commit)|privileges|query|re(ad|f(erences|resh)|write)|s(e(lect|quence)|ql)|translate|u(nder|pdate|se)|view|write)\\b",
           "comment": "object-privileges"
        }
      ]
    },
    "table-partitioning-clauses": {
      "patterns": [
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|in(terval)?|partition|range|store)\\b",
               "comment": "range-partitions"
        },
        { "include": "#range-values-clause" },
        { "include": "#table-partition-description" },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|list|partition)\\b",
               "comment": "list-partitions"
        },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|hash|partition)\\b",
               "comment": "hash-partitions"
        },
        { "include": "#hash-partitions-by-quantity" },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|range|subpartition)\\b",
               "comment": "subpartition-by-range"
        },
        {  "name": "keyword.other",
               "match": "(?i)\\b(subpartition|template)\\b",
               "comment": "subpartition-template"
        },
        { "include": "#hash-subparts-by-quantity" },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|list|subpartition)\\b",
               "comment": "subpartition-by-list"
        },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|hash|in|s(tore|ubpartition(s)?))\\b",
               "comment": "subpartition-by-hash"
        },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|partition|reference)\\b",
               "comment": "reference-partitioning"
        },
        {  "name": "keyword.other",
               "match": "(?i)\\b(by|partition(s)?|system)\\b",
               "comment": "system-partitioning"
        }
      ]
    },
    "file-name-convert": {
      "patterns": [
        {
          "name": "keyword.other",
          "match": "(?i)\\b(file_name_convert|none)\\b",
          "comment": "file-name-convert"
        }
      ]
    },
    "default-tablespace": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(d(atafile|efault)|tablespace)\\b",
           "comment": "default-tablespace"
        },
        {  "name": "keyword.other",
           "match": "(?i)\\b(reuse|size)\\b",
           "comment": "datafile-tempfile-spec"
        },
        { "include": "#size-clause" },
        { "include": "#autoextend-clause" }
      ]
    },
    "maxsize-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(maxsize)\\b",
           "comment": "maxsize-clause"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(unlimited)\\b",
           "comment": "maxsize-clause"
        },
        { "include": "#size-clause" }
      ]
    },
    "autoextend-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(autoextend|next)\\b",
           "comment": "autoextend-clause"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(o(ff|n))\\b",
           "comment": "autoextend-clause"
        },
        { "include": "#size-clause" },
        { "include": "#maxsize-clause" }
      ]
    },
    "extent-management-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(autoallocate|extent|local|management|size|uniform)\\b",
           "comment": "extent-management-clause"
        }
      ]
    },
    "program-unit": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(function|p(ackage|rocedure))\\b",
           "comment": "program-unit"
        }
      ]
    },
    "on-object-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(directory|edition|java|m(ining|odel)|on|profile|resource|s(ource|ql)|traslation|user)\\b",
           "comment": "on-object-clause"
        }
      ]
    },
    "grant-statement": {
      "patterns": [
        {
          "name": "meta.statement.ddl.grant",
          "begin": "(?i)\\s*(grant)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(container)\\b",
               "comment": "grant"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(all(\\s++privileges)?|current)\\b",
               "comment": "grant"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(option|to|with)\\b",
               "comment": "grant-system-privileges"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(a(dmin|ll(\\s++privileges)?)|delegate)\\b",
               "comment": "grant-system-privileges"
            },
            { "include": "#system-privileges" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(public)\\b",
               "comment": "grantee-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(by|identified)\\b",
               "comment": "grantee-identified-by"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(option|to|with)\\b",
               "comment": "grant-object-privileges"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(all(\\s++privileges)?|grant|hierarchy)\\b",
               "comment": "grant-object-privileges"
            },
            { "include": "#object-privileges" },
            { "include": "#on-object-clause" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(to)\\b",
               "comment": "grant-roles-to-programs"
            },
            { "include": "#program-unit" },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))|(?i)(?<!grant)\\s++(?=(create\\s++(table|view)))"
        }
      ]
    },
    "subquery-restriction-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(c(heck|onstraint)|o(nly|ption)|read|with)\\b",
           "comment": "subquery-restriction-clause"
        }
      ]
    },
    "create-view": {
      "patterns": [
        {
          "begin": "(?i)\\s*+(create(\\s++or\\s++replace)?((\\s++no)?\\s++force)?(\\s++(edition(able|ing)|noneditionable){1,2})?\\s++view)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(as|bequeath|current_user|definer)\\b",
               "comment": "create-view"
            },
            { "include": "#statement-dml-select" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(default|id(entifier)?|o(bject|f)|under|with)\\b",
               "comment": "object-view-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(default|id(entifier)?|o(bject|f)|with|xmltype)\\b",
               "comment": "XMLType-view-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(a(ll(ow)?|nyschema|s)|disallow|element|lobs|store|tables|varrays|xmlschema)\\b",
               "comment": "XMLSchema-spec"
            },
            { "include": "#subquery-restriction-clause" },
            {
              "begin": "\\(",
                "patterns": [
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(invisible|visible)\\b",
                     "comment": "create-view"
                  },
                  { "include": "#inline-constraint" },
                  { "include": "#out-of-line-constraint" },
                  { "include": "#expression" }
                ],
              "end": "\\)",
              "captures": {
                  "0": { "name": "keyword.other.delimiter" }
              }
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/\\s*+))|(?=^\\s*+$))|(?i)(?=(create\\s++(table)|grant))"
        }
      ]
    },
    "create-table": {
      "patterns": [
        {
          "begin": "(?i)\\b(create(\\s++global\\s++temporary)?(\\s++/\\*\\+.+?\\*/)?\\s++table)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(for)\\b",
               "comment": "create-table"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(commit|delete|on|preserve|rows)\\b",
               "comment": "relational-table"
            },
            { "include": "#physical-properties" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(archival|cache|no(cache|rowdependencies)|r(esult_cach|ow(dependencies)?)e)\\b",
               "comment": "table-properties"
            },
            { "include": "#column-properties" },
            { "include": "#indexing-clause" },
            { "include": "#table-partitioning-clauses" },
            { "include": "#attribute-clustering-clause" },
            { "include": "#parallel-clause" },
            { "include": "#enable-disable-clause" },
            { "include": "#row-movement-clause" },
            { "include": "#flashback-archive-clause" },
            { "include": "#statement-dml-select" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(commit|delete|o(f|n)|preserve|rows)\\b",
               "comment": "object-table"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(a(ll|t)|levels|not|substitutable)\\b",
               "comment": "object-table-substitution"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(i(dentifier|s)|generated|key|object|primary|system)\\b",
               "comment": "oid-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(oidindex)\\b",
               "comment": "oid-index-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(commit|delete|o(f|n)|preserve|xmltype)\\b",
               "comment": "XMLType-table"
            },
            { "include": "#XMLType-storage" },
            { "include": "#XMLType-spec" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(columns|virtual)\\b",
               "comment": "XMLType-virtual-columns"
            },
            { "include": "#alter-table-parens" },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))|(?i)(?=(create\\s++(table|view)|grant))"
        }
      ]
    },
    "flashback-mode-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(flashback)(?=\\s++(on|off))\\b",
           "comment": "flashback-mode-clause",
           "captures": {
               "2": { "name": "constant.language" }
           }
        }
      ]
    },
    "tablespace-group-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(group|tablespace)\\b",
           "comment": "tablespace-group-clause"
        }
      ]
    },
    "tablespace-retention-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(guarantee|noguarantee|retention)\\b",
           "comment": "tablespace-retention-clause"
        }
      ]
    },
    "partition-extension-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(for|partition|subpartition)\\b",
           "comment": "partition-extension-clause"
        }
      ]
    },
    "sql-statement-shortcut": {
      "patterns": [
        {  "name": "constant.language",
           "match": "(?i)\\b(a(lter|udit)|c(luster|o(mment|ntext(?!\\s++namespace)))|d(atabase|elete|i(mension|rectory))|ex(ecute|ists)|grant|in(dex|sert)|l(ink|ock)|materialized|not|outline|p(luggable|ro(cedure|file)|ublic)|rol(e|lback)|s(e(gment|lect|quence|ssion)|y(nonym|stem))|t(able(space)?|rigger|ype)|u(pdate|ser)|view)\\b",
           "comment": "sql-statement-shortcut"
        }
      ]
    },
    "audit-operation-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(all|privileges|statements)\\b",
           "comment": "audit-operation-clause"
        },
        { "include": "#sql-statement-shortcut" },
        { "include": "#system-privileges" }
      ]
    },
    "auditing-by-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(by)\\b",
           "comment": "auditing-by-clause"
        }
      ]
    },
    "sql-operation": {
      "patterns": [
        {  "name": "constant.language",
           "match": "(?i)\\b(a(lter|udit)|comment|delete|execute|flashback|grant|in(dex|sert)|lock|re(ad|name)|select|update)\\b",
           "comment": "sql-operation"
        }
      ]
    },
    "audit-schema-object-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(all)\\b",
           "comment": "audit-schema-object-clause"
        },
        { "include": "#sql-operation" }
      ]
    },
    "auditing-on-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(d(efault|irectory)|m(ining|odel)|on|profile|sql|translation)\\b",
           "comment": "auditing-on-clause"
        }
      ]
    },
    "statement-ddl": {
      "patterns": [
        {
          "name": "meta.statement.ddl.analyze",
          "begin": "(?i)^\\s*(analyze)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(c(hained|luster)|delete|index|list|rows|system|statistics|table)\\b",
               "comment": "analyze"
            },
            { "include": "#partition-extension-clause" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(c(ascade|complete)|dangling|fast|null|ref|s(et|tructure)|to|update|validate)\\b",
               "comment": "validation-clauses"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(o(ff|n)line)\\b",
               "comment": "validation-clauses"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(into)\\b",
               "comment": "into-clause"
            },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.associate-statistics",
          "begin": "(?i)^\\s*(associate)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(statistics|with)\\b",
               "comment": "associate-statistics"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(columns)\\b",
               "comment": "column-association"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(null|using)\\b",
               "comment": "using-statistics-type"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(functions|index(typ)?es|packages|types)\\b",
               "comment": "function-association"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(cost|default)\\b",
               "comment": "default-cost-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(default|selectivity)\\b",
               "comment": "default-selectivity-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(managed|s(torage|ytem)|tables|user|with)\\b",
               "comment": "storage-table-clause"
            },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.disassociate-statistics",
          "begin": "(?i)^\\s*(disassociate)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(columns|f(orce|rom|unctions)|index(es|types)|packages|statistics|types)\\b",
               "comment": "disassociate-statistics"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.associate-statistics",
          "begin": "(?i)^\\s*(audit)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(access|by|container|direct_path|in|load|n(etwork|ot)|s(ession|uccessful)|whenever)\\b",
               "comment": "audit"
            },
            {  "name": "constant.language",
               "match": "(?i)(?<==)\\s*+(all|current)\\b",
               "comment": "audit"
            },
            { "include": "#audit-operation-clause" },
            { "include": "#auditing-by-clause" },
            { "include": "#audit-schema-object-clause" },
            { "include": "#auditing-on-clause" },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.create",
          "begin": "(?i)(?=^\\s*(create)\\s)",
          "patterns": [
            { "include": "#block-oracle-plsql" },
            {
              "begin": "(?i)^\\s*(create\\s++audit)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(container|evaluate|p(er|olicy)|when)\\b",
                   "comment": "create-audit-policy"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(instance|s(ession|tatement))\\b",
                   "comment": "create-audit-policy"
                },
                {  "name": "constant.language",
                   "match": "(?i)(?<==)\\s*+(all|current)\\b",
                   "comment": "create-audit-policy"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(privileges)\\b",
                   "comment": "privilege-audit-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(ctions|ll)|directory|m(ining|odel)|on)\\b",
                   "comment": "standard-actions"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(actions|component|on)\\b",
                   "comment": "component-actions"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(d(atapump|irect_load|v)|ols|xs)\\b",
                   "comment": "component-actions"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(roles)\\b",
                   "comment": "roles-audit-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(a(lter|udit)|comment|delete|execute|flashback|grant|in(dex|sert)|lock|re(ad|name)|select|update)\\b",
                   "comment": "object-actions"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|export|import)\\b",
                   "comment": "component-actions-datapump"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|load)\\b",
                   "comment": "component-actions-direct-load"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(a(ction|ll|pply|uthorization)|c(omponents|reate)|d(ata|isable|rop)|enable|label|oid|p(olicy|rivileged)|remove|s(et|ubscribe)|unsubscribe)\\b",
                   "comment": "component-actions-ols"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(a(cl|dd|ll|ssign|ttribute)|c(allback|lass|ookie|reate)|d(ata|e(lete|stroy)|isable)|enable|g(et|lobal|rant)|inactive|namespace|p(assword|roxy)|r(e(move|voke)|ole(set)?)|s(e(curity|ssion|t)|witch)|t(emplate|imeout)|u(pdate|ser)|verifier)\\b",
                   "comment": "component-actions-xs"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(access|e(rror|val)|fa(ctor|ilure|lse)|level|n(eg|ull)|r(ealm|ule)|s(et|uccess)|trust|v(alidate|iolation))\\b",
                   "comment": "component-actions-dv"
                },
                { "include": "#system-privileges" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++cluster)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cache|hash(keys)?|i(ndex|s)|no(cache|rowdependencies)|rowdependencies|si(ngle|ze)|table(space)?)\\b",
                   "comment": "create-cluster"
                },
                { "include": "#physical-attributes-clause" },
                { "include": "#size-clause" },
                { "include": "#parallel-clause" } ,
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|partition|range)\\b",
                   "comment": "cluster-range-partitions"
                },
                { "include": "#alter-table-parens" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?\\s++context)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(accessed|initialized|using)\\b",
                   "comment": "create-context"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(externally|globally)\\b",
                   "comment": "create-context"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++controlfile)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(archivelog|data(base|file)|force|logging|max(datafiles|instances|log(files|history|members))|no(archivelog|resetlogs)|re(setlogs|use)|set)\\b",
                   "comment": "create-context"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(group|logfile)\\b",
                   "comment": "logfile-clause"
                },
                { "include": "#file-specification-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(character|set)\\b",
                   "comment": "character-set-clause"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++database)(?!\\s++link)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(b(igfile|y)|c(haracter|ontrolfile)|d(atafile|efault)|identified|max(datafiles|instances)|national|reuse|s(et|mallfile|ys(tem)?)|tablespace|user(_data)?)\\b",
                   "comment": "create-database"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(archivelog|force|group|log(file|ging)|max(log(files|history|members))|noarchivelog)\\b",
                   "comment": "database-logging-clauses"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(datafile|extent|local|management|sysaux)\\b",
                   "comment": "tablespace-clauses"
                },
                { "include": "#default-tablespace" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(bigfile|default|smallfile|t(ablespace|emp(file|orary)))\\b",
                   "comment": "default-temp-tablespace"
                },
                { "include": "#extent-management-clause" },
                { "include": "#size-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(bigfile|datafile|smallfile|tablespace|undo)\\b",
                   "comment": "undo-tablespace"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(set|time_zone)\\b",
                   "comment": "set-timezone"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(enable|database|pluggable|s(eed|ys(aux|tem)))\\b",
                   "comment": "enable-plugabble-database"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(datafiles|size)\\b",
                   "comment": "tablespace-datafile-clauses"
                },
                { "include": "#autoextend-clause" },
                { "include": "#file-specification-clause" },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++(public|shared)){0,2}\\s++database\\s++link)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|c(onnect|urrent_user)|identified|to|using)\\b",
                   "comment": "create-database-link"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(authenticated|identified|by)\\b",
                   "comment": "dblink-authentication"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++dimension)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(is|level|skip|when)\\b",
                   "comment": "level-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(null)\\b",
                   "comment": "level-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(hierarchy)\\b",
                   "comment": "hierarchy-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(attribute|determines)\\b",
                   "comment": "attribute-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(attribute|determines|level)\\b",
                   "comment": "extended-attribute-clause"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(child|of)\\b",
                         "comment": "hierarchy-clause"
                      },
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(join|key|References)\\b",
                         "comment": "dimension-join-clause"
                      },
                      { "include": "#expression" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?\\s++directory)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as)\\b",
                   "comment": "create-directory"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++diskgroup)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(attribute|disk|external|failgroup|high|normal|re(dundancy|gular)|quorum)\\b",
                   "comment": "create-diskgroup"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(force|n(ame|oforce)|size)\\b",
                   "comment": "qualified-disk-clause"
                },
                { "include": "#size-clause" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++edition)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as|child|of)\\b",
                   "comment": "create-edition"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++flashback)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(archive|d(ata|efault)|no|optimize|tablespace)\\b",
                   "comment": "create-flashback-archive"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(quota)\\b",
                   "comment": "flashback-archive-quota"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(day|month|retention|year)\\b",
                   "comment": "flashback-archive-retention"
                },
                { "include": "#size-clause" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++(bitmap|unique))?\\s++index)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#alter-table-parens" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(index|on|u(nusable|sable))\\b",
                   "comment": "create-index"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cluster)\\b",
                   "comment": "cluster-index-clause"
                },
                { "include": "#index-attributes" },
                { "include": "#index-properties" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(from|where)\\b",
                   "comment": "bitmap-join-index-clause"
                },

                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?\\s++indextype)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(for|local|partition|range|with)\\b",
                   "comment": "create-indextype"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(using)\\b",
                   "comment": "using-type-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(array|dml|with(out)?)\\b",
                   "comment": "array-dml-clause"
                },
                { "include": "#storage-table-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#storage" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?(\\s++and\\s++(compile|resolve))?(\\s++noforce)?\\s++java)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(b(file|lob)|cl(ass|ob)|named|reso(lver|urce)|s(chema|ource)|using)\\b",
                   "comment": "create-java"
                },
                { "include": "#invoker-rights-clause" },
                {
                  "begin": "(?i)\\b(as)\\b",
                  "beginCaptures": {
                      "1": { "name": "keyword.other" }
                  },
                  "patterns": [
                    { "include": "source.java" }
                  ],
                  "end": "(?<=\\})"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?(\\s++(editionable|noneditionable))?\\s++library)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(gent|s)|credential|i(n|s)|static|trusted)\\b",
                   "comment": "create-library"
                },
                {  "name": "keyword.delimiter",
                   "match": "(\\.)"
                },
                {  "name": "variable.other",
                   "match": "(\\w)++"
                },
                { "include": "#literal" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },            
            {
              "begin": "(?i)^\\s*+(create\\s++materialized\\s++view(?!\\s++log))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(for|index|no|o(f|n)|pre(built|cision)|reduced|table|u(pdate|sing)|with(out)?)\\b",
                   "comment": "create-materialized-view"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(for|is|scope)\\b",
                   "comment": "scoped-table-ref-constraint"
                },
                { "include": "#physical-properties" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cache|nocache)\\b",
                   "comment": "materialized-view-props"
                },
                { "include": "#column-properties" },
                { "include": "#table-partitioning-clauses" },
                { "include": "#parallel-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(build|deferred|immediate)\\b",
                   "comment": "build-clause"
                },
                { "include": "#physical-attributes-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(commit|de(fault|mand)|enforced|key|local|master|ne(ver|xt)|on|primary|r(efresh|ollback)|trusted|using|s(egment|tart)|with)\\b",
                   "comment": "create-mv-refresh"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(complete|f(ast|orce))\\b",
                   "comment": "create-mv-refresh"
                },
                { "include": "#evaluation-edition-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(disable|enable|query|rewrite)\\b",
                   "comment": "query-rewrite-clause"
                },
                { "include": "#statement-dml-select" },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(encrypt)\\b",
                         "comment": "create-materialized-view"
                      },
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(default|maxvalue|null|partition)\\b",
                         "comment": "create-materialized-view"
                      },
                      { "include": "#storage-clause-parens" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++materialized\\s++view\\s++log)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ache|ommit)|id|key|nocache|o(bject|n)|primary|rowid|s(cn|equence)|tablespace|with)\\b",
                   "comment": "create-materialized-view-log"
                },
                { "include": "#physical-attributes-clause" },
                { "include": "#logging-clause" },
                { "include": "#parallel-clause" },
                { "include": "#table-partitioning-clauses" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(excluding|including|new|values)\\b",
                   "comment": "new-values-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(asynchronous|i(mmediate|nterval)|next|purge|repeat|s(tart|ynchronous)|with)\\b",
                   "comment": "mv-log-purge-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(day|month|second|year)\\b",
                   "comment": "interval-expr"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(f(ast|or)|refresh|synchronous|using)\\b",
                   "comment": "for-refresh-clause"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#storage-clause-parens" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++materialized\\s++zonemap)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(disable|enable|on|pruning)\\b",
                   "comment": "create-zonemap-on-table"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as|disable|enable|pruning)\\b",
                   "comment": "create-zonemap-as-subquery"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cache|nocache|pct(free|used)|scale|tablespace)\\b",
                   "comment": "zonemap-attributes"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(on|refresh)\\b",
                   "comment": "zonemap-refresh-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(com(mit|plete)|d(ata|emand)|f(ast|orce)|load|movement)\\b",
                   "comment": "zonemap-refresh-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(day|month|second|year)\\b",
                   "comment": "interval-expr"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(f(ast|or)|refresh|synchronous|using)\\b",
                   "comment": "for-refresh-clause"
                },
                { "include": "#statement-dml-select" },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++(\\s++or\\s++replace)?operator)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(binding|return)\\b",
                   "comment": "binding-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(ancillary|to)\\b",
                   "comment": "implementation-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(using)\\b",
                   "comment": "using-function-clause"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#storage" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?(\\s++(p(rivate|ublic)))?\\s++outline)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(category|f(or|rom)|on|p(rivate|ublic))\\b",
                   "comment": "create-outline"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++pfile)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(from|memory|spfile)\\b",
                   "comment": "create-pfile"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++pluggable)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(database)\\b",
                   "comment": "create-pluggable-database"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(admin|by|identified|user)\\b",
                   "comment": "create-pdb-from-seed"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(roles)\\b",
                   "comment": "pdb-dba-roles"
                },
                { "include": "#default-tablespace" },
                { "include": "#file-name-convert" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(storage|unlimited)\\b",
                   "comment": "pdb-storage-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(none|path_prefix)\\b",
                   "comment": "path-prefix-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(reuse|tempfile)\\b",
                   "comment": "tempfile-reuse-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(all|except|none|user_tablespaces)\\b",
                   "comment": "user-tablespaces-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(all|none|standbys)\\b",
                   "comment": "standbys-clause"
                },
                { "include": "#logging-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(create_file_dest|none)\\b",
                   "comment": "create-file-dest-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(copy|data|from|no(n\\$cdb)|snapshot)\\b",
                   "comment": "create-pdb-clone"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as|c(lone|opy)|move|nocopy|using)\\b",
                   "comment": "create-pdb-from-xml"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(source_file_name_convert|none)\\b",
                   "comment": "source-file-name-convert"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(source_file_directory|none)\\b",
                   "comment": "source-file-directory"
                },
                { "include": "#datafile-tempfile-spec" },
                { "include": "#extent-management-clause" },
                { "include": "#storage-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(max(size|_shared_temp_size)|unlimited)\\b",
                         "comment": "pdb-storage-clause"
                      },
                      { "include": "#storage-clause-parens" },
                      { "include": "#size-clause" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++profile)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(container|limit)\\b",
                   "comment": "create-profile"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|current)\\b",
                   "comment": "create-profile"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(o(mposite_limit|nnect_time)|pu_per_(call|session))|idle_time|logical_reads_per_(call|session)|private_sga|sessions_per_user)\\b",
                   "comment": "resource-parameters"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(default|unlimited)\\b",
                   "comment": "resource-parameters"
                },
                { "include": "#size-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(failed_login_attempts|password_(grace_time|l(ife_time|ock_time)|reuse_(max|time)|verify_function))\\b",
                   "comment": "password-parameters"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(default|null|unlimited)\\b",
                   "comment": "resource-parameters"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++restore)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as|guarantee|of|p(oint|reserve)|scn|timestamp)\\b",
                   "comment": "create-restore-point"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(database|flashback)\\b",
                   "comment": "create-restore-point"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++role)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|container|identified|not|using)\\b",
                   "comment": "create-role"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|current|externally|globally)\\b",
                   "comment": "create-fole"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++public)?\\s++rollback)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(segment|tablespace)\\b",
                   "comment": "create-rollback-segment"
                },
                { "include": "#storage-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#storage-clause-parens" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++schema)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(authorization)\\b",
                   "comment": "create-schema"
                },
                { "include": "#grant-statement" },
                { "include": "#create-table" },
                { "include": "#create-view" },
                {
                  "begin": "(?i)(?=\\b(##create)\\b)",
                  "patterns": [
                    { "include": "#create-table" },
                    { "include": "#create-view" },
                    { "include": "#grant-statement" }
                  ],
                  "end": "(?i)(?=;|create)"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++sequence)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|c(ache|ycle)|global|increment|keep|m(axvalue|invalue)|no(c(ache|ycle)|keep|m(axvalue|invalue)|order)|order|s(ession|tart)|with)\\b",
                   "comment": "create-sequence"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++spfile)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(from|memory|pfile)\\b",
                   "comment": "create-spfile"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++or\\s++replace)?(\\s++(editionable|noneditionable))?(\\s++public)?\\s++synonym)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(for)\\b",
                   "comment": "create-synonym"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*(?=create(\\s++global\\s++temporary)?(\\s++/\\*\\+.+?\\*/)?\\s++table\\b)",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#create-table" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create(\\s++(bigfile|smallfile))?(\\s++(temporary|undo))?\\s++tablespace)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(blocksize|d(atafile|efault)|e(ncryption|xtent)|force|logging|minimum|o(ffline|nline))\\b",
                   "comment": "permanent-tablespace-clause"
                },
                { "include": "#file-specification-clause" },
                { "include": "#size-clause" },
                { "include": "#logging-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(using)\\b",
                   "comment": "tablespace-encryption-spec"
                },
                { "include": "#table-compression" },
                { "include": "#inmemory-clause" },
                { "include": "#storage-clause" },
                { "include": "#flashback-mode-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(tempfile)\\b",
                   "comment": "temporary-tablespace-clause"
                },
                { "include": "#tablespace-group-clause" },
                { "include": "#extent-management-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(segment|space|management(\\s++(auto|manual))?)\\b",
                   "comment": "segment-management-clause",
                   "captures": {
                       "2": { "name": "constant.language" }
                   }
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(auto|manual)\\b",
                   "comment": "segment-management-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(datafile)\\b",
                   "comment": "undo-tablespace-clause"
                },
                { "include": "#tablespace-retention-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#storage-clause-parens" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(create\\s++user)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(ccount|s)|by|container|default|e(ditions|nable|x(pire|ternally))|globally|identified|lock|on|p(assword|rofile)|quota|t(ablespace|emporary)|unl(imited|ock))\\b",
                   "comment": "create-user"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(all|current)\\b",
                   "comment": "constant-language"
                },
                { "include": "#size-clause" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^(?=\\s*+create(\\s++or\\s++replace)?((\\s++no)?\\s++force)?(\\s++(edition(able|ing)|noneditionable){1,2})?\\s++view\\b)",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#create-view" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(create|or|replace)\\b"
            },
            { "include": "#statement-include" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.analyze",
          "begin": "(?i)^\\s*(comment)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(audit|column|edition|i(ndextype|s)|m(aterialized|ining|odel)|o(n|perator)|policy|table|view)\\b",
               "comment": "comment"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.alter",
          "begin": "(?i)^\\s*(?=(alter)\\s++(?!s(ession|ystem)))",
          "patterns": [
            {
              "begin": "(?i)^\\s*+(alter\\s++audit)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(c(l|cess|tion(s)?)|d(d|minister|visor)|l(l|ter)|n(alize|y)|pply|rchive|ss(embly|ign|ociate)|ttribute|u(dit|thorization))|b(ackup|ecome|ody|uild)|c(all(back)?|hange|l(ass|uster)|o(m(m(ent|it)|ponent(s)?)|n(dition|nect|straints|text)|okie|st)|reate|ube)|d(ata((base)?|pump)|ba|e(bug|lete|queue|stroy)|i(ctionary|mension|rect(_load|ory)|s(a(ble|ssociate)|k))|rop|v)|e(dition|n(able|queue)|rror|val(uat(e|ion))?|x(e(cute|mpt)|p(lain|ort)|ternal))|f(a(ctor|ilure|lse)|ile|lashback|o(lder|rce)|u(ll|nction))|g(et|lobal|r(ant|roup))|i(dentity|mport|n(active|dex(es|type)?|s(ert|tance)))|j(ava|o(b|in))|key|l(abel|evel|i(brary|nk)|o(ad|ck|go(ff|n)))|m(a(nage(ment|r)|terialized)|e(asure|thod)|ining|odel)|n(amespace|eg|o(audit|tification)|ull)|o(bject|id|ls|n|perator|utline)|p(a(ckage|ssword)|er|file|luggagle|o(int|licy)|r(ivilege(d|s)?|o(ce(dure|ss)|file|gram|xy))|u(blic|rge))|que(ry|ue)|r(e(a(d|lm)|cyclebin|fresh|move|name|s(ource|t(ore|ricted)|umable)|voke|write)|ol(e(s(et)?)?|lback)|ule)|s(avepoint|che(duler|ma)|e(curity|g(ment)?|lect|quence|ssion|t)|pfile|ql|tat(ement|istics)|u(bscribe|ccess|mmary)|witch|y(nonym|s(dba|oper|tem)))|t(able(space)?|emplate|imeout|r(a(cing|nsaction)|igger|u(ncate|st))|uning|type)|u(n(d(er|rop)|limited|suscribe)|p(date|sert)|ser)|v(alidate|erifier|i(ew|olation))|xs|zonemap)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++cluster)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#physical-attributes-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cache|modify|nocache|partition|size)\\b"
                },
                { "include": "#size-clause" },
                { "include": "#allocate-extent-clause" },
                { "include": "#parallel-clause" },
                { "include": "#deallocate-unused-clause" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)\\b(alter\\s++database)(?!\\s++link)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(bort|ctivate|ll(ow)?|pply|rchive(d|log)|s|utomatic|vailability)|b(ackup|egin|igfile|lock(size)?)|c(a(ching|ncel)|hange|l(ear|one)|o(mmit|n(sistent|t(inue|rolfile)|vert)|rruption))|d(atabase|efault|is(able|connect)|owngrade)|e(dition|n(able|d))|f(a(il(ed|over)|r)|inish|lashback|or(ce|eign)|rom|ull)|g(lobal_name|roup|uard)|i(dentity|mmediate|n(itial|stance))|ke(ep|y)|log(file(s)?|ging|ical)|m(a(n(aged|ual)|ximize)|ember|ount)|n(o(archivelog|delay|ne|resetlogs|wait)?)|o(nly|pen|r)|p(erformance|hysical|r(epare|imary|otection))|re(ad|cover|gister|place|setlogs|use)|s(e(ssion|t)|hutdown|ize|kip|mallfile|napshot|t(a(ndby|rt)|op)|witch(over)?|ync)|t(ablespace|e(mporary|st)|hread|ime(_zone)?|o|ra(c(e|king)|nsaction))|u(n(archived|ique|recoverable|til)|pgrade|sing)|verify|w(ait|ith(out)?|rite))\\b"
                },
                { "include": "#parallel-clause" },
                { "include": "#size-clause" },
                { "include": "#file-specification-clause" },
                { "include": "#database-file-clauses" },
                { "include": "#supplemental-db-logging-clause" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter(\\s++(public|shared)){0,2}\\s++(database\\s++link))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(authenticated|by|connect|identified|to)\\b"
                },
                { "include": "#identifier" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++dimension)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|ttribute)|c(ascade|olumn)|d(etermines|rop)|hierarchy|is|level|null|restrict|skip|when)\\b"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(child|join|key|of|references)\\b"
                      },
                      { "include": "#expression" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#identifier" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++diskgroup)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|fter|l(ias|l)|ttribute(s)|uto)|c(ascade|heck)|d(i(rectory|s(able|k(s)?|mount))|rop)|enable|f(ailgroup|ile|or(ce)?)|group|in|low|m(ax|ember|o(dify|unt(path)?))|n(ame|o(force|r(epair|mal)|wait))|o((ff|n)line|ther|wner)|p(ermission|ower)|quorum|re(balance|gular|name|p(air|lace)|s(ize|tricted))|s(crub|ize|_tripe(columns|width))|t(emplate|o)|u(ndrop|s(age|er(group)?))|volume|w(ait|ith))\\b"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(co(arse|ld)|fine|h(igh|ot)|mirror(cold|hot)|unprotected)\\b"
                      },
                      { "include": "#expression" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#size-clause" },
                {
                  "match": "\\b(\\d++)\\s*+(H)\\b",
                  "captures": {
                    "1": { "name": "constant.numeric" },
                    "2": { "name": "keyword.other" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++flashback)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|ll|rchive)|before|d(a(ta|y)|efault)|mo(dify|nth)|no|optimize|purge|quota|re(move|tention)|s(cn|et)|t(ablespace|imestamp)|year)\\b"
                },
                { "include": "#size-clause" },
                { "include": "#literal" },
                { "include": "#identifier" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++(function|library|procedure))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(compile|debug|editionable|noneditionable|reuse|settings)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++index)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(d(d|vanced)|t(tributes)?)|block|c(ascade|leanup|o(alesce|mp(act|ile|ress)))|d(e(allocate|fault)|isable|rop)|enable|f(or|ull)|in(dexing|to|visible)|keep|low|mo(dify|nitoring)|no(compress|monitoring|reverse)|online|par(ameters|ti(al|tion))|re(build|name|ferences|verse)|s(hirnk|p(ace|lit)|ubpartition)|t(ablespace|o)|u(nus(able|ed)|pdate|sage)|visible)\\b"
                },
                { "include": "#allocate-extent-clause" },
                { "include": "#parallel-clause" },
                { "include": "#physical-attributes-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(advanced|compress|low|par(ameters|tition)|nocompress|tablespace|u(nu)?sable)\\b"
                      },
                      { "include": "#physical-attributes-clause" },
                      { "include": "#logging-clause" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++indextype)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|rray)|compile|d(ml|rop)|local|managed|partition|range|s(torage|ystem)|tables|us(er|ing)|with(out)?)\\b"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++java)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(authid|c(lass|ompile|urrent_user)|definer|resolve(r?)|source)\\b"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      {
                        "begin": "\\(",
                          "patterns": [
                            { "include": "#string" },
                            { "include": "#common-clause" }
                          ],
                        "end": "\\)",
                        "captures": {
                            "0": { "name": "keyword.other.delimiter" }
                        }
                      }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++materialized\\s++view)(?!\\s++log)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#physical-attributes-clause" },
                { "include": "#parallel-clause" },
                { "include": "#logging-clause" },
                { "include": "#allocate-extent-clause-clause" },
                { "include": "#deallocate-unused-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(d(d|vanced)|ll|rchive|s|uto)|b(asic(file)?|e(fore|ginning)|y)|c(apacity|o(alesce|lumn|m(mit|p(lete|ress))|nstraints)|ritical|urrent)|d(e(fault|mand)|is(able|tribute)|ml|uplicate)|e(dition|n(able|forced)|valuate)|f(ast|or(ce)?)|high|i(n(cluding|memory)|s)|key|l(evel|o(b|cking|w))|m(aster|e(dium|mcompress)|odify)|n(ext|o(ne)?|ull)|o(n|verflow)|p(artition|ctthreshold|ri(mary|ority))|query|r(ange|e(fresh|write)|o(llback|w(id)?))|s(coped|e(curefile|gment)|t(art|ore)|ubpartition)|trusted|u(nusable|sing)|with)\\b"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(c(ache|hunk)|d(ecrypt|isable)|en(able|crypt)|freepools|in|nocache|p(artition|ctversion)|re(ads|build)|storage|row|tablespace)\\b"
                      },
                      { "include": "#logging-clause" },
                      { "include": "#storage-clause" },
                      { "include": "#allocate-extent-clause-clause" },
                      { "include": "#deallocate-unused-clause" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++materialized\\s++view\\s++log)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|synchronous)|cache|excluding|f(ast|or(ce)?)|i(d|mmediate|n(cluding|terval))|key|move|n(e(w|xt)|ocache)|o(bject|n)|p(urge|rimary)|r(e(fresh|peat)|owid)|s(equence|tart|ynchronous)|using|values|with)\\b"
                },
                { "include": "#physical-attributes-clause" },
                { "include": "#parallel-clause" },
                { "include": "#logging-clause" },
                { "include": "#allocate-extent-clause-clause" },
                { "include": "#deallocate-unused-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++materialized\\s++zonemap)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ache|om(mit|p(ile|lete)))|d(ata|emand|isable)|enable|f(ast|orce)|load|movement|nocache|on|p(ct(free|used)|runing)|re(build|fresh)|unusable)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++operator)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|ncillary)|binding|co(ntext|mp(ile|ute))|d(ata|rop)|force|index|return|scan|to|using|with)\\b"
                },
                {
                  "begin": "\\(",
                    "patterns": [
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++outline)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ategory|hange)|enable|disable|p(rivate|ublic)|re(build|name)|to)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++(package))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(body|compile|debug|editionable|noneditionable|package|reuse|s(ettings|pecification))\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++pluggable)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(ll|utomatic)|b(ackup|egin|igfile)|c(lose|ontinue)|d(ata(base|file)|efault|is(able|card))|e(dition|n(able|d)|xcept)|f(orce|rom)|global_name|i(mmediate|n(stances|to))|logfile|norelocate|o(ffline|nl(ine|y)|pen)|re(ad|cover(y)?|locate|name|s(etlogs|tricted))|s(ave|et|mallfile|t(ate|orage))|t(ablespace|emporary|ime_zone|o)|u(n(limited|plug)|pgrade)|write)\\b"
                },
                { "include": "#logging-clause" },
                { "include": "#database-file-clauses" },
                { "include": "#supplemental-db-logging-clause" },
                {
                  "begin": "\\(",
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(max(size|_shared_temp_size)|unlimited)\\b"
                      },
                      { "include": "#size-clause" },
                      { "include": "#common-clause" }
                    ],
                  "end": "\\)",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  }
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++profile)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(o(mposite_limit|n(nect_time|tainer))|pu_per_(call|session))|failed_login_attempts|idle_time|l(imit|ogical_reads_per_(call|session))|p(assword_(grace_time|l(ife_time|ock_time)|reuse_(max|time)|verify_function)|rivate_sga)|sessions_per_user)\\b"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|current|default|unlimited)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++resource)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(o(nnect_time|st)|pu_per_session)|logical_reads_per_session|private_sga)\\b"
                },
                { "include": "#literal" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++role)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|container|externally|gobally|identified|not|using)\\b"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|current)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++rollback)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(s(egment|hrink)|to)\\b"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(o(ff|n)line)\\b"
                },
                { "include": "#storage-clause" },
                { "include": "#size-clause" },
                { "include": "#identifier" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++sequence)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ache|ycle)|global|increment\\s+by|keep|m(ax|in)value|no(c(ache|ycle)|keep|m((ax|in)value)|order)|order|session)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter(\\s+public)?\\s++synonym)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(compile)\\b"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(editionable|noneditionable)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            { "include": "#alter-table" },
            {
              "begin": "(?i)^\\s*+(alter\\s++tablespace)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {
                  "begin": "(?i)\\b(storage)(?=\\s*+\\()",
                  "beginCaptures": {
                      "1": { "name": "keyword.other" }
                  },
                  "patterns": [
                    {
                      "begin": "(\\()",
                      "captures": {
                          "1": { "name": "keyword.other.delimiter" }
                      },
                      "patterns": [
                        { "include": "#storage-clause-parens" },
                        { "include": "#common-clause" }
                      ],
                      "end": "(\\))"
                    }
                  ],
                  "end": "(?<=\\))"
                },
                {
                      "begin": "(\\()",
                      "captures": {
                          "1": { "name": "keyword.other.delimiter" }
                      },
                      "patterns": [
                        { "include": "#storage-clause-parens" },
                        { "include": "#common-clause" }
                      ],
                      "end": "(\\))"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(b(ackup|egin)|coalesce|default|e(nd|xtent)|keep|minimum|re(name|size)|s(pace|hrink)|to)\\b",
                   "comment": "alter-tablespace"
                },
                { "include": "#table-compression" },
                { "include": "#inmemory-clause"},
                { "include": "#storage-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(add|d(atafile|rop)|keep|o(ffline|nline)|rename|srhink|t(empfile|o))\\b",
                   "comment": "datafile-temp-clauses"
                },
                { "include": "#file-specification-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(force|logging|no)\\b",
                   "comment": "tablespace-logging-clauses"
                },
                { "include": "#logging-clause" },
                { "include": "#tablespace-group-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(immediate|normal|o(nl(ine|y)|ffline)|permanent|read|temporary|write)\\b",
                   "comment": "tablespace-state-clauses"
                },
                { "include": "#autoextend-clause" },
                { "include": "#maxsize-clause" },
                { "include": "#flashback-mode-clause" },
                { "include": "#tablespace-retention-clause" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++(trigger))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(compile|d(ebug|isable)|e(ditionable|nable)|noneditionable|re(name|use)|settings|to)\\b"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++type)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(editionable|noneditionable)\\b",
                   "comment": "alter-type"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(final|instatiable|not|reset)\\b",
                   "comment": "alter-type-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(body|debug|compile|reuse|s(ettings|pecification))\\b",
                   "comment": "type-compile-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as|object|replace)\\b",
                   "comment": "type-replace-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(authid|current_user|definer)\\b",
                   "comment": "invoker-rights-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(accessible|by)\\b",
                   "comment": "accesible-by-clause"
                },
                {
                  "begin": "(?i)\\b(constructor)\\b",
                  "beginCaptures": {
                      "1": { "name": "keyword.other" }
                  },
                  "patterns": [
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(function)\\b"
                    },
                    { "include": "#parameter-definition" }
                  ],
                  "end": "(?i)\\b(return\\s++self\\s++as\\s++result)\\b",
                  "endCaptures": {
                      "1": { "name": "keyword.other" }
                  }                
                },                
                {
                  "begin": "(?i)\\b(object)(?=\\s*+\\()",
                  "beginCaptures": {
                      "1": { "name": "keyword.other" }
                  },
                  "patterns": [
                    {
                      "begin": "(\\()",
                      "captures": {
                          "1": { "name": "keyword.other.delimiter" }
                      },
                      "patterns": [
                        {
                          "begin": "(?i)\\b(member|static)\\b",
                          "beginCaptures": {
                              "1": { "name": "keyword.other" }
                          },
                          "patterns": [
                            { "include": "#parameter-definition" },
                            {  "name": "keyword.other",
                               "match": "(?i)\\b(a(gent|s)|c(ontext)?|external|function|in|java|l(anguage|ibrary)|name|p(arameters|rocedure)|return|variable|with)\\b"
                            },
                            { "include": "#storage" },
                            { "include": "#expression" }
                          ],
                          "end": "(?=,|\\))"
                        },
                        {
                          "begin": "(?i)\\b(constructor)\\b",
                          "beginCaptures": {
                              "1": { "name": "keyword.other" }
                          },
                          "patterns": [
                            { "include": "#parameter-definition" },
                            {  "name": "keyword.other",
                               "match": "(?i)\\b(a(gent|s)|c(ontext)?|external|function|in|java|l(anguage|ibrary)|name|p(arameters|rocedure)|re(sult|turn)|self|variable|with)\\b"
                            },
                            { "include": "#storage" },
                            { "include": "#expression" }
                          ],
                          "end": "(?=,|\\))"
                        },
                        { "include": "#storage" },
                        {  "name": "keyword.other",
                           "match": "(?i)\\b(not|final|instatiable|overriding)\\b",
                           "comment": "inheritance-clauses"
                        },
                        {  "name": "keyword.other",
                           "match": "(?i)\\b(map|order)\\b",
                           "comment": "map-order-function-spec"
                        },
                        {  "name": "keyword.other",
                           "match": "(?i)\\b(pragma)\\b",
                           "comment": "pragma-clause"
                        },
                        {
                          "begin": "(?i)\\b(restric_references)(?=\\s*+\\()",
                          "beginCaptures": {
                              "1": { "name": "keyword.other" }
                          },
                          "patterns": [
                            {
                              "begin": "(\\()",
                              "captures": {
                                  "1": { "name": "keyword.other.delimiter" }
                              },
                              "patterns": [
                                {  "name": "keyword.other",
                                   "match": "(?i)\\b(default|rn(dp|)s|trust|wn(d|p)s)\\b",
                                   "comment": "pragma-clause"
                                },
                                { "include": "#common-expression" }
                              ],
                              "end": "(\\))"
                            }
                          ],
                          "end": "(?<=\\))"
                        },
                        { "include": "#common-clause" }
                      ],
                      "end": "(\\))"
                    }
                  ],
                  "end": "(?<=\\))"
                },
                {
                  "begin": "(?i)\\b(member|static)\\b",
                  "beginCaptures": {
                      "1": { "name": "keyword.other" }
                  },
                  "patterns": [
                    { "include": "#parameter-definition" },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(a(gent|s)|c(ontext)?|external|function|in|java|l(anguage|ibrary)|name|p(arameters|rocedure)|return|variable|with)\\b"
                    },
                    { "include": "#storage" },
                    { "include": "#expression" }
                  ],
                  "end": "(?i)(?=,|;|invalidate|cascade)"
                },
                {
                  "begin": "(\\()",
                  "captures": {
                      "1": { "name": "keyword.other.delimiter" }
                  },
                  "patterns": [
                    { "include": "#storage" },
                    { "include": "#expression" }
                  ],
                  "end": "(\\))"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(add|drop)\\b",
                   "comment": "alter-method-spec"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(attribute|add|drop|modify)\\b",
                   "comment": "alter-attribute-definition"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ascade|onvert)|data|force|in(cluding|validate)|not|substitutable|t(able|o))\\b",
                   "comment": "dependent-handling-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(element|limit|modify|type)\\b",
                   "comment": "alter-collections-clauses"
                },
                { "include": "#exceptions-clause" },
                { "include": "#storage" },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++user)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(ccount|ll|s)|by|c(ontainer|urrent)|default|e(ditions|nable|x(cept|pire|ternally))|for(ce)?|globally|identified|lock|none|on|p(assword|rofile)|quota|r(eplace|ole)|t(ablespace|emporary)|unl(imited|ock))\\b",
                   "comment": "alter-user"
                },
                { "include": "#size-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(connect|enterprise|grant|revoke|through|users)\\b",
                   "comment": "proxy-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(ll|uthentication)|except|no|r(equired|ole(s)?)|with)\\b",
                   "comment": "db-user-proxy-clauses"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(dd|ll)|container_data|default|for|remove|set)\\b",
                   "comment": "container-data-clause"
                },
                {  "name": "invalid.deprecated",
                   "match": "(?i)\\b(authenticated|using)\\b",
                   "comment": "authenticated-using-clause"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(alter\\s++view)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(add|co(mpile|nstraint)|editionable|key|drop|modify|no(neditionable|rely)|only|primary|re(ad|ly)|unique|write)\\b",
                   "comment": "alter-view"
                },
                { "include": "#out-of-line-constraint" },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.drop",
          "begin": "(?i)^\\s*(?=(drop)\\s)",
          "patterns": [
            {
              "begin": "(?i)(drop\\s++(audit|context|d(atabase|i(mension|rectory))|f(lashback|unction)|library|o(perator|utline)|p(ackage|ro(cedure|file)|ublic)|r(estore|ol(e|lback))|s(equence|synonym)|t(able(space)?|rigger|ype)|user|view))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(policy)\\b",
                   "comment": "drop-audit-policy"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(database|link)\\b",
                   "comment": "drop-database-link"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(archive)\\b",
                   "comment": "drop-flashback-archive"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(force)\\b",
                   "comment": "drop-operator"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(body)\\b",
                   "comment": "drop-package"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cascade)\\b",
                   "comment": "drop-profile"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(point)\\b",
                   "comment": "drop-restore-point"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(segment)\\b",
                   "comment": "drop-rollback-segment"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ascade|onstraints)|purge)\\b",
                   "comment": "drop-table"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(and|c(ascade|on(straints|tents))|datafiles|including|keep)\\b",
                   "comment": "drop-tablespace"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(body|force|validate)\\b",
                   "comment": "drop-type"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cascade)\\b",
                   "comment": "drop-user"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ascade|onstraints))\\b",
                   "comment": "drop-user"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++cluster)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(c(ascade|onstraints)|including|tables)\\b",
                   "comment": "drop-cluster"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++diskgroup)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(contents|excluding|force|including)\\b",
                   "comment": "drop-diskgroup"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++edition)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cascade)\\b",
                   "comment": "drop-edition"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++index)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(force|online)\\b",
                   "comment": "drop-index"
                },
                { "include": "#identifier" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++indextype)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(force)\\b",
                   "comment": "drop-indextype"
                },
                { "include": "#identifier" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++java)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(class|resource|source)\\b",
                   "comment": "drop-indextype"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++materialized)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(reserve|table|view)\\b",
                   "comment": "drop-materialized-view"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(log|on|view)\\b",
                   "comment": "drop-materialized-view-log"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(zonemap)\\b",
                   "comment": "drop-materialized-zonemap"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "begin": "(?i)^\\s*+(drop\\s++pluggable)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(data(base|files)|keep|including)\\b",
                   "comment": "drop-pluggable-database"
                },
                { "include": "#common-clause" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            { "include": "#expression" },
            {  "name": "markup.changed",
               "match": "."
            }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.flashback",
          "begin": "(?i)^\\s*(flashback)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(before|database|point|res(etlogs|tore)|s(cn|tandby)|t(imestamp|o))\\b",
               "comment": "flashback-database"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(before|d(isable|rop)|enable|point|re(name|store)|scn|t(able|imestamp|o|riggers))\\b",
               "comment": "flashback-table"
            },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.grant",
          "begin": "(?i)^(?=\\s*+grant\\b)",
          "patterns": [
            { "include": "#grant-statement" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.noaudit",
          "begin": "(?i)^\\s*(noaudit)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(container|direct_path|load|n(etwork|ot)|successful|whenever)\\b",
               "comment": "noaudit"
            },
            {  "name": "constant.language",
               "match": "(?i)(?<==)\\s*+(all|current)\\b",
               "comment": "noaudit"
            },
            { "include": "#audit-operation-clause" },
            { "include": "#auditing-by-clause" },
            { "include": "#audit-schema-object-clause" },
            { "include": "#auditing-on-clause" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(attributes|by|context|namespace|policy)\\b",
               "comment": "noaudit-unified"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.purge",
          "begin": "(?i)^\\s*(purge)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(dba_recyclebin|index|recyclebin|table(space)?|user)\\b",
               "comment": "purge"
            },
            { "include": "#identifier" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.rename",
          "begin": "(?i)^\\s*(rename)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(to)\\b",
               "comment": "rename"
            },
            { "include": "#identifier" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.revoke",
          "begin": "(?i)^\\s*(revoke)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(container)\\b",
               "comment": "revoke"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(all|current)\\b",
               "comment": "revoke"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(all|from|privileges)\\b",
               "comment": "revoke-system-privileges"
            },
            { "include": "#system-privileges" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(public)\\b",
               "comment": "revokee-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(all|c(ascade|onstraints)|from|privileges)\\b",
               "comment": "revoke-object-privileges"
            },
            { "include": "#on-object-clause" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(all|from)\\b",
               "comment": "revokee-roles-from-programs"
            },
            { "include": "#program-unit" },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.truncate",
          "begin": "(?i)^\\s*(truncate\\s++cluster)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(drop|reuse|storage)\\b",
               "comment": "truncate-cluster"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.ddl.truncate",
          "begin": "(?i)^\\s*(truncate\\s++table)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(all|cascade|drop|log|materialized|p(reserve|urge)|reuse|storage|view)\\b",
               "comment": "truncate-table"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        }
      ]
    },
    "table-collection-expression": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(table)\\b",
           "comment": "table-collection-expression"
        }
      ]
    },
    "returning-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(bulk|collect|into|return(ing)?)\\b",
           "comment": "returning-clause"
        }
      ]
    },
    "error-logging-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(errors|into|l(imit|og)|reject|unlimited)\\b",
           "comment": "error-logging-clause"
        }
      ]
    },
    "statement-dml": {
      "patterns": [
        {
          "name": "meta.statement.oracle.sql.dml",
          "begin": "(?=(?i)\\s*+(update|delete|insert)\\s)",
          "patterns": [
            {
              "name": "meta.statement.dml.delete",
              "begin": "(?i)\\s*(delete)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#hint" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(from|only)\\b",
                   "comment": "delete"
                },
                { "include": "#partition-extension-clause" },
                { "include": "#table-collection-expression" },
                { "include": "#returning-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(where)\\b",
                   "comment": "where-clause"
                },
                { "include": "#returning-clause" },
                { "include": "#error-logging-clause" },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "name": "meta.statement.dml.insert",
              "begin": "(?i)\\s*(insert)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#hint" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(from|only)\\b",
                   "comment": "insert"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(into)\\b",
                   "comment": "insert-into-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(values)\\b",
                   "comment": "values-clause"
                },
                { "include": "#partition-extension-clause" },
                { "include": "#table-collection-expression" },
                { "include": "#returning-clause" },
                { "include": "#error-logging-clause" },
                { "include": "#statement-dml-select" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(all)\\b",
                   "comment": "multitable-insert"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(all|else|first|then|when)\\b",
                   "comment": "conditional-insert-clause"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            },
            {
              "name": "meta.statement.dml.update",
              "begin": "(?i)\\s*(update)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                { "include": "#hint" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(only)\\b",
                   "comment": "update"
                },
                { "include": "#partition-extension-clause" },
                { "include": "#table-collection-expression" },
                { "include": "#returning-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(where)\\b",
                   "comment": "where-clause"
                },
                { "include": "#returning-clause" },
                { "include": "#error-logging-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(set|value)\\b",
                   "comment": "update-set-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)(\\b(current\\s++of\\b|row\\s*(?==)))",
                   "comment": "plsql-extension"
                },
                { "include": "#expression" }
              ],
              "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
            }
          ],
          "end": "((?=;)|((?=^\\s*+/\\s*+$))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.dml.call",
          "begin": "(?i)^\\s*(call)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(in(dicator|to))\\b",
               "comment": "call"
            },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.dml.merge",
          "begin": "(?i)^\\s*(merge)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(into|on|using)\\b",
               "comment": "merge"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(delete|matched|set|then|update|when)\\b",
               "comment": "merge-update-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(where)\\b",
               "comment": "where-clause"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(default)\\b",
               "comment": "merge-update-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(insert|matched|not|then|values|when)\\b",
               "comment": "merge-insert-clause"
            },
            { "include": "#logging-clause" },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.dml.explain",
          "begin": "(?i)^\\s*(explain)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(for|into|plan|s(et|tatement_id))\\b",
               "comment": "explain-plan"
            },
            { "include": "#statement-dml-select" },
            { "include": "#statement-dml" },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "name": "meta.statement.dml.lock-table",
          "begin": "(?i)^\\s*(lock)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(in|mode|nowait|table|wait)\\b",
               "comment": "lock-table"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(exclusive|row|share|update)\\b",
               "comment": "lock-mode"
            },
            { "include": "#partition-extension-clause" },
            { "include": "#expression" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        }
      ]
    },
    "select-include": {
      "patterns": [
        {  "name": "keyword.operator.multiset",
           "match": "(?i)\\b(a\\s++set|distinct|e(mpty|xcept)|intersect|m(ember(\\s++of)?|ultiset)|submultiset(\\s++of)?|union)\\b"
        },
        { "include": "#expression" },
        { "include": "#comment" }
      ]
    },
    "query-table-expression": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(lateral)\\b",
           "comment": "query-table-expression"
        },
        { "include": "#partition-extension-clause" },
        {  "name": "keyword.other",
           "match": "(?i)\\b(block|s(ample|eed))\\b",
           "comment": "sample-clause"
        },
        { "include": "#table-collection-expression" }

      ]
    },
    "rollup-cube-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(cube|rollup)\\b",
           "comment": "rollup-cube-clause"
        }
      ]
    },
    "statement-dml-select": {
      "patterns": [
        { "name": "meta.section.with",
          "begin": "(?i)(?<!timestamp )\\b(with)(?!\\s++(check|read|object))\\b",
          "beginCaptures": {
              "1": { "name": "keyword.operator" }
          },
          "patterns": [
            { "include": "#hint" },
            { "include": "source.oracle.plsql" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(as)\\b",
               "comment": "subquery-factoring-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(by|first|nulls|se(arch|t))\\b",
               "comment": "search-clause"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(asc|breadth|de(pth|sc)|first|last)\\b",
               "comment": "search-clause"
            },
            {  "name": "keyword.other",
               "match": "(?i)\\b(cycle|default|set|to)\\b",
               "comment": "cycle-clause"
            },
            { "include": "#expression" }
          ],
          "end": "(?=(?i)^\\s*(select)\\b)"
        },
        {
          "name": "meta.statement.dml.select",
          "begin": "(?i)(?=(select)\\s)",
          "patterns": [
            { "name": "meta.section.select",
              "begin": "(?i)\\b(select)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                { "include": "#hint" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(all|distinct|unique)\\b"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(as)\\b",
                   "comment": "select-list"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(bulk|collect|into)\\b",
                   "comment": "plsql-extension"
                },
                { "include": "#variable-other-bind-oracle-sqlplus" },
                { "include": "#expression" }
              ],
              "end": "(?=(;|\\)|\\]\\]>))|((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$)|(?i)\\b(?=(from)\\s)"
            },
            { "name": "meta.section.from",
              "begin": "(?i)\\b(from)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "constant.language",
                   "match": "(?i)\\b(dual)\\b"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(only)\\b",
                   "comment": "table-reference"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(nd|s)|between|for|of|period|scn|m(axvalue|invalue)|timestamp|versions)\\b",
                   "comment": "flashback-query-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(pivot|xml)\\b",
                   "comment": "pivot-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(for)\\b",
                   "comment": "pivot-for-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(in)\\b",
                   "comment": "pivot-in-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(exclude|include|nulls|unpivot)\\b",
                   "comment": "unpivot-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(match_recognize)\\b",
                   "comment": "row-pattern-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(containers)\\b",
                   "comment": "containers-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(cross|inner|join|natural|on|using)\\b",
                   "comment": "inner-cross-join-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(join|natural|on|using)\\b",
                   "comment": "outer-join-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(outer)\\b",
                   "comment": "outer-join-type"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(full|left|right)\\b",
                   "comment": "outer-join-type"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|partition)\\b",
                   "comment": "query-partition-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(join|outer|type)\\b",
                   "comment": "query-partition-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(apply|cross|outer)\\b",
                   "comment": "cross-outer-apply-clause"
                },
                { "include": "#query-table-expression" },
                {
                  "begin": "(\\()",
                  "captures": {
                      "1": { "name": "keyword.other.delimiter" }
                  },
                  "patterns": [
                    { "include": "#query-table-expression" },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(define|pattern)\\b",
                       "comment": "match-recognize"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(a(ny|s))\\b",
                       "comment": "pivot-in-clause"
                    },
                    { "include": "#statement-dml-select" },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(as)\\b",
                       "comment": "unpivot-in-clause"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(by|partition)\\b",
                       "comment": "row-pattern-partition-id"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(by|order)\\b",
                       "comment": "row-pattern-order-by"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(measures)\\b",
                       "comment": "row-pattern-measures"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(as)\\b",
                       "comment": "row-pattern-measure-column"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(all|match|one|per|row(s)?)\\b",
                       "comment": "row-pattern-rows-per-match"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(after|first|last|match|next|past|row|skip|to)\\b",
                       "comment": "row-pattern-skip-to"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(permute)\\b",
                       "comment": "row-pattern-permute"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(subset)\\b",
                       "comment": "row-pattern-subset-clauses"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(classifier)\\b",
                       "comment": "row-pattern-classifier-func"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(match|number)\\b",
                       "comment": "row-pattern-match-num-func"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(fi(nal|rst)|last|running)\\b",
                       "comment": "row-pattern-nav-logical"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(next|prev)\\b",
                       "comment": "row-pattern-nav-physical"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(next|prev)\\b",
                       "comment": "row-pattern-nav-compound"
                    },
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(final|running)\\b",
                       "comment": "row-pattern-aggregate-func"
                    },
                    { "include": "#expression" }
                  ],
                  "end": "(\\))"
                },
                { "include": "#condition" }
              ],
              "end": "(?=(;|\\)|\\]\\]>))|(?i)\\b(?=(for|where|gr(ant|oup)|log\\s++errors|order|model|with(\\s++(check|read)))\\s)|(((?=^\\s*+/\\s*+$))|(?=^\\s*+$))|(?i)(?<!multiset)(?=((^)?\\s*+)\\b(grant|intersect|log\\s++errors|minus|union|with(\\s++(check|read)))\\b)"
            },
            { "name": "meta.section.where",
              "begin": "(?i)\\b(where)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                { "include": "#condition" }
              ],
              "end": "(?=(\\]\\]>|;|\\)))|(?i)\\b(?=(for|gr(ant|oup)|log\\s++errors|model|order|with(\\s++(check|read)))\\s)|(((?=^\\s*+/\\s*+$))|(?=^\\s*+$))|(?i)(?<!multiset)(?=(\\s++|^\\s*+)(grant|intersect|log\\s++errors|minus|union)\\b)"
            },
            { "name": "meta.section.group_by",
              "begin": "(?i)\\b(group)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|having)\\b",
                   "comment": "group-by"
                },
                { "include": "#rollup-cube-clause" },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(grouping|sets)\\b",
                   "comment": "grouping-sets-clause"
                },
                {
                  "begin": "\\(",
                  "beginCaptures": {
                      "1": { "name": "keyword.other.delimiter" }
                  },
                  "patterns": [
                    { "include": "#rollup-cube-clause" },
                    { "include": "#statement-dml-select" },
                    { "include": "#subquery-restriction-clause" },
                    { "include": "#expression" }
                  ],
                  "end": "\\)"
                },
                { "include": "#expression" }
              ],
              "end": "(?=(;|\\)|\\]\\]>))|(?i)\\b(?=(order|model)\\s)|(((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))|(?i)(?<!multiset)(?=(\\s++|^\\s*+)(intersect|minus|union)\\b)"
            },
            { "name": "meta.section.group_by",
              "begin": "(?i)\\b(model)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(dimension|ignore|keep|nav|reference|single|unique)\\b",
                   "comment": "cell-reference-options"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(r(eturn|ows))\\b",
                   "comment": "return-rows-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(all|updated)\\b",
                   "comment": "return-rows-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(on|reference)\\b",
                   "comment": "reference-model"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by|dimension|measures|partition)\\b",
                   "comment": "model-column-clauses"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(main)\\b",
                   "comment": "main-model"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(a(ll|utomatic)|order|rules|sequential|up(date|sert))\\b",
                   "comment": "model-rules-clause"
                },
                {  "name": "keyword.other",
                   "match": "(?i)\\b(iterate|until)\\b",
                   "comment": "model-iterate-clause"
                },
                {
                  "begin": "\\(",
                  "beginCaptures": {
                      "1": { "name": "keyword.other.delimiter" }
                  },
                  "patterns": [
                    { "include": "#statement-dml-select" },
                    { "include": "#expression" }
                  ],
                  "end": "\\)"
                },
                {
                  "begin": "\\[",
                  "beginCaptures": {
                      "1": { "name": "keyword.other.delimiter" }
                  },
                  "patterns": [
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(decrement|f(or|rom)|in(crement)|like|to)\\b",
                       "comment": "single-column-for-loop"
                    },
                    { "include": "#expression" }
                  ],
                  "end": "\\]"
                },
                { "include": "#expression" }
              ],
              "end": "(?=(;|\\)|\\]\\]>))|(?i)\\b(?=(fetch|offset)\\s)|(((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))|(?i)(?<!multiset)(?=(\\s++|^\\s*+)(intersect|minus|union)\\b)"
            },
            { "name": "meta.section.order_by",
              "begin": "(?i)\\b(order)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(by)\\b",
                   "comment": "order-by-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(asc|desc|siblings)\\b",
                   "comment": "order-by-clause"
                },
                { "include": "#expression" }
              ],
              "end": "(?=(;|\\)|\\]\\]>))|(?i)\\b(?=(for|fetch|offset)\\s)|(((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))|(?i)(?<!multiset)(?=(\\s++|^\\s*+)(intersect|minus|union)\\b)"
            },
            { "name": "meta.section.for-update",
              "begin": "(?i)\\b(for)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(locked|nowait|of|skip|update|wait)\\b",
                   "comment": "for-update-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(asc|desc|siblings)\\b",
                   "comment": "order-by-clause"
                },
                { "include": "#expression" }
              ],
              "end": "(?i)((?=;|\\))|((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))"
            },
            { "name": "meta.section.subquery-restriction",
              "begin": "(?i)\\b(with\\s++(check|read))\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(constraint|o(nly|ption))\\b",
                   "comment": "subquery-restriction-clause"
                },
                { "include": "#dentifier" }
              ],
              "end": "(?i)((?=;|\\))|((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))"
            },
            { "name": "meta.section.row-limiting",
              "begin": "(?i)\\b(fetch|offset)\\b",
              "beginCaptures": {
                  "1": { "name": "keyword.operator" }
              },
              "patterns": [
                {  "name": "keyword.other",
                   "match": "(?i)\\b(f(etch|irst)|next|o(nly|ffset)|percent|row(s)?|ties|with)\\b",
                   "comment": "row-limiting-clause"
                },
                {  "name": "constant.language",
                   "match": "(?i)\\b(asc|desc|siblings)\\b",
                   "comment": "order-by-clause"
                },
                { "include": "#common-clause" }
              ],
              "end": "(?i)((?=;|\\))|((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))|(?i)(?<!multiset)(?=(\\s++|^\\s*+)(intersect|minus|union)\\b)"
            },
            { "include": "#select-include" }
          ],
          "end": "(?=(\\]\\]>|;|\\)))|(((?=^\\s*+/\\s*+$))|(?=^(\\.)?\\s*+$))|(?i)(?<!multiset)(?=(\\s++|^\\s*+)(grant|intersect|log\\s++errors|minus|union|with(\\s++(check|read)))\\b)"
        },
        {
          "name": "meta.statement.dml.select.set",
          "begin": "(?i)(?<!multiset)(?=(\\s++|^\\s*+)(intersect|minus|union)\\b)",
          "patterns": [
            {  "name": "keyword.operator.query.set",
               "match": "(?i)\\b(all|intersect|minus|union)\\b"
            },
            { "include": "#comment" }
          ],
          "end": "(?i)(?=(\\(|select\\b))"
        },
        { "include": "#comment" }
      ]
    },
    "statement-control-transaction": {
      "patterns": [
        {
          "begin": "(?i)^\\s*+(commit)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(comment|force|w(ork|rite))\\b",
               "comment": "commit"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(batch|immediate|nowait|wait)\\b",
               "comment": "commit"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "begin": "(?i)^\\s*+(rollback)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(force|savepoint|to|work)\\b",
               "comment": "rollback"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "begin": "(?i)^\\s*+(savepoint)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "begin": "(?i)^\\s*+(set\\s++constraint(s)?)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(all)\\b",
               "comment": "set-constraint"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(deferred|immediate)\\b",
               "comment": "set-constraint"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        },
        {
          "begin": "(?i)^\\s*+(set\\s++transaction)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(commited|isolation|level|name|only|r(ead|ollback)|se(gment|rializable)|use|write)\\b",
               "comment": "set-transaction"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(deferred|immediate)\\b",
               "comment": "set-constraint"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        }
      ]
    },
    "statement-control-session": {
      "patterns": [
        {
          "begin": "(?i)^\\s*+(alter\\s++session)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(a(dvise|rchival)|c(lose|o(mmit|ntainer))|d(atabase|dl|isable|ml)|e(dition|nable)|force|guard|in|link|n(ame|othing)|p(arallel|r(imary|ocedure))|query|r(esumable|o(llback|w))|s(et|ync)|timeout|visibility|with)\\b"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(a(ctive|ll))\\b"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$))|(?=^(\\.)?\\s*+$))"
        },
        {
          "begin": "(?i)^\\s*+(set\\s++role)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(by|except|identified)\\b",
               "comment": "set-role"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(all|none)\\b",
               "comment": "set-role"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        }
      ]
    },
    "statement-control-system": {
      "patterns": [
        {
          "begin": "(?i)^\\s*+(alter\\s++system)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(a(ll|pply|rchive)|b(ackup|uffer_cache|y)|c(h(ange|eck(point)?)|l(ient|ose)|o(mment|n(firm|trolfile))|urrent)|d(atafiles|eferred|is(able|connect|tribute(d)?))|en(able|cryption)|flush|g(lobal(\\s++context|_topic_enabled)|roup)|i(dentified|mmediate|nstance)|k(ey|ill)|log(file)?|migrat(e|ion)|n(ext|o(replay|switch)?)|open|p(atch|ost_transaction)|quiesce|r(e(covery|do|gister|llocate|s(et|tricted|ume))|olling)|s(cope|e(quence|ssion|t)|h(ared_pool|utwodn)|id|t(art|o(p)?)|uspend|witch)|to|u(nquiesce|s(e_stored_outlines|ing))|wallet)\\b"
            },
            {  "name": "constant.language",
               "match": "(?i)\\b(both|global(?!\\s++context)|local|memory|spfile)\\b"
            },
            { "include": "#common-clause" }
          ],
          "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
        }
      ]
    },
    "statement-key-mgmt": {
      "name": "meta.statement.administer-key",
      "begin": "(?i)^\\s*+(administer)\\b",
      "beginCaptures": {
          "1": { "name": "keyword.other" }
      },
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(a(dd|l(l|ter)|nd|uto_login)|b(ackup|y)|c(l(ient|ose)|ontainer|reate|urrent)|delete|e(ncryption|x(isting|port))|f(or|rom)|i(dentifie(d|r)|mport|n(to)?)|key(s(tore)?)?|local|m(anagement|erge|igrate)|new|open|reverse|se(cret|t)|t(ag|o)|u(pdate|s(e|ing))|with)\\b"
        },
        {  "name": "keyword.other",
           "match": "(?i)(?<!by)\\s++(password)\\b"
        },
        { "include": "#literal" },
        { "include": "#string" },
        {
          "begin": "\\(",
            "patterns": [
              {
                "begin": "(?i)(?=\\bselect\\s)",
                  "patterns": [
                    { "include": "#statement-dml-select" }
                  ],
                "end": "(?=\\))"
              },
              { "include": "#expression" }
            ],
          "end": "\\)",
          "captures": {
              "0": { "name": "keyword.other.delimiter" }
          }
        },
        {  "name": "keyword.operator",
           "match": "="
        },
        {  "name": "constant.character",
           "match": "\\S"
        }
      ],
      "end": "((?=;)|((?=^\\s*+/$\\s*+))|(?=^\\s*+$))"
    }
  },
  "uuid": "53e1bc07-e2f5-4df9-9d65-a8f7a9c3bf6f"
}