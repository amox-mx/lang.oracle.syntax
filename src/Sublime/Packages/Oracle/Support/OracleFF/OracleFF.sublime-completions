{
        "scope": "source.oracle.ff",
        "completions":
        [
        	{ "trigger": "abs", "contents": "abs( ${1:n} )" },             
                { "trigger": "add_days", "contents": "add_days( ${1:date}, ${2:n} )" },             
                { "trigger": "add_months", "contents": "add_months( ${1:date}, ${2:n} )" },             
                { "trigger": "add_years", "contents": "add_years( ${1:date}, ${2:n} )" },             
                { "trigger": "alias", "contents": "alias" },
        	{ "trigger": "alias\tvariable as", "contents": "alias ${1:variable} as ${2:alias_name}" },
                { "trigger": "calculate_hours_worked", "contents": "calculate_hours_worked( ${1:n}, ${2:date1}, ${3:date2}, ${3:standard_frequency} )" },             
        	{ "trigger": "calculate_payroll_periods", "contents": "calculate_payroll_periods" },             
                { "trigger": "chr", "contents": "chr( ${1:n} )" },        	
                { "trigger": "convert", "contents": "convert( ${1:expr1}, ${2:dest_char_set} )" },            
        	{ "trigger": "date", "contents": "date" },   
                { "trigger": "date_to_text", "contents": "date_to_text( ${1:date}, '${2:format}' )" },  
                { "trigger": "days_between", "contents": "days_between( ${1:date1}, ${2:date2} )" },   	
        	{ "trigger": "debug", "contents": "debug( '${1:text}' || ${2:expr} )" },        	
        	{ "trigger": "default", "contents": "default" },        	
        	{ "trigger": "default\tfor date variable", "contents": "default for ${1:variable} is '${2:1951/01/01} 00:00:00' (date)" },
        	{ "trigger": "default\tfor number variable", "contents": "default for ${1:variable} is ${2:0}" },
        	{ "trigger": "default\tfor text variable", "contents": "default for ${1:variable} is '${2:default_name}'" },
                { "trigger": "floor", "contents": "floor( ${1:n} )" },             
                { "trigger": "get_absence", "contents": "get_absence( ${1:calcuation_date}, ${2:start_date} )" },    
                { "trigger": "get_accrual_band", "contents": "get_accrual_band( ${1:years_of_service} )" },    
                { "trigger": "get_asg_inactive_dates", "contents": "get_asg_inactive_dates( ${1:period_start_date}, ${2:period_end_date} )" },    
                { "trigger": "get_assignment_status", "contents": "get_assignment_status( ${1:date} )" }, 
                { "trigger": "get_carry_over", "contents": "get_carry_over( ${1:calcuation_date}, ${2:start_date} )" },    
                { "trigger": "get_lookup_meaning", "contents": "get_lookup_meaning( ${1:lookup_type}, ${2:lookup_code} )" },             
                { "trigger": "get_net_accrual", "contents": "get_net_accrual( ${1:calcuation_date}, ${2:plan_id}, ${3:accrual_start_date}, ${4:accrual_latest_balance} )" },    
                { "trigger": "get_other_net_contribution", "contents": "get_other_net_contribution( ${1:calcuation_date}, ${2:start_date} )" },    
        	{ "trigger": "get_payroll_period", "contents": "get_payroll_period( ${1:date} )" },    
                { "trigger": "get_period_dates", "contents": "get_period_dates( ${1:date1}, ${2:unit}, ${3:date2}, ${4:number} )" },    
                { "trigger": "get_start_date", "contents": "get_start_date( ${1:accrual_start_date}, ${2:start_of_accrual_term} )" },            
                { "trigger": "get_table_value", "contents": "get_table_value( ${1:table_name}, ${2:column_name}, ${3:row_value}, ${4:effective_date} )" },             
                { "trigger": "get_working_days", "contents": "get_working_days( ${1:start_date}, ${2:end_date} )" },    
                { "trigger": "greatest", "contents": "greatest( ${1:expr1}, ${2:expr2} )" },        	
        	{ "trigger": "greatest_of", "contents": "greatest_of( ${1:expr1}, ${2:expr2} )" },        	
        	{ "trigger": "if", "contents": "if" },
        	{ "trigger": "if\tif..then", "contents": "if ${1:condition} then\n(\n\t$0\n)" },
        	{ "trigger": "if\tif..then..else", "contents": "if ${1:condition} then\n(\n\t$2\n)\nelse\n(\n\t$0\n)" },
        	{ "trigger": "initcap", "contents": "initcap( ${1:expr} )" },
        	{ "trigger": "inputs", "contents": "inputs" },
        	{ "trigger": "inputs are", "contents": "inputs are" },
        	{ "trigger": "instr", "contents": "instr( ${1:expr1}, '$2{expr2}' )" },
        	{ "trigger": "instrb", "contents": "instrb( ${1:expr}, '$2{expr2}' )" },
                { "trigger": "last_day", "contents": "last_day( ${1:date} )" },             
        	{ "trigger": "least", "contents": "least( ${1:expr1}, ${2:expr2} )" },
        	{ "trigger": "least_of", "contents": "least_of( ${1:expr1}, ${2:expr2} )" },
        	{ "trigger": "length", "contents": "length( ${1:expr})" },
        	{ "trigger": "lengthb", "contents": "lengthb( ${1:expr})" },
        	{ "trigger": "lower", "contents": "lower( ${1:expr})" },
        	{ "trigger": "lpad", "contents": "lpad( ${1:expr}, ${2:n}, ' ' )" },
        	{ "trigger": "ltrim", "contents": "ltrim( ${1:expr}, '${2: }' )" },
                { "trigger": "months_between", "contents": "months_between( ${1:date1}, ${2:date2} )" },    
                { "trigger": "new_time", "contents": "new_time( ${1:date}, ${1:zone1}, ${2:zone2} )" },    
                { "trigger": "next_day", "contents": "next_day( ${1:day}, ${1:expr} )" },
        	{ "trigger": "numeric", "contents": "numeric" },        	
                { "trigger": "num_to_char", "contents": "num_to_char( ${1:n}, '${2:format}' )" },
                { "trigger": "power", "contents": "power( ${1:m}, ${2:n} )" },            
                { "trigger": "raise_error", "contents": "raise_error( ${1:application_id}, ${2:message_name} )" },             
                { "trigger": "rates_history", "contents": "rates_history( ${1:element_or_rate_type_name}, ${2:date}, ${3:element_or_rate_type_indicator}, ${4:time_dimension} )" },             
        	{ "trigger": "replace", "contents": "replace( ${1:expr}, '${2:search_string}', '${3:replacement_string}' )" },
        	{ "trigger": "return", "contents": "return" },
                { "trigger": "round", "contents": "round( ${1:n}, ${2:m} )" },             
                { "trigger": "round_up", "contents": "round_up( ${1:n}, ${2:m} )" },             
                { "trigger": "round", "contents": "round( ${1:n}, ${2:m} )" },             
        	{ "trigger": "rpad", "contents": "rpad( ${1:expr}, ${2:n}, ' ' )" },
        	{ "trigger": "rtrim", "contents": "rtrim( ${1:expr}, '${2: }' )" },
        	{ "trigger": "substr", "contents": "substr( ${1:expr}, ${2:m}, ${3:n} )" },
        	{ "trigger": "substrb", "contents": "substrb( ${1:expr}, ${2:m}, ${3:n} )" },
        	{ "trigger": "substring", "contents": "substring( ${1:expr}, ${2:m}, ${3:n} )" },
        	{ "trigger": "text", "contents": "text" },        	
                { "trigger": "to_char\tnumber", "contents": "to_char( ${1:n} )" },
                { "trigger": "to_char\tdate", "contents": "to_char( ${1:date, '${2:format}' )" },
                { "trigger": "to_date", "contents": "to_date( ${1:expr}, '${2:format}' )" },
                { "trigger": "to_number", "contents": "to_number( ${1:expr} )" },                
                { "trigger": "to_text\tnumber", "contents": "to_text( ${1:n} )" },
                { "trigger": "to_text\tdate", "contents": "to_text( ${1:date}, '${2:format}' )" },
                { "trigger": "to_text", "contents": "to_text( ${1:expr} )" },
        	{ "trigger": "translate", "contents": "translate( ${1:expr}, '${2:from}', '${3:to}' )" },
        	{ "trigger": "trim\tall", "contents": "trim( '${1:trim_character}' from ${2:trim_source} )" },
        	{ "trigger": "trim\tleading", "contents": "trim( leading '${1:trim_character}' from ${2:trim_source} )" },
        	{ "trigger": "trim\ttrailing", "contents": "trim( trailing '${1:trim_character}' from ${2:trim_source} )" },
                { "trigger": "trunc", "contents": "trunc( ${1:n}, ${2:m} )" },             
                { "trigger": "truncate", "contents": "truncate( ${1:n}, ${2:m} )" },             
        	{ "trigger": "upper", "contents": "upper( ${1:expr})" },        	
        	{ "trigger": "was defaulted", "contents": "was defaulted" }
        ]
}                