// [PackageDev] target_format: plist, ext: tmLanguage
{ "name": "Oracle PL/SQL",
  "scopeName": "source.oracle.plsql",
  "fileTypes": [""],
  "hidden": true,
  "patterns": [
    { "include": "#meta-block" },
    { "include": "#subprogram" }
  ],
  "repository": {
    "meta-block": {
      "patterns": [
        {
          "name": "meta.block.plsql",
          "begin": "(?=(?i)\\b(begin|declare|library|package|trigger|type)(\\s|$))|(?=<<)",
          "patterns": [
            { "include": "#label" },
            { "include": "#subprogram" },
            { "include": "#package" },
            { "include": "#trigger" },
            { "include": "#block-executable" },
            { "include": "#block-declaration" },
            { "include": "#library" },
            { "include": "#type" },
            { "include": "#type-body" },
            { "include": "#comment" },
            {  "name": "invalid.illegal",
               "match": "\\S"
            }
          ],
          "end": "((?=^(\\s*+/\\s*+|\\.)$))"
        }
      ]
    },
    "label": {
      "name": "entity.name.function",
      "match": "^\\s*+(<<)(.+?)(>>)(.*)?$",
      "captures": {
          "1": { "name": "keyword.other.delimiter" },
          "2": { "name": "entity.name.tag" },
          "3": { "name": "keyword.other.delimiter" },
          "4": { "name": "invalid.illegal" }
      }
    },
    "literal": {
      "patterns": [
        {  "name": "constant.character",
           "begin": "(n|N)?'",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "('')+"
            },
            { "include": "#variable-other-substitution-oracle-sqlplus" }
           ],
           "end": "'(?!')",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'(\\[)",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#variable-other-substitution-oracle-sqlplus" }
           ],
           "end": "(])'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'({)",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#variable-other-substitution-oracle-sqlplus" }
           ],
           "end": "(})'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'(<)",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#variable-other-substitution-oracle-sqlplus" }
           ],
           "end": "(>)'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character",
           "begin": "(n|N)?(q|Q)'(\\()",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#variable-other-substitution-oracle-sqlplus" }
           ],
           "end": "(\\))'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.character.oracle.sql",
           "begin": "(n|N)?(q|Q)'([^\\s\\[|{|<|\\(])",
           "patterns": [
            {  "name": "string.quoted.single",
               "match": "(')"
            },
            { "include": "#variable-other-substitution-oracle-sqlplus" }
           ],
           "end": "(\\3)'",
           "captures": {
               "0": { "name": "keyword.delimiter" }
           }
        },
        {  "name": "constant.numeric",
           "match": "\\b(\\+|-)?\\d++((\\.)\\d++|\\d++((\\.)\\d++)?)?((e|E)?(\\+|-)?(\\d++)?)?(f|F|d|D)?\\b",
           "captures": {
               "1": { "name": "keyword.delimiter" },
               "3": { "name": "keyword.delimiter" },
               "5": { "name": "keyword.delimiter" },
               "7": { "name": "constant.character" },
               "8": { "name": "keyword.delimiter" },
               "10": { "name": "constant.character" }
           }
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(binary_((float|double)_(m(in_(subnormal|normal)|ax_(subnormal|normal))|infinity|nan))|deleting|false|inserting|null|object_value|true|updating)\\b"
        },
        {  "name": "constant.language",
           "match": "\\b((G|g)_\\w++)\\b"
        }
      ]
    },
    "variable-other-substitution-oracle-sqlplus": {
      "name": "variable.other.substitution.oracle.sqlplus",
      "match": "(?<!&)(&{1,2})\\s*+(?:[[:alnum:]_])++(\\.)?",
      "captures": {
          "1": { "name": "keyword.operator.oracle.sqlplus" },
          "2": { "name": "keyword.operator.oracle.sqlplus" }
      }
    },
    "variable-other-bind-oracle-sqlplus": {
      "name": "variable.other.bind.oracle.sqlplus",
      "match": "(?<=\\s|^)(:)([[:alnum:]_])([[:alnum:]_])*+",
      "captures": {
          "1": { "name": "keyword.operator.oracle.sqlplus" }
      }
    },
    "variable": {
      "patterns": [
        { "name": "variable.other.oracle.plsql",
          "begin": "(?i)(^|\\s)(?=(\\S)+\\s*:=)",
          "patterns": [
            { "include": "#keyword-delimiter" },
            { "include": "#variable-other-bind-oracle-sqlplus" },
            { "include": "#identifier"}
          ],
          "end": "(?=:=)"
        },
        {  "name": "variable.other.directive",
           "match": "(\\$\\$)\\w++",
           "captures": {
               "1": { "name": "keyword.other.delimiter" }
           }
        },
        {  "name": "variable.other.oracle.plsql",
           "match": "(?i)(?<=(f|F)(o|O)(r|R))\\s++(?!select\\b)(\\w++)"
        },
        {  "name": "variable.other",
           "match": "(?i)\\b(sql)(?=%)"
        },
        {  "name": "constant.language",
           "match": "(?i)(?<=%)(bulk_(exceptions|rowcount)|found|isopen|notfound|rowcount)\\b"
        },
        {  "name": "constant.language",
           "match": "(?i)\\b(sys_invalid_rowid)\\b"
        }
      ]
    },
    "storage": {
      "patterns": [
        {  "name": "storage.type.characer",
           "match": "(?i)\\b(byte|char|n(char|varchar2)|varchar2)\\b"
        },
        {  "name": "storage.type.number",
           "match": "(?i)\\b(binary_(double|float)|float|number)\\b"
        },
        {  "name": "invalid.deprecated",
           "match": "(?i)\\b(long(\\s++raw)|raw)\\b"
        },
        {  "name": "storage.type.datetime",
           "match": "(?i)\\b(date|interval\\s++(day|year)|t(o(\\s++(month|second))|imestamp)|with(\\s++local)?\\s++time\\s++zone)\\b"
        },
        {  "name": "storage.type.large-object",
           "match": "(?i)\\b(b(file|lob)|clob|nclob)\\b"
        },
        {  "name": "storage.type.rowid",
           "match": "(?i)\\b(rowid|urowid)\\b"
        },
        {  "name": "storage.type.ansi",
           "match": "(?i)\\b(char((\\s++varying)?|acter(\\s++varying)?)|d(ouble(\\s++precision)?|ec(imal)?)|int(eger)?|n(ational|char(\\s++varying)?|umeric)|real|smaillint|varchar)\\b"
        },
        {  "name": "storage.type.oracle-provided",
           "match": "(?i)\\b(ord(audio|d(icom|oc)|image|video)|s(do_(geo(metry|raster)|topo_geometry)|i_(averagecolor|color(histogram)?|featurelist|positionalcolor|stillimage|texture)|ys\\.(any(data(set)?|type|)))|uritype|xmltype)\\b"
        },
        {  "name": "storage.type.scalar",
           "match": "(?i)\\b(b(inary_integer|oolean)|pls_integer|ref\\s++cursor)\\b"
        },
        {  "name": "storage.type.subtype",
           "match": "(?i)\\b(natural(n)?|positive(n)?|si(gntype|mple_(double|integer|float)))\\b"
        },
        { "name": "meta.type.cursor",
          "begin": "(?i)\\b(cursor)\\b",
          "beginCaptures": {
              "1": { "name": "storage.type.subtype" }
          },
          "patterns": [
            {  "name": "keyword.other.storage",
               "match": "(?i)\\b(is|return)\\b"
            },
            {
              "begin": "(?i)(?=\\(\\s*select )",
              "patterns": [
                { "include": "#expression" }
              ],
              "end": "(?<=\\))"
            },
            { "include": "#parameter-definition" },
            { "include": "#static-sql" },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        {  "name": "storage.type.composite",
           "match": "(?i)\\b(exception|i(s)|r(e(turn|cord))|s(ys_refcursor)|t(able|ype)|var(ray))\\b"
        },
        {  "name": "storage.type.subtype",
           "match": "(?i)(?<=%)(rowtype|type)\\b"
        },
        {  "name": "storage.modifier",
           "match": "(?i)\\b(constant|default|i(n(dex\\s++by)?|s(?=\\s++table))|no(copy|t\\s++null)|o(ut|f)|r(ange|ef)|subtype)\\b"
        }
      ]
    },
    "variable-declaration-oracle-plsql": {
      "patterns": [
        { "include": "#storage" },
        { "include": "#support" },
        { "include": "#literal" }
      ]
    },
    "comment": {
      "patterns": [
        {  "name": "comment.line.double-dash",
           "match": "(?<!-)(--)(.*)$",
           "captures": {
               "1": { "name": "keyword.other" }
           }
        },
        { "name": "comment.block",
          "begin": "(/\\*)",
          "end": "(\\*/)",
          "captures": {
              "1": { "name": "keyword.other" }
          }
        }
      ]
    },
    "keyword-delimiter": {
      "patterns": [
        {  "name": "keyword.operator",
           "match": "(\\+|:=|=>|%|\\|\\||/|\\*{1,2}|(?<!\\.)((\\.){1,2})(?!\\.)|=|<>|!=|~=|\\^=|<(=)?|>(=)?|-)"
        },
        {  "name": "keyword.other.separator",
           "match": "(,)"
        },
        {  "name": "keyword.other.indicator",
           "match": "(@)"
        },
        {  "name": "keyword.other.terminator",
           "match": "(;)"
        },
        {  "name": "keyword.other",
           "match": "(:)"
        }
      ]
    },
    "identifier": {
      "patterns": [
        {
          "begin": "(\")(?=([^\"]){0,30}\")",
          "captures": {
              "1": { "name": "keyword.other.delimiter" }
          },
          "patterns": [
            { "include": "#variable-other-substitution-oracle-sqlplus" },
            {  "name": "variable.other",
               "match": "."
            }
          ],
          "end": "(\")"
        },
        { "name": "invalid.illegal",
          "begin": "(\")(?=([^\"]){31,}\")",
          "end": "(\")"
        },
        {  "name": "variable.language",
           "match": "(?i)(?<!\\$)(\\$\\$)([[:alpha:]])(([\\w$#]){0,29})(?!([\\w$#]))",
           "captures": {
               "1": { "name": "keyword.other.delimiter" }
           }
        },
        {  "name": "variable.other",
           "match": "(?i)\\b([[:alpha:]])(([\\w$#]){0,29})(?!([\\w$#]))"
        },
        {  "name": "invalid.illegal",
           "match": "(?i)\\b([[:alpha:]])(([\\w$#]){30,})"
        },
        {  "name": "invalid.illegal",
           "match": "(?i)\\b(\\d)(([a-z$#])([\\w$#])*)\\b"
        }
      ]
    },
    "keyword-operator": {
      "patterns": [
        {  "name": "keyword.operator",
           "match": "(?i)\\b(and|between|escape|i(n|s)|like|not|or)\\b"
        },
        {  "name": "keyword.operator.multiset",
           "match": "(?i)\\b(a\\s++set|empty|member(\\s++of)?|submultiset(\\s++of)?)\\b"
        }
      ]
    },
    "support": {
      "patterns": [
        {  "name": "support.function",
           "match": "(?i)\\b((?:apex|dbms|ctx|o(?:rd|wa)|s(?:do|em)|utl|wpg)_\\w++|ht(?:f|p))(\\.)(\\w++)",
           "captures": {
               "2": { "name": "keyword.other.indicator" },
               "3": { "name": "variable.other" }
           }
        },
        {  "name": "support.function.apps",
           "match": "(?i)\\b((?:ap(?:p)?|okc|p(?:a|o)|wf|fnd|zx)_\\w++)(\\.)(\\w++)",
           "captures": {
               "2": { "name": "keyword.other.indicator" },
               "3": { "name": "variable.other" }
           }
        },
        {  "name": "support.function",
           "match": "(?i)\\b(chartorowid|decode|floor|greatest|lpad|mod|nvl|s(ql(code|errm)|ubstr)|r(aise_application_error|eplace|o(und|widtochar)|trim|pad)|s(um|qrt)|t(o_(binary_(double|float)|char|date|number|timestamp)|runc)|upper)\\b"
        },
        {  "name": "support.function.collection",
           "match": "(?i)(?<=\\.)(count|delete|ex(ists|tend)|first|l(imit|ast)|next|prior|trim)\\b"
        }
      ]
    },
    "expression": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#keyword-operator" },
        { "name": "meta.block.case",
          "begin": "(?i)\\b(case)\\b",
          "captures": {
              "1": { "name": "keyword.control" }
          },
          "patterns": [
            {  "name": "keyword.control",
               "match": "(?i)\\b(else|then|when)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?i)\\b(end)\\b"
        },
        {
          "begin": "\\(",
            "patterns": [
              {
                "name": "meta.block.statement.oracle.sql",
                "begin": "(?i)(?=(select)\\s)",
                  "patterns": [
                    { "include": "source.oracle.sql" }
                  ],
                "end": "(?=\\))"
              },
              {  "name": "keyword.other",
                 "match": "(?i)\\b(any|by|cluster|hash|order|partition|range|trigger|value)\\b"
              },
              { "include": "#expression" }
            ],
          "end": "\\)",
          "captures": {
              "0": { "name": "keyword.other.delimiter" }
          }
        },
        { "include": "#literal" },
        { "include": "#support" },
        {  "name": "keyword.other.multiset",
           "match": "(?i)\\b(multiset\\s++(except|intersect|union)(\\s++(all|distinct))?)\\b"
        },
        {  "name": "support.variable",
           "match": "(?i)(?<=\\.)(currval|nextval)\\b"
        },
        {  "name": "variable.other",
           "match": "(?i)(?<=%)(bulk_(exceptions|rowcount)|found|isopen|notfound|rowcount)\\b"
        },
        { "include": "#identifier" },
        { "include": "#keyword-delimiter" },
        {  "name": "invalid.illegal",
           "match": "\\)"
        }
      ]
    },
    "statement-assignment": {
      "name": "meta.statement.assignment",
      "begin": "(?i)\\s*+(?!if|then|else)(?=(:)?([[:alpha:]])([\\w#$\\.])*+\\s*+(\\(.*\\))?(\\.([[:alpha:]])([\\w#$\\.])*+)?\\s*+:=)",
      "patterns": [
        {
          "begin": "(:=)",
          "beginCaptures": {
              "1": { "name": "keyword.delimiter" }
          },
          "patterns": [
            { "include": "#variable-other-substitution-oracle-sqlplus" },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        { "include": "#expression" }
      ],
      "end": "(?=;)"
    },
    "pragma": {
      "patterns": [
        { "name": "meta.statement.pragma",
          "begin": "(?i)\\b(pragma)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "constant.language",
               "match": "(?i)\\b(autonomous_transaction|exception_init|serially_reusable|udf)\\b"
            },
            {
              "begin": "(?i)\\b(restrict_references)\\b",
              "beginCaptures": {
                  "1": { "name": "invalid.deprecated" }
              },
              "patterns": [
                {
                  "begin": "\\(",
                  "captures": {
                      "0": { "name": "keyword.other.delimiter" }
                  },
                  "patterns": [
                    {  "name": "keyword.other",
                       "match": "(?i)\\b(default|rn(d|p)s|trust|wn(d|p)s)\\b"
                    },
                    { "include": "#identifier" }
                  ],
                  "end": "\\)"
                }
              ],
              "end": "(?<=\\))"
            },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        }
      ]
    },
    "statement-loop": {
      "patterns": [
        {  "name": "meta.stmt.loop",
          "begin": "(?i)(^|(?<= |\\t|;))loop(?=\\s)",
          "captures": {
              "0": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#statement" }
          ],
          "end": "(?i)(^|(?<= |\\t|;))end(\\s++)loop(\\s++\\w++)?(\\s*;)",
          "endCaptures": {
              "3": { "name": "variable.other" }
          }
        },
        {  "name": "meta.stmt.loop",
           "begin": "(?i)(^|(?<=;))\\s*+(for)\\s++(\\w++)",
           "beginCaptures": {
               "2": { "name": "keyword.control" },
               "3": { "name": "variable.other" }
           },
           "patterns": [
              {  "name": "keyword.control",
                 "match": "(?i)\\b(in|reverse)\\b"
              },
              { "include": "#expression" }
           ],
           "end": "(?i)(?=\\b(loop)\\b)"
        },
        {  "name": "meta.stmt.loop",
           "begin": "(?i)\\b(while)\\b",
           "beginCaptures": {
               "1": { "name": "keyword.control" }
           },
           "patterns": [
              { "include": "#expression" }
           ],
           "end": "(?i)(?=\\b(loop)\\b)"
        }
      ]
    },
    "statement-block": {
      "begin": "(?=(?i)\\b(begin|declare)(\\s|$))",
      "patterns": [
        { "include": "#block-executable" },
        { "include": "#block-declaration" },
        {  "name": "meta.diff",
           "match": "\\S"
        }
      ],
      "end": "(?<=;)"
    },
    "statement-case": {
      "name": "meta.statement.case",
      "begin": "(?i)(^|(?<= |\\t|;))case(?=\\s)",
      "captures": {
          "0": { "name": "keyword.control.oracle.plsql" }
      },
      "patterns": [
        { "name": "meta.statement.case.when",
          "begin": "(?i)\\b(?<=then)(\\s++)",
          "captures": {
              "0": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#statement" }
          ],
          "end": "(?i)(?=\\b(e(lse|nd\\s++case)|when)(\\s|;))"
        },
        { "name": "meta.statement.case.else",
          "begin": "(?i)\\b(?<=else)(\\s++)",
          "captures": {
              "0": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#statement" }
          ],
          "end": "(?i)(?=(\\bend)(\\s|;))"
        },
        {  "name": "keyword.control.untitled",
           "match": "(?i)\\b(else|then|when)\\b"
        },
        { "include": "#expression" }
      ],
      "end": "(?i)(^|(?<= |\\t|;))end(\\s++case)(\\s*+(;?))"
    },
    "parameter-definition": {
      "patterns": [
          { "name": "meta.block.parameters.define",
            "begin": "(\\()",
            "captures": {
                "0": { "name": "keyword.other.delimiter" }
            },
            "patterns": [
              {  "name": "storage.type",
                 "match": "(?i)\\b(int|long|string|ocidate)\\b"
              },
              {  "name": "storage.modifier",
                 "match": "(?i)\\b(by|charset(form|id)|duration|indicator|length|maxlen|re(ference|turn)|struct|tdo)\\b"
              },
              {  "name": "support.variable",
                 "match": "(?i)\\b(context|self)\\b"
              },
              { "include": "#statement-conditional-compile" },
              { "include": "#comment" },
              { "include": "#variable-other-substitution-oracle-sqlplus" },
              { "include": "#variable-other-bind-oracle-sqlplus" },
              { "include": "#keyword-delimiter" },
              { "include": "#storage" },
              { "include": "#support" },
              { "include": "#literal" },
              { "include": "#identifier" }
            ],
            "end": "(\\))"
          }
        ]
    },
    "statement-continue-exit": {
      "patterns": [
        { "name": "meta.statement.loop.exit",
          "begin": "(?i)\\b(continue|exit)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control.loop" }
          },
          "patterns": [
            {  "name": "keyword.control.loop",
               "match": "(?i)\\b(when)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        }
      ]
    },
    "statement-if": {
      "patterns": [
        {
          "name": "meta.stmt.if",
          "begin": "(?i)(^|(?<= |\\t|;))if(?=\\s|\\()",
          "captures": {
              "0": { "name": "keyword.control" }
          },
          "patterns": [
            {
              "begin": "(?i)\\b(?<=then)(\\s++)",
              "captures": {
                  "0": { "name": "keyword.control" }
              },
              "patterns": [
                { "include": "#statement" }
              ],
              "end": "(?i)(?=(e(nd\\s++if|ls(e|if)))(\\s|;))"
            },
            {
              "begin": "(?i)\\b(?<=else)(\\s++)",
              "captures": {
                  "0": { "name": "keyword.control" }
              },
              "patterns": [
                { "include": "#statement" }
              ],
              "end": "(?i)(?=(\\bend\\s++if)(\\s|;))"
            },
            {  "name": "keyword.other.conditional",
               "match": "\\b(?i)(els(e|if)|then)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?i)(^|(?<= |\\t|;))end\\s++if\\s*+((/\\*)(.*?)(\\*/))?(;)",
          "endCaptures": {
              "4": { "name": "comment.block" },
              "6": { "name": "keyword.other.delimiter.oracle.plsql" }
          }
        }
      ]
    },
    "pragma-inline": {
      "patterns": [
        { "name": "meta.statement.pragma",
          "begin": "(?i)\\b(pragma)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.other" }
          },
          "patterns": [
            {  "name": "constant.language",
               "match": "(?i)\\b(inline)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        }
      ]
    },
    "error-directive": {
      "name": "statement.directive.error",
      "begin": "(?i)(\\$error\\b)",
      "captures": {
          "0": { "name": "keyword.control.oracle.plsql" }
      },
      "patterns": [
        { "include": "#literal" }
      ],
      "end": "(?i)(\\$end\\b)"
    },
    "statement-conditional-compile": {
      "patterns": [
        {
          "name": "meta.statement.conditional.compile",
          "begin": "(?i)(^|(?<= |\\t|;))\\$if(?=\\s)",
          "captures": {
              "0": { "name": "keyword.control" }
          },
          "patterns": [
            { "name": "meta.statement.conditional.compile.statements",
              "begin": "(?i)(?<=\\$then)(\\b)",
              "captures": {
                  "0": { "name": "keyword.control" }
              },
              "patterns": [
                { "include": "#error-directive" },
                { "include": "#block-declaration-oracle-plsql-include" },
                { "include": "#statement" }
              ],
              "end": "(?i)(?=(\\$)(e(nd|lse))(\\b))"
            },
            { "name": "meta.statement.conditional.compile.statements",
              "begin": "(?i)(?<=\\$else)(\\b)",
              "captures": {
                  "0": { "name": "keyword.control" }
              },
              "patterns": [
                { "include": "#error-directive" },
                { "include": "#block-declaration-oracle-plsql-include" },
                { "include": "#statement" }
              ],
              "end": "(?i)(?=(\\$end)(\\b))"
            },
            {  "name": "keyword.other.conditional",
               "match": "(?i)(\\$)(else|then)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?i)(^|(?<= |\\t|;))\\$end\\b"
        }
      ]
    },
    "statement": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#statement-block" },
        { "include": "#statement-loop" },
        { "include": "#statement-case" },
        { "include": "#statement-continue-exit" },
        { "include": "#statement-if" },
        { "include": "#pragma-inline" },
        {  "name": "meta.statement.null",
           "match": "(?i)(?<=^|;)\\s*+(null)(?=\\s*+;)",
           "captures": {
               "0": { "name": "keyword.control" }
           }
        },
        { "include": "#statement-assignment" },
        { "include": "#variable-other-substitution-oracle-sqlplus" },
        {  "name": "keyword.other.ansi.oracle.sql",
           "match": "(?i)\\b(date|timestamp)\\b"
        },
        {  "name": "keyword.other.interval.oracle.sql",
           "match": "(?i)\\b(day|hour|interval|m(inute|onth)|second|to\\s++(day|hour|m(inute|onth)|second| year)|year)\\b"
        },
        { "name": "meta.statement.execute",
          "begin": "(?i)\\b(execute)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.operator" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(bulk\\s++collect|i(mmediate|n(to)?)|out|return(ing)?|using)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.statement.forall",
          "begin": "(?i)\\b(forall)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.operator" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(and|between|exceptions|in(dices\\s++of)?|save|values\\s++of)\\b"
            },
            { "include": "#static-sql" },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        {  "name": "keyword.other.oracle.plsql",
           "match": "(?i)\\b(bulk|collect)\\b"
        },
        {  "name": "keyword.control.plsql.oracle",
           "match": "(?i)\\b(into)\\b"
        },
        { "name": "meta.statement.fetch",
          "begin": "(?i)\\b(fetch)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.operator" }
          },
          "patterns": [
            {  "name": "keyword.other",
               "match": "(?i)\\b(bulk\\s++collect|into|limit)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.statement.open",
          "begin": "(?i)\\b(open)\\s++(\\w++)\\b\\s*+(?!for)",
          "beginCaptures": {
              "1": { "name": "keyword.control" },
              "2": { "name": "variable.other" }
          },
          "patterns": [
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.statement.open.for",
          "begin": "(?i)\\b(open)\\s++(:)?(\\w++)\\b\\s++(for)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control" },
              "2": { "name": "keyword.other.delimiter" },
              "3": { "name": "variable.other" },
              "4": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#static-sql" },
            {  "name": "keyword.other",
               "match": "(?i)\\b(using|in|out)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        { "name": "meta.statement",
          "begin": "(?i)\\b(close|goto|pipe\\s++row|r(aise|eturn))\\b",
          "beginCaptures": {
             "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#expression" }
          ],
          "end": "(?=;)"
        },
        { "include": "#statement-conditional-compile" },
        { "include": "#static-sql" },
        { "include": "#expression" }
      ]
    },
    "block-executable-oracle-plsql-include": {
      "patterns": [
        { "include": "#label" },
        { "include": "#block-declaration" },
        { "include": "#block-executable" },
        { "include": "#static-sql" },
        {
          "begin": "\\(",
            "patterns": [
              { "include": "#expression" }
            ],
          "end": "\\)",
          "captures": {
              "0": { "name": "keyword.other.delimiter" }
          }
        },
        { "include": "#statement-conditional" },
        { "include": "#comment" },
        { "include": "#variable-other-substitution-oracle-sqlplus" },
        { "include": "#variable-other-bind-oracle-sqlplus" },
        { "include": "#support" },
        { "include": "#keyword-delimiter" },
        { "include": "#keyword-operator" },
        { "include": "#statement" },
        { "include": "#literal" }
      ]
    },
    "block-declaration-oracle-plsql-include": {
      "patterns": [
        { "include": "#comment" },
        { "include": "#pragma" },
        { "include": "#subprogram" },
        { "include": "#variable-declaration-oracle-plsql" },
        { "include": "#variable-other-substitution-oracle-sqlplus" },
        { "include": "#variable-other-bind-oracle-sqlplus" },
        { "include": "#keyword-delimiter" },
        { "include": "#statement-conditional-compile" },
        { "include": "#identifier" }
      ]
    },
    "block-executable": {
      "patterns": [
        {
          "name": "meta.section.executable",
          "begin": "(?i)(^|(?<= |\\t|;))begin(?=\\s)",
          "captures": {
              "0": { "name": "keyword.control.oracle.plsql" }
          },
          "patterns": [
            { "include": "#block-exception" },
            { "include": "#label" },
            { "include": "#statement" }
          ],
          "end": "(?i)(^|(?<= |\\t|;))end(?!\\s++(if|loop|case)\\b)(\\s++([[:alpha:]])(\\w|\\$)*+)?.*(;)",
          "endCaptures": {
              "3": { "name": "variable.other" }
          }
        },
        { "include": "#label" }
      ]
    },
    "static-sql": {
      "patterns": [
        {
          "begin": "(?i)(?=\\s*\\b(commit|insert|(?<!\\.)delete|lock\\s++table|merge|rollback|s(avepoint|e(lect|t\\s++transaction))|update)\\b)",
            "patterns": [
              { "include": "source.oracle.sql" }
            ],
          "end": "(?=;)"
        }
      ]
    },
    "block-declaration": {
      "name": "meta.section.declare",
      "begin": "(?i)(^|(?<= |\\t|;))declare(?=\\s)",
      "captures": {
          "0": { "name": "keyword.control" }
      },
      "patterns": [
        { "include": "#block-declaration-oracle-plsql-include" }
      ],
      "end": "(?=(?i)\\b(begin)(\\s|$))"
    },
    "block-exception": {
      "name": "meta.block.exception",
      "begin": "(?i)(^|(?<= |\\t|;))exception(?=\\s)",
      "captures": {
          "0": { "name": "keyword.control.oracle.plsql" }
      },
      "patterns": [
        { 
          "begin": "(?i)\\b(when)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control" }
          },
          "patterns": [
            {  "name": "constant.language",
               "match": "(?i)\\b(deleting|in(serting|valid_number)|no_data_(found|needed)|others|rowtype_mismatch|too_many_rows|updating|zero_divide)\\b"
            },
            { "include": "#expression" }
          ],
          "end": "(?=(?i)\\b(end|then)(\\s|;))"
        },
        { 
          "begin": "(?i)\\b(then)\\b",
          "beginCaptures": {
              "1": { "name": "keyword.control" }
          },
          "patterns": [
            { "include": "#statement" }
          ],
          "end": "(?=(?i)\\b(end|when)(\\s|;))"
        },
        { "include": "#comment" }
      ],
      "end": "(?=(?i)\\b(end)(\\s|;))"
    },
    "subprogram": {
      "patterns": [
        { "name": "meta.block.subprogram",
          "begin": "(?i)(^|(?<= |\\t|;))(?=(procedure|function)\\s)",
            "patterns": [
              { "name": "meta.block.subprogram.heading",
                "begin": "(?i)(^|(?<= |\\t|;))(?=(procedure|function)\\s)",
                "patterns": [
                  { "name": "entity.name.function",
                    "begin": "(?i)\\b(procedure|function)\\s++",
                    "beginCaptures": {
                        "1": { "name": "keyword.other" }
                    },
                    "patterns": [
                      {  "name": "keyword.other.delimiter",
                         "match": "(&|\"|\\.)"
                      }
                    ],
                    "end": "(\\s|$|(?=\\())"
                  },
                  { "include": "#comment" },
                  { "include": "#parameter-definition" },
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(a(ggregate|ccessible\\s++by|uthid(\\s++(current_user|definer)))|deterministic|p(arallel_enable|ipelined)|re(sult_cache(\\s++relies_on)?|turn(\\s++self\\s++as\\s++result)?)|using)\\b"
                  },
                  { "include": "#storage" },
                  { "include": "#expression" }
                ],
                "end": "(?i)(?=(^|(?<= |\\t|;|\\)))(is|as)(?=\\s))|(?<=;)"
              },
              { "name": "meta.block.declaration",
                "begin": "(?i)(^|(?<= |\\t|;|\\)))(is|as)\\b",
                "captures": {
                    "0": { "name": "keyword.control.oracle.plsql" }
                },
                "patterns": [
                  { "include": "#block-declaration-oracle-plsql-include" }
                ],
                "end": "(?i)(?=\\b(begin|language|external)(\\s|$))|^(?=/\\s*$)"
              },
              {  "name": "invalid.deprecated",
                 "match": "(?i)\\b(external)\\b"
              },
              {  "name": "keyword.control",
                 "match": "(?i)\\b(name)\\b"
              },              
              { "include": "#block-executable" },
              { "name": "meta.section.call_spec",
                "begin": "(?i)\\s*+language\\b",
                "beginCaptures": {
                    "0": { "name": "keyword.other" }
                },
                "patterns": [
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(agent|c|in|java|library|name|parameters|with\\s++context)\\b"
                  },
                  { "include": "#parameter-definition" },
                  { "include": "#expression" }
                ],
                "end": ";",
                "endCaptures": {
                    "0": { "name": "keyword.other.delimiter" }
                }                
              },
              { "include": "#identifier" }
            ],
          "end": "(?<=;)|^(?=/\\s*)"
        }
      ]
    },
    "package": {
      "patterns": [
        { "name": "meta.block.package",
          "begin": "(?i)(^|(?<= |\\t|;))(?=(package)\\s)",
            "patterns": [
              { "name": "meta.block.package.heading",
                "begin": "(?i)(^|(?<= |\\t|;))(?=(package)\\s)",
                "patterns": [
                  { "name": "entity.name.function",
                    "match": "(?i)\\b(package(\\s++body)?)\\s++(&?(\\w|&|\\.)++)\\b",
                    "captures": {
                        "1": { "name": "keyword.other.oracle.plsql" }
                    }
                  },
                  {  "name": "keyword.control",
                     "match": "(?i)\\b(authid\\s++(current_user|definer))\\b"
                  },
                  {
                    "begin": "(?i)\\b(accessible\\s++by)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.control" }
                    },
                    "patterns": [
                      { "include": "#expression" }
                    ],
                    "end": "(?<=\\))"
                  }
                ],
                "end": "(?i)(?=(^|(?<= |\\t|;))(is|as)(?=\\s))|(?<=;)"
              },
              { "name": "meta.block.declaration",
                "begin": "(?i)(^|(?<= |\\t|;))(is|as)(?=\\s)",
                "captures": {
                    "0": { "name": "keyword.control.oracle.plsql" }
                },
                "patterns": [
                  { "include": "#block-declaration-oracle-plsql-include" }
                ],
                "end": "(?i)(?=\\b(end(\\s++\\w++)?(\\s*+;)|begin(\\s|$)))"
              },
              { "include": "#block-executable" },
              {  "name": "keyword.control.oracle.plsql",
                 "match": "(?i)(^|(?<= |\\t|;))(end)\\b(\\s++(&)?\\w++)?\\s*+(;)",
                 "captures": {
                     "2": { "name": "keyword.control.oracle.plsql" },
                     "3": { "name": "variable.other.oracle.plsql" },
                     "4": { "name": "keyword.other.terminator.oracle.plsql" }
                 }
              }
            ],
          "end": "(?<=;)"
        }
      ]
    },
    "trigger-heading-include": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(a(fter|lter|nalyze|s(sociate\\s++statistics)?|udit)|before|c(lone|omment|r(eate|ossedition))|d(atabase|b_role_change|dl|elete|isa(ble|ssociate\\s++statistics)|rop)|e(ach|nable)|fo(llows|r(ward)?)|grant|ins(ert|tead)|logo(ff|n)|n(e(sted|w)|oaudit)|o(f|ld|n|r)|p(arent|recedes|luggable)|r(e(ferencing|name|v(erse|oke))|ow)|s(chema|e(rvererror|t\\s++container)|hutdown|tartup|uspend)|t(able|runcate)|u(plug|pdate)|when)\\b"
        }
      ]
    },
    "trigger": {
      "name": "meta.block.subprogram",
      "begin": "(?i)(^|(?<= |\\t|;))(?=(trigger)\\s)",
      "patterns": [
        { "name": "meta.block.trigger.heading",
          "begin": "(?i)(^|(?<= |\\t|;))(?=(trigger)\\s)",
          "patterns": [
            { "name": "entity.name.function",
              "match": "(?i)\\b(trigger)\\s++(\\w++)\\b",
              "captures": {
                  "1": { "name": "keyword.other.oracle.plsql" }
              }
            },
            { "include": "#trigger-heading-include" },
            { "include": "#comment" },
            { "include": "#expression" }
          ],
          "end": "(?i)(?=(^|(?<= |\\t|;|\\)))(call|declare|begin|c(all|ompound))(?=\\s))"
        },
        {
          "begin": "(?i)(^|(?<= |\\t|;|\\)))(?=compound\\s++trigger\\b)",
          "patterns": [
            { "include": "#comment" },
            { "name": "meta.block.trigger.compound.declaration",
              "begin": "(?i)(^|(?<= |\\t|;|\\)))(compound\\s++trigger)\\b",
              "captures": {
                  "0": { "name": "keyword.control.oracle.plsql" }
              },
              "patterns": [
                { "include": "#block-declaration-oracle-plsql-include" }
              ],
              "end": "(?i)(?=\\b(after|before|instead)\\b)"
            },
            { "name": "meta.block.executable.trigger.compound",
              "begin": "(?i)\\b(after\\s++(each\\s++row|statement)|before\\s++(each\\s++row|statement)|instead\\s++of\\s++each\\s++row)\\b",
              "captures": {
                  "1": { "name": "keyword.other" }
              },
              "patterns": [
                {
                  "begin": "(?i)(\\bbegin\\b)",
                  "beginCaptures": {
                      "1": { "name": "keyword.control" }
                  },
                  "patterns": [
                    { "include": "#block-executable-oracle-plsql-include" }
                  ],
                  "end": "(?i)(?=\\bend)\\b"
                },
                {  "name": "keyword.control",
                   "match": "(?i)\\b(is)\\b"
                }
              ],
              "end": "(?i)\\b(end\\s++\\1)\\s*+(;)",
              "endCaptures": {
                  "2": { "name": "keyword.other.delimiter" }
              }
            },
            {
               "match": "(?i)\\b(end)(\\s++\\w++)?\\s*+(;)",
               "captures": {
                   "1": { "name": "keyword.conrol" },
                   "2": { "name": "variable.other" },
                   "3": { "name": "keyword.other.delimiter" }
               }
            }
          ],
          "end": "^(?=/\\s*)"
        },
        { "include": "#block-declaration" },
        { "include": "#block-executable" },
        { "include": "source.oracle.sql" }
      ],
      "end": "(?<=;)|^(?=/\\s*)"
    },
    "library": {
      "patterns": [
        { "name": "meta.block.library",
          "begin": "(?i)(^|(?<= |\\t|;))(?=(library)\\s)",
            "patterns": [
              { "name": "meta.block.package.heading",
                "begin": "(?i)(^|(?<= |\\t|;))(?=(library)\\s)",
                "patterns": [
                  { "name": "entity.name.function",
                    "match": "(?i)\\b(library)\\s++(&?(\\w|&|\\.)++)\\b",
                    "captures": {
                        "1": { "name": "keyword.other.oracle.plsql" }
                    }
                  }
                ],
                "end": "(?i)(?=(^|(?<= |\\t|;))(is|as)(?=\\s))|(?<=;)"
              },
              { "name": "meta.block.declaration",
                "begin": "(?i)(^|(?<= |\\t|;))(is|as)(?=\\s)",
                "beginCaptures": {
                    "0": { "name": "keyword.control" }
                },
                "patterns": [
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(agent|credential)\\b"
                  },
                  { "include": "#expression" }
                ],
                "end": ";",
                "endCaptures": {
                    "0": { "name": "keyword.other.delimiter" }
                }
              }
            ],
          "end": "(?<=;)"
        }
      ]
    },
    "invoker-rights-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(authid|current_user|definer)\\b",
           "comment": "invoker-rights-clause"
        }
      ]
    },
    "accessible-by-clause": {
      "patterns": [
        {  "name": "keyword.other",
           "match": "(?i)\\b(accessible|by)\\b",
           "comment": "accessible-by-clause"
        }
      ]
    },
    "type": {
      "patterns": [
        { "name": "meta.block.type",
          "begin": "(?i)(^|(?<= |\\t|;))(?=(type)\\s++(?!body\\s))",
            "patterns": [
              { "name": "meta.block.type.heading",
                "begin": "(?i)(^|(?<= |\\t|;))(?=(type)\\s)",
                "patterns": [
                  { "name": "entity.name.function",
                    "begin": "(?i)\\b(type)\\s++((?!body\\s))",
                    "beginCaptures": {
                        "1": { "name": "keyword.other" }
                    },
                    "patterns": [                    
                      { "include": "#identifier" }
                    ],
                    "end": "\\s"
                  },
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(force|oid)\\b",
                     "comment": "plsql-type-source"
                  },
                  { "include": "#invoker-rights-clause" },
                  { "include": "#accessible-by-clause" },
                  { "include": "#expression" }
                ],
                "end": "(?i)(?=(^|(?<= |\\t|;))(is|as|under)(?=\\s))|(?<=;)"
              },
              { "name": "meta.block.declaration",
                "begin": "(?i)(^|(?<= |\\t|;))((is|as)(\\b)|(?=under\\b))",
                "beginCaptures": {
                    "0": { "name": "keyword.control" }
                },
                "patterns": [
                  {
                    "begin": "(?i)\\b(object|under)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.other" }
                    },
                    "patterns": [
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(authid\\s++(current_user|definer)|external\\s++name|final|instatiable|language\\s++java|overriding|using)\\b"
                      },
                      {  "name": "constant.language",
                         "match": "(?i)\\b(customdata|oradata|sqldata)\\b"
                      },
                      {
                        "begin": "\\(",
                        "captures": {
                            "0": { "name": "keyword.other.delimiter" }
                        },
                        "patterns": [
                          {
                            "begin": "(?i)\\b(constructor|member|static)\\b",
                            "beginCaptures": {
                                "1": { "name": "keyword.other" }
                            },
                            "patterns": [
                              { "include": "#parameter-definition" },
                              {  "name": "keyword.other",
                                 "match": "(?i)\\b(a(gent|s)|c(ontext)?|external|function|in|java|l(anguage|ibrary)|name|p(arameters|rocedure)|return|variable|with)\\b"
                              },
                              {  "name": "keyword.other",
                                 "match": "(?i)\\b(as|is|re(sult|turn)|self)\\b",
                                 "comment": "constructor-spec"

                              },
                              { "include": "#storage" },
                              { "include": "#expression" }
                            ],
                            "end": "(?=,|\\))"
                          },
                          {  "name": "keyword.other",
                             "match": "(?i)\\b(external|name|ref)\\b"
                          },
                          {  "name": "keyword.other",
                             "match": "(?i)\\b(final|instatiable|not|overriding)\\b",
                             "comment": "inheritance-clauses"
                          },
                          {  "name": "keyword.other",
                             "match": "(?i)\\b(final|instantiable)\\b",
                             "comment": "constructor-spec"
                          },
                          {  "name": "keyword.other",
                             "match": "(?i)\\b(map|order)\\b",
                             "comment": "map-order-function-spec"
                          },
                          {  "name": "keyword.other",
                             "match": "(?i)\\b(pragma)\\b",
                             "comment": "restrict-references-pragma"
                          },
                          { "begin": "(?i)\\b(restrict_references)\\b",
                            "beginCaptures": {
                                "1": { "name": "keyword.other" }
                            },
                            "patterns": [
                              {
                                "begin": "(\\()",
                                "captures": {
                                    "1": { "name": "keyword.other.delimiter" }
                                },
                                "patterns": [
                                  {  "name": "keyword.other",
                                     "match": "(?i)\\b(default|rn(d|p)s|trust|wn(d|p)s)\\b",
                                     "comment": "restrict-references-pragma"
                                  },
                                  {  "name": "keyword.other.delimiter",
                                     "match": ","
                                  },
                                  { "include": "#identifier" }
                                ],
                                "end": "(\\))"
                              }
                            ],
                            "end": "(?<=\\))"
                          },
                          { "include": "#storage" },
                          { "include": "#expression" }
                        ],
                        "end": "\\)"
                      },
                      {
                        "begin": "(?i)\\b(constructor|member|static)\\b",
                        "beginCaptures": {
                            "1": { "name": "keyword.other" }
                        },
                        "patterns": [
                          { "include": "#subprogram" }
                        ],
                        "end": "(?<=;)"
                      },
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(final|instantiable)\\b",
                         "comment": "constructor-declaration"
                      },
                      {  "name": "keyword.other",
                         "match": "(?i)\\b(map|order)\\b",
                         "comment": "map-order-func-declaration"
                      },
                      { "name": "keyword.control",
                        "match": "(?i)\\b(end)\\b(?=\\s*+;)"
                      },
                      { "include": "#expression" }
                    ],
                    "end": "(?=;)|(?=^/\\s*)"
                  },
                  {  "name": "keyword.control",
                     "match": "(?i)\\b(n(ot|ull)|of|table)\\b",
                     "comment": "nested-table-type-def"
                  },
                  {  "name": "keyword.control",
                     "match": "(?i)\\b(array|of|n(not|ull)|varray|varying)\\b",
                     "comment": "varray-type-def"
                  },
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(by|index)\\b"
                  },
                  {  "name": "storage.type",
                     "match": "(?i)\\b(varchar2|integer|number|pls_integer)\\b"
                  },
                  { "include": "#expression" }
                ],
                "end": ";|(?=^/\\s*)",
                "endCaptures": {
                    "0": { "name": "keyword.other.delimiter" }
                }
              }
            ],
          "end": "(?<=;)|(?=^/\\s*)"
        }
      ]
    },
    "type-body": {
      "patterns": [
        { "name": "meta.block.type",
          "begin": "(?i)(^|(?<= |\\t|;))(?=(type\\s++body\\s))",
            "patterns": [
              { "name": "meta.block.type.heading",
                "begin": "(?i)(^|(?<= |\\t|;))(?=(type)\\s)",
                "patterns": [
                  { "name": "entity.name.function",
                    "begin": "(?i)\\b(type\\s++body\\s++)",
                    "beginCaptures": {
                        "1": { "name": "keyword.other" }
                    },
                    "patterns": [                    
                      { "include": "#identifier" }
                    ],
                    "end": "\\s"
                  },
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(force|oid)\\b",
                     "comment": "plsql-type-source"
                  },
                  { "include": "#invoker-rights-clause" },
                  { "include": "#accessible-by-clause" },
                  { "include": "#expression" }
                ],
                "end": "(?i)(?=(^|(?<= |\\t|;))(is|as|under)(?=\\s))|(?<=;)"
              },
              { "name": "meta.block.declaration",
                "begin": "(?i)(^|(?<= |\\t|;))((is|as)(\\b)|(?=under\\b))",
                "beginCaptures": {
                    "0": { "name": "keyword.control" }
                },
                "patterns": [
                  {
                    "begin": "(?i)\\b(constructor|member|static)\\b",
                    "beginCaptures": {
                        "1": { "name": "keyword.other" }
                    },
                    "patterns": [
                      { "include": "#subprogram" }
                    ],
                    "end": "(?<=;)"
                  },
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(final|instantiable)\\b",
                     "comment": "constructor-declaration"
                  },
                  {  "name": "keyword.other",
                     "match": "(?i)\\b(map|order)\\b",
                     "comment": "map-order-func-declaration"
                  }
                ],
                "end": "(?i)(?=\\bend\\s*;)",
                "endCaptures": {
                    "0": { "name": "keyword.other.delimiter" }
                }
              }
            ],
          "end": "(?i)\\b(end)\\s*(;)",
          "endCaptures": {
              "1": { "name": "keyword.control" },
              "2": { "name": "keyword.other.delimiter" }
          }
        }
      ]
    }
  },
  "uuid": "a4bd593a-8202-4207-8c94-a2ef526b96bc"
}