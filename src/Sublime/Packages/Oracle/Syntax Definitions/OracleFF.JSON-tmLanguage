// [PackageDev] target_format: plist, ext: tmLanguage
{ "name": "Oracle Fast Formula",
  "scopeName": "source.oracle.ff",
  "fileTypes": ["ff"],
  "uuid": "53c7eec1-9710-4b82-ae67-2687d0ea06eb",
  "patterns": [
    { "include": "#oracle-ff" }
  ],
  "repository": {
  	"oracle-ff": {
  		"patterns": [
  			{ "include": "#comment" },
  			{ "include": "#constant" },
  			{ "include": "#storage" },
  			{ "include": "#operator" },
  			{ "include": "#delimiter" },
  			{ "include": "#function" },
  			{ "include": "#control" },
  			{ "include": "##variable" }  			
  		]
  	},
  	"comment": {
  		"patterns": [
	  		{
	          "name": "comment.block",
	          "begin": "/\\*",
	          "captures": {
	              "0": { "name": "keyword.other.delimiter" }
	          },
	          "end": "\\*/",
	          "comment": "Block comment, can span multiple lines"
	        }
  		]
  	},
  	"constant": {
  		"patterns": [
	  		{
	         	"name": "string.quoted.single",
	         	"begin": "'",
	         	"captures": {
	         	    "0": { "name": "keyword.other.delimiter" }
	         	},
	         	"patterns": [
            		{  "name": "constant.character",
               			"match": "('')+"
            		}
           		],
           		"end": "'(?!')",
	        	"comment": "Single quote string, multi-line aware"
	        },
	        { 	
	        	"name": "constant.numeric",
	           	"match": "(\\b\\d++)?((\\.)\\d++)?\\b",
	           	"captures": {
	              	"3": { "name": "keyword.other.delimiter" }
	           }
	        }
  		]
  	},
  	"variable": {
  		"patterns": [
  			{  
  				"name": "variable.other",
  			  "match": "(?i)\\b([[:alpha:]])\\w{,79}\\b"
  			}
  		]
  	},
  	"storage": {
  		"patterns": [
  			{  "name": "storage.modifier",
  			   "match": "(?i)\\b(are|inputs)\\b"
  			},
  			{  "name": "storage.type",
  			   "match": "(?i)\\b(date|numeric|text)\\b"
  			},
  			{  "name": "storage.modifier",
  			   "match": "(?i)\\b(a(lias|s))\\b"
  			},
  			{  "name": "storage.modifier",
  			   "match": "(?i)\\b(default|for|is)\\b"
  			}
  		]
  	},
  	"operator": {
  		"patterns": [
  			{  "name": "keyword.operator",
  			   "match": "(\\+|-|\\*|/)"
  			},
  			{  "name": "keyword.operator",
  			   "match": "(=)"
  			},
  			{  "name": "keyword.operator",
  			   "match": "(?i)\\b(and|defaulted|like|not|or|was)\\b"
  			},
  			{  "name": "keyword.operator",
  			   "match": "(!|<|>)"
  			}
  		]
  	},
  	"delimiter": {
  		"patterns": [
  			{  "name": "keyword.other.delimiter",
  			   "match": "(,|\\(|\\))"
  			}
  		]
  	},
  	"function": {
  		"patterns": [
  			{  "name": "support.function",
  			   "match": "(?i)\\b(chr|debug|from|greatest(_of)?|in(itcap|str(b)?)|l(e(a(ding|st(_of)?)|nth(b)?)|ower|pad|trim)|r(eplace|pad|trim)|substr(b|ing)?|tr(a(iling|nslate)|im)|upper)\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(abs|calculate_hours_worked|floor|greatest(_of)?|least|power|round((_)?up)?|trunc(ate)?)\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(add_(days|months|years)|greatest|l(ast_dat|east)|months_between|ne(w_time|xt_dat))\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(convert|instr|num_to_char|to_(date|number|text))\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(get_(lookup_meaning|table_value|ra(ise_error|test_history)))\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(calculate_payroll_periods|get_(a(bsence|ccrual_band|s(g_inactive_days|signment_status))|carry_over|net_accrual|other_net_contribution|p(ayroll_period|eriod_dates)|start_date|working_days)|put_message)\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(call_formula|loop_control)\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(clear_globals|get_(date|number|text)|isnull|remove_globals|set_(date|number|text))\\b"
  			},
  			{  "name": "support.function",
  			   "match": "(?i)\\b(rbc_rate_retrieval)\\b"
  			}
  		]
  	},
  	"control": {
  		"patterns": [
  			{  "name": "keyword.control",
  			   "match": "(?i)\\b(else|if|then)\\b"
  			},
  			{  "name": "keyword.control",
  			   "match": "(?i)\\b(return)\\b"
  			}
  		]
  	}
  }
}